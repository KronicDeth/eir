module 'compile' ['compile'/3,
		  'compile_asm'/3,
		  'compile_beam'/3,
		  'compile_core'/3,
		  'env_compiler_options'/0,
		  'file'/1,
		  'file'/2,
		  'format_error'/1,
		  'forms'/1,
		  'forms'/2,
		  'iofile'/1,
		  'module_info'/0,
		  'module_info'/1,
		  'noenv_file'/2,
		  'noenv_forms'/2,
		  'noenv_output_generated'/1,
		  'options'/0,
		  'output_generated'/1]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[99|[111|[109|[112|[105|[108|[101|[46|[101|[114|[108]]]]]]]]]]]]]]],1}],
		%% Line 34
		'export_type' =
		    %% Line 34
		    [{'option',0}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[47|[104|[111|[109|[101|[47|[104|[97|[110|[115|[105|[104|[101|[47|[112|[114|[111|[106|[47|[114|[117|[115|[116|[47|[99|[111|[114|[101|[95|[101|[114|[108|[97|[110|[103|[47|[111|[116|[112|[47|[108|[105|[98|[47|[99|[111|[109|[112|[105|[108|[101|[114|[47|[46|[46|[47|[115|[116|[100|[108|[105|[98|[47|[105|[110|[99|[108|[117|[100|[101|[47|[101|[114|[108|[95|[99|[111|[109|[112|[105|[108|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 23
		'record' =
		    %% Line 23
		    [{'options',[{'typed_record_field',{'record_field',24,{'atom',24,'includes'},{'nil',24}},{'type',24,'list',[{'remote_type',24,[{'atom',24,'file'}|[{'atom',24,'filename'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',26,{'atom',26,'outdir'},{'string',26,[46]}},{'remote_type',26,[{'atom',26,'file'}|[{'atom',26,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',28,{'atom',28,'output_type'},{'atom',28,'undefined'}},{'type',28,'atom',[]}}|[{'typed_record_field',{'record_field',29,{'atom',29,'defines'},{'nil',29}},{'type',29,'list',[{'type',29,'union',[{'type',29,'atom',[]}|[{'type',29,'tuple',[{'type',29,'atom',[]}|[{'var',29,'_'}]]}]]}]}}|[{'typed_record_field',{'record_field',33,{'atom',33,'warning'},{'integer',33,1}},{'type',33,'non_neg_integer',[]}}|[{'typed_record_field',{'record_field',36,{'atom',36,'verbose'},{'atom',36,'false'}},{'type',36,'boolean',[]}}|[{'record_field',37,{'atom',37,'optimize'},{'integer',37,999}}|[{'typed_record_field',{'record_field',38,{'atom',38,'specific'},{'nil',38}},{'type',38,'list',[{'var',38,'_'}]}}|[{'typed_record_field',{'record_field',39,{'atom',39,'outfile'},{'string',39,[]}},{'remote_type',39,[{'atom',39,'file'}|[{'atom',39,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',41,{'atom',41,'cwd'}},{'remote_type',41,[{'atom',41,'file'}|[{'atom',41,'filename'}|[[]]]]}}]]]]]]]]]]}],
		%% Line 37
		'file' =
		    %% Line 37
		    [{[115|[114|[99|[47|[99|[111|[109|[112|[105|[108|[101|[46|[101|[114|[108]]]]]]]]]]]]]]],37}],
		%% Line 1
		'file' =
		    %% Line 1
		    [{[115|[114|[99|[47|[99|[111|[114|[101|[95|[112|[97|[114|[115|[101|[46|[104|[114|[108]]]]]]]]]]]]]]]]]],1}],
		%% Line 32
		'record' =
		    %% Line 32
		    [{'c_alias',[{'record_field',32,{'atom',32,'anno'},{'nil',32}}|[{'record_field',32,{'atom',32,'var'}}|[{'record_field',33,{'atom',33,'pat'}}]]]}],
		%% Line 35
		'record' =
		    %% Line 35
		    [{'c_apply',[{'record_field',35,{'atom',35,'anno'},{'nil',35}}|[{'record_field',35,{'atom',35,'op'}}|[{'record_field',36,{'atom',36,'args'}}]]]}],
		%% Line 38
		'record' =
		    %% Line 38
		    [{'c_binary',[{'record_field',38,{'atom',38,'anno'},{'nil',38}}|[{'typed_record_field',{'record_field',38,{'atom',38,'segments'}},{'type',38,'list',[{'remote_type',38,[{'atom',38,'cerl'}|[{'atom',38,'c_bitstr'}|[[]]]]}]}}]]}],
		%% Line 40
		'record' =
		    %% Line 40
		    [{'c_bitstr',[{'record_field',40,{'atom',40,'anno'},{'nil',40}}|[{'record_field',40,{'atom',40,'val'}}|[{'record_field',41,{'atom',41,'size'}}|[{'record_field',42,{'atom',42,'unit'}}|[{'record_field',43,{'atom',43,'type'}}|[{'record_field',44,{'atom',44,'flags'}}]]]]]]}],
		%% Line 46
		'record' =
		    %% Line 46
		    [{'c_call',[{'record_field',46,{'atom',46,'anno'},{'nil',46}}|[{'record_field',46,{'atom',46,'module'}}|[{'record_field',47,{'atom',47,'name'}}|[{'record_field',48,{'atom',48,'args'}}]]]]}],
		%% Line 50
		'record' =
		    %% Line 50
		    [{'c_case',[{'record_field',50,{'atom',50,'anno'},{'nil',50}}|[{'record_field',50,{'atom',50,'arg'}}|[{'record_field',51,{'atom',51,'clauses'}}]]]}],
		%% Line 53
		'record' =
		    %% Line 53
		    [{'c_catch',[{'record_field',53,{'atom',53,'anno'},{'nil',53}}|[{'record_field',53,{'atom',53,'body'}}]]}],
		%% Line 55
		'record' =
		    %% Line 55
		    [{'c_clause',[{'record_field',55,{'atom',55,'anno'},{'nil',55}}|[{'record_field',55,{'atom',55,'pats'}}|[{'record_field',56,{'atom',56,'guard'}}|[{'record_field',57,{'atom',57,'body'}}]]]]}],
		%% Line 59
		'record' =
		    %% Line 59
		    [{'c_cons',[{'record_field',59,{'atom',59,'anno'},{'nil',59}}|[{'record_field',59,{'atom',59,'hd'}}|[{'record_field',60,{'atom',60,'tl'}}]]]}],
		%% Line 62
		'record' =
		    %% Line 62
		    [{'c_fun',[{'record_field',62,{'atom',62,'anno'},{'nil',62}}|[{'record_field',62,{'atom',62,'vars'}}|[{'record_field',63,{'atom',63,'body'}}]]]}],
		%% Line 65
		'record' =
		    %% Line 65
		    [{'c_let',[{'record_field',65,{'atom',65,'anno'},{'nil',65}}|[{'record_field',65,{'atom',65,'vars'}}|[{'record_field',66,{'atom',66,'arg'}}|[{'record_field',67,{'atom',67,'body'}}]]]]}],
		%% Line 69
		'record' =
		    %% Line 69
		    [{'c_letrec',[{'record_field',69,{'atom',69,'anno'},{'nil',69}}|[{'record_field',69,{'atom',69,'defs'}}|[{'record_field',70,{'atom',70,'body'}}]]]}],
		%% Line 72
		'record' =
		    %% Line 72
		    [{'c_literal',[{'record_field',72,{'atom',72,'anno'},{'nil',72}}|[{'record_field',72,{'atom',72,'val'}}]]}],
		%% Line 74
		'record' =
		    %% Line 74
		    [{'c_map',[{'record_field',74,{'atom',74,'anno'},{'nil',74}}|[{'typed_record_field',{'record_field',75,{'atom',75,'arg'},{'record',75,'c_literal',[{'record_field',75,{'atom',75,'val'},{'map',75,[]}}]}},{'type',75,'union',[{'remote_type',75,[{'atom',75,'cerl'}|[{'atom',75,'c_var'}|[[]]]]}|[{'remote_type',75,[{'atom',75,'cerl'}|[{'atom',75,'c_literal'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',76,{'atom',76,'es'}},{'type',76,'list',[{'remote_type',76,[{'atom',76,'cerl'}|[{'atom',76,'c_map_pair'}|[[]]]]}]}}|[{'typed_record_field',{'record_field',77,{'atom',77,'is_pat'},{'atom',77,'false'}},{'type',77,'boolean',[]}}]]]]}],
		%% Line 79
		'record' =
		    %% Line 79
		    [{'c_map_pair',[{'record_field',79,{'atom',79,'anno'},{'nil',79}}|[{'typed_record_field',{'record_field',80,{'atom',80,'op'}},{'type',80,'union',[{'type',80,'record',[{'atom',80,'c_literal'}|[{'type',80,'field_type',[{'atom',80,'val'}|[{'atom',80,'assoc'}]]}]]}|[{'type',80,'record',[{'atom',80,'c_literal'}|[{'type',80,'field_type',[{'atom',80,'val'}|[{'atom',80,'exact'}]]}]]}]]}}|[{'record_field',81,{'atom',81,'key'}}|[{'record_field',82,{'atom',82,'val'}}]]]]}],
		%% Line 84
		'record' =
		    %% Line 84
		    [{'c_module',[{'record_field',84,{'atom',84,'anno'},{'nil',84}}|[{'record_field',84,{'atom',84,'name'}}|[{'record_field',85,{'atom',85,'exports'}}|[{'record_field',86,{'atom',86,'attrs'}}|[{'record_field',87,{'atom',87,'defs'}}]]]]]}],
		%% Line 89
		'record' =
		    %% Line 89
		    [{'c_primop',[{'record_field',89,{'atom',89,'anno'},{'nil',89}}|[{'record_field',89,{'atom',89,'name'}}|[{'record_field',90,{'atom',90,'args'}}]]]}],
		%% Line 92
		'record' =
		    %% Line 92
		    [{'c_receive',[{'record_field',92,{'atom',92,'anno'},{'nil',92}}|[{'record_field',92,{'atom',92,'clauses'}}|[{'record_field',93,{'atom',93,'timeout'}}|[{'record_field',94,{'atom',94,'action'}}]]]]}],
		%% Line 96
		'record' =
		    %% Line 96
		    [{'c_seq',[{'record_field',96,{'atom',96,'anno'},{'nil',96}}|[{'record_field',96,{'atom',96,'arg'}}|[{'record_field',97,{'atom',97,'body'}}]]]}],
		%% Line 99
		'record' =
		    %% Line 99
		    [{'c_try',[{'record_field',99,{'atom',99,'anno'},{'nil',99}}|[{'record_field',99,{'atom',99,'arg'}}|[{'record_field',100,{'atom',100,'vars'}}|[{'record_field',101,{'atom',101,'body'}}|[{'record_field',102,{'atom',102,'evars'}}|[{'record_field',103,{'atom',103,'handler'}}]]]]]]}],
		%% Line 105
		'record' =
		    %% Line 105
		    [{'c_tuple',[{'record_field',105,{'atom',105,'anno'},{'nil',105}}|[{'record_field',105,{'atom',105,'es'}}]]}],
		%% Line 107
		'record' =
		    %% Line 107
		    [{'c_values',[{'record_field',107,{'atom',107,'anno'},{'nil',107}}|[{'record_field',107,{'atom',107,'es'}}]]}],
		%% Line 109
		'record' =
		    %% Line 109
		    [{'c_var',[{'record_field',109,{'atom',109,'anno'},{'nil',109}}|[{'typed_record_field',{'record_field',109,{'atom',109,'name'}},{'remote_type',109,[{'atom',109,'cerl'}|[{'atom',109,'var_name'}|[[]]]]}}]]}],
		%% Line 38
		'file' =
		    %% Line 38
		    [{[115|[114|[99|[47|[99|[111|[109|[112|[105|[108|[101|[46|[101|[114|[108]]]]]]]]]]]]]]],38}],
		%% Line 44
		'type' =
		    %% Line 44
		    [{'abstract_code',{'type',44,'list',[{'remote_type',44,[{'atom',44,'erl_parse'}|[{'atom',44,'abstract_form'}|[[]]]]}]},[]}],
		%% Line 48
		'type' =
		    %% Line 48
		    [{'forms',{'type',48,'union',[{'user_type',48,'abstract_code',[]}|[{'remote_type',48,[{'atom',48,'cerl'}|[{'atom',48,'c_module'}|[[]]]]}]]},[]}],
		%% Line 50
		'type' =
		    %% Line 50
		    [{'option',{'type',50,'union',[{'type',50,'atom',[]}|[{'type',50,'tuple',[{'type',50,'atom',[]}|[{'type',50,'term',[]}]]}|[{'type',50,'tuple',[{'atom',50,'d'}|[{'type',50,'atom',[]}|[{'type',50,'term',[]}]]]}]]]},[]}],
		%% Line 52
		'type' =
		    %% Line 52
		    [{'err_info',{'type',52,'tuple',[{'type',52,'union',[{'remote_type',52,[{'atom',52,'erl_anno'}|[{'atom',52,'line'}|[[]]]]}|[{'atom',52,'none'}]]}|[{'type',53,'module',[]}|[{'type',53,'term',[]}]]]},[]}],
		%% Line 54
		'type' =
		    %% Line 54
		    [{'errors',{'type',54,'list',[{'type',54,'tuple',[{'remote_type',54,[{'atom',54,'file'}|[{'atom',54,'filename'}|[[]]]]}|[{'type',54,'list',[{'user_type',54,'err_info',[]}]}]]}]},[]}],
		%% Line 55
		'type' =
		    %% Line 55
		    [{'warnings',{'type',55,'list',[{'type',55,'tuple',[{'remote_type',55,[{'atom',55,'file'}|[{'atom',55,'filename'}|[[]]]]}|[{'type',55,'list',[{'user_type',55,'err_info',[]}]}]]}]},[]}],
		%% Line 56
		'type' =
		    %% Line 56
		    [{'mod_ret',{'type',56,'union',[{'type',56,'tuple',[{'atom',56,'ok'}|[{'type',56,'module',[]}]]}|[{'type',57,'tuple',[{'atom',57,'ok'}|[{'type',57,'module',[]}|[{'remote_type',57,[{'atom',57,'cerl'}|[{'atom',57,'c_module'}|[[]]]]}]]]}|[{'type',58,'tuple',[{'atom',58,'ok'}|[{'type',59,'union',[{'type',59,'module',[]}|[{'type',59,'nil',[]}]]}|[{'user_type',60,'abstract_code',[]}]]]}|[{'type',61,'tuple',[{'atom',61,'ok'}|[{'type',61,'module',[]}|[{'user_type',61,'warnings',[]}]]]}]]]]},[]}],
		%% Line 62
		'type' =
		    %% Line 62
		    [{'bin_ret',{'type',62,'union',[{'type',62,'tuple',[{'atom',62,'ok'}|[{'type',62,'module',[]}|[{'type',62,'binary',[]}]]]}|[{'type',63,'tuple',[{'atom',63,'ok'}|[{'type',63,'module',[]}|[{'type',63,'binary',[]}|[{'user_type',63,'warnings',[]}]]]]}]]},[]}],
		%% Line 64
		'type' =
		    %% Line 64
		    [{'err_ret',{'type',64,'union',[{'atom',64,'error'}|[{'type',64,'tuple',[{'atom',64,'error'}|[{'user_type',64,'errors',[]}|[{'user_type',64,'warnings',[]}]]]}]]},[]}],
		%% Line 65
		'type' =
		    %% Line 65
		    [{'comp_ret',{'type',65,'union',[{'user_type',65,'mod_ret',[]}|[{'user_type',65,'bin_ret',[]}|[{'user_type',65,'err_ret',[]}]]]},[]}],
		%% Line 80
		'spec' =
		    %% Line 80
		    [{{'file',1},[{'type',80,'fun',[{'type',80,'product',[{'type',80,'union',[{'type',80,'module',[]}|[{'remote_type',80,[{'atom',80,'file'}|[{'atom',80,'filename'}|[[]]]]}]]}]}|[{'user_type',80,'comp_ret',[]}]]}]}],
		%% Line 84
		'spec' =
		    %% Line 84
		    [{{'file',2},[{'type',84,'fun',[{'type',84,'product',[{'type',84,'union',[{'type',84,'module',[]}|[{'remote_type',84,[{'atom',84,'file'}|[{'atom',84,'filename'}|[[]]]]}]]}|[{'type',84,'union',[{'type',84,'list',[{'user_type',84,'option',[]}]}|[{'user_type',84,'option',[]}]]}]]}|[{'user_type',84,'comp_ret',[]}]]}]}],
		%% Line 91
		'spec' =
		    %% Line 91
		    [{{'forms',1},[{'type',91,'fun',[{'type',91,'product',[{'user_type',91,'abstract_code',[]}]}|[{'user_type',91,'comp_ret',[]}]]}]}],
		%% Line 95
		'spec' =
		    %% Line 95
		    [{{'forms',2},[{'type',95,'fun',[{'type',95,'product',[{'user_type',95,'forms',[]}|[{'type',95,'union',[{'type',95,'list',[{'user_type',95,'option',[]}]}|[{'user_type',95,'option',[]}]]}]]}|[{'user_type',95,'comp_ret',[]}]]}]}],
		%% Line 106
		'spec' =
		    %% Line 106
		    [{{'output_generated',1},[{'type',106,'fun',[{'type',106,'product',[{'type',106,'list',[{'user_type',106,'option',[]}]}]}|[{'type',106,'boolean',[]}]]}]}],
		%% Line 116
		'spec' =
		    %% Line 116
		    [{{'noenv_file',2},[{'type',116,'fun',[{'type',116,'product',[{'type',116,'union',[{'type',116,'module',[]}|[{'remote_type',116,[{'atom',116,'file'}|[{'atom',116,'filename'}|[[]]]]}]]}|[{'type',116,'union',[{'type',116,'list',[{'user_type',116,'option',[]}]}|[{'user_type',116,'option',[]}]]}]]}|[{'user_type',116,'comp_ret',[]}]]}]}],
		%% Line 123
		'spec' =
		    %% Line 123
		    [{{'noenv_forms',2},[{'type',123,'fun',[{'type',123,'product',[{'user_type',123,'forms',[]}|[{'type',123,'union',[{'type',123,'list',[{'user_type',123,'option',[]}]}|[{'user_type',123,'option',[]}]]}]]}|[{'user_type',123,'comp_ret',[]}]]}]}],
		%% Line 130
		'spec' =
		    %% Line 130
		    [{{'noenv_output_generated',1},[{'type',130,'fun',[{'type',130,'product',[{'type',130,'list',[{'user_type',130,'option',[]}]}]}|[{'type',130,'boolean',[]}]]}]}],
		%% Line 142
		'spec' =
		    %% Line 142
		    [{{'env_compiler_options',0},[{'type',142,'fun',[{'type',142,'product',[]}|[{'type',142,'list',[{'type',142,'term',[]}]}]]}]}],
		%% Line 240
		'spec' =
		    %% Line 240
		    [{{'format_error',1},[{'type',240,'fun',[{'type',240,'product',[{'type',240,'term',[]}]}|[{'type',240,'iolist',[]}]]}]}],
		%% Line 302
		'type' =
		    %% Line 302
		    [{'err_warn_info',{'type',302,'tuple','any'},[]}],
		%% Line 305
		'record' =
		    %% Line 305
		    [{'compile',[{'typed_record_field',{'record_field',305,{'atom',305,'filename'},{'string',305,[]}},{'remote_type',305,[{'atom',305,'file'}|[{'atom',305,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',306,{'atom',306,'dir'},{'string',306,[]}},{'remote_type',306,[{'atom',306,'file'}|[{'atom',306,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',307,{'atom',307,'base'},{'string',307,[]}},{'remote_type',307,[{'atom',307,'file'}|[{'atom',307,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',308,{'atom',308,'ifile'},{'string',308,[]}},{'remote_type',308,[{'atom',308,'file'}|[{'atom',308,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',309,{'atom',309,'ofile'},{'string',309,[]}},{'remote_type',309,[{'atom',309,'file'}|[{'atom',309,'filename'}|[[]]]]}}|[{'typed_record_field',{'record_field',310,{'atom',310,'module'},{'nil',310}},{'type',310,'union',[{'type',310,'module',[]}|[{'type',310,'nil',[]}]]}}|[{'typed_record_field',{'record_field',311,{'atom',311,'core_code'},{'nil',311}},{'type',311,'union',[{'remote_type',311,[{'atom',311,'cerl'}|[{'atom',311,'c_module'}|[[]]]]}|[{'type',311,'nil',[]}]]}}|[{'typed_record_field',{'record_field',312,{'atom',312,'abstract_code'},{'nil',312}},{'user_type',312,'abstract_code',[]}}|[{'typed_record_field',{'record_field',313,{'atom',313,'options'},{'nil',313}},{'type',313,'list',[{'user_type',313,'option',[]}]}}|[{'typed_record_field',{'record_field',314,{'atom',314,'mod_options'},{'nil',314}},{'type',314,'list',[{'user_type',314,'option',[]}]}}|[{'typed_record_field',{'record_field',315,{'atom',315,'encoding'},{'atom',315,'none'}},{'type',315,'union',[{'atom',315,'none'}|[{'remote_type',315,[{'atom',315,'epp'}|[{'atom',315,'source_encoding'}|[[]]]]}]]}}|[{'typed_record_field',{'record_field',316,{'atom',316,'errors'},{'nil',316}},{'type',316,'list',[{'user_type',316,'err_warn_info',[]}]}}|[{'typed_record_field',{'record_field',317,{'atom',317,'warnings'},{'nil',317}},{'type',317,'list',[{'user_type',317,'err_warn_info',[]}]}}|[{'typed_record_field',{'record_field',318,{'atom',318,'extra_chunks'},{'nil',318}},{'type',318,'list',[{'type',318,'tuple',[{'type',318,'binary',[]}|[{'type',318,'binary',[]}]]}]}}]]]]]]]]]]]]]]}],
		%% Line 814
		'record' =
		    %% Line 814
		    [{'asm_module',[{'record_field',814,{'atom',814,'module'}}|[{'record_field',815,{'atom',815,'exports'}}|[{'record_field',816,{'atom',816,'labels'}}|[{'record_field',817,{'atom',817,'functions'},{'nil',817}}|[{'record_field',818,{'atom',818,'cfun'}}|[{'record_field',819,{'atom',819,'code'}}|[{'record_field',820,{'atom',820,'attributes'},{'nil',820}}]]]]]]]}],
		%% Line 1721
		'spec' =
		    %% Line 1721
		    [{{'iofile',1},[{'type',1721,'fun',[{'type',1721,'product',[{'type',1721,'union',[{'type',1721,'atom',[]}|[{'remote_type',1721,[{'atom',1721,'file'}|[{'atom',1721,'filename_all'}|[[]]]]}]]}]}|[{'type',1722,'tuple',[{'remote_type',1722,[{'atom',1722,'file'}|[{'atom',1722,'name_all'}|[[]]]]}|[{'remote_type',1722,[{'atom',1722,'file'}|[{'atom',1722,'name_all'}|[[]]]]}]]}]]}]}],
		%% Line 1833
		'spec' =
		    %% Line 1833
		    [{{'options',0},[{'type',1833,'fun',[{'type',1833,'product',[]}|[{'atom',1833,'ok'}]]}]}],
		%% Line 1873
		'spec' =
		    %% Line 1873
		    [{{'compile',3},[{'type',1873,'fun',[{'type',1873,'product',[{'remote_type',1873,[{'atom',1873,'file'}|[{'atom',1873,'filename'}|[[]]]]}|[{'var',1873,'_'}|[{'type',1873,'record',[{'atom',1873,'options'}]}]]]}|[{'type',1873,'union',[{'atom',1873,'ok'}|[{'atom',1873,'error'}]]}]]}]}],
		%% Line 1883
		'spec' =
		    %% Line 1883
		    [{{'compile_beam',3},[{'type',1883,'fun',[{'type',1883,'product',[{'remote_type',1883,[{'atom',1883,'file'}|[{'atom',1883,'filename'}|[[]]]]}|[{'var',1883,'_'}|[{'type',1883,'record',[{'atom',1883,'options'}]}]]]}|[{'type',1883,'union',[{'atom',1883,'ok'}|[{'atom',1883,'error'}]]}]]}]}],
		%% Line 1892
		'spec' =
		    %% Line 1892
		    [{{'compile_asm',3},[{'type',1892,'fun',[{'type',1892,'product',[{'remote_type',1892,[{'atom',1892,'file'}|[{'atom',1892,'filename'}|[[]]]]}|[{'var',1892,'_'}|[{'type',1892,'record',[{'atom',1892,'options'}]}]]]}|[{'type',1892,'union',[{'atom',1892,'ok'}|[{'atom',1892,'error'}]]}]]}]}],
		%% Line 1901
		'spec' =
		    %% Line 1901
		    [{{'compile_core',3},[{'type',1901,'fun',[{'type',1901,'product',[{'remote_type',1901,[{'atom',1901,'file'}|[{'atom',1901,'filename'}|[[]]]]}|[{'var',1901,'_'}|[{'type',1901,'record',[{'atom',1901,'options'}]}]]]}|[{'type',1901,'union',[{'atom',1901,'ok'}|[{'atom',1901,'error'}]]}]]}]}]]
'file'/1 =
    %% Line 82
    fun (_0) ->
	apply 'file'/2
	    (_0, ['verbose'|['report_errors'|['report_warnings']]])
'file'/2 =
    %% Line 86
    fun (_1,_0) ->
	case <_1,_0> of
	  <File,Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      let <_2> =
		  apply %% Line 87
			'env_default_opts'/0
		      ()
	      in  let <_3> =
		      call %% Line 87
			   'erlang':%% Line 87
				    '++'
			  (%% Line 87
			   Opts, _2)
		  in  %% Line 87
		      apply 'do_compile'/2
			  ({'file',File}, _3)
	  %% Line 88
	  <File,Opt> when 'true' ->
	      %% Line 89
	      apply 'file'/2
		  (File, [Opt|['verbose'|['report_errors'|['report_warnings']]]])
	end
'forms'/1 =
    %% Line 93
    fun (_0) ->
	apply 'forms'/2
	    (_0, ['verbose'|['report_errors'|['report_warnings']]])
'forms'/2 =
    %% Line 97
    fun (_1,_0) ->
	case <_1,_0> of
	  <Forms,Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      let <_2> =
		  apply %% Line 98
			'env_default_opts'/0
		      ()
	      in  let <_3> =
		      call %% Line 98
			   'erlang':%% Line 98
				    '++'
			  (%% Line 98
			   Opts, _2)
		  in  %% Line 98
		      apply 'do_compile'/2
			  ({'forms',Forms}, ['binary'|_3])
	  %% Line 99
	  <Forms,Opt>
	      when call 'erlang':'is_atom'
		    (Opt) ->
	      %% Line 100
	      apply 'forms'/2
		  (Forms, [Opt|['verbose'|['report_errors'|['report_warnings']]]])
	  ( <_5,_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5,_4})
		  -| [{'function_name',{'forms',2}}] )
	    -| ['compiler_generated'] )
	end
'output_generated'/1 =
    %% Line 108
    fun (_0) ->
	let <_1> =
	    apply %% Line 109
		  'env_default_opts'/0
		()
	in  let <_2> =
		call %% Line 109
		     'erlang':%% Line 109
			      '++'
		    (_0, _1)
	    in  %% Line 109
		apply 'noenv_output_generated'/1
		    (_2)
'noenv_file'/2 =
    %% Line 118
    fun (_1,_0) ->
	case <_1,_0> of
	  <File,Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      %% Line 119
	      apply 'do_compile'/2
		  ({'file',File}, Opts)
	  %% Line 120
	  <File,Opt> when 'true' ->
	      %% Line 121
	      apply 'noenv_file'/2
		  (File, [Opt|['verbose'|['report_errors'|['report_warnings']]]])
	end
'noenv_forms'/2 =
    %% Line 125
    fun (_1,_0) ->
	case <_1,_0> of
	  <Forms,Opts>
	      when call 'erlang':'is_list'
		    (Opts) ->
	      %% Line 126
	      apply 'do_compile'/2
		  ({'forms',Forms}, ['binary'|Opts])
	  %% Line 127
	  <Forms,Opt>
	      when call 'erlang':'is_atom'
		    (Opt) ->
	      %% Line 128
	      apply 'noenv_forms'/2
		  (Forms, [Opt|['verbose'|['report_errors'|['report_warnings']]]])
	  ( <_3,_2> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3,_2})
		  -| [{'function_name',{'noenv_forms',2}}] )
	    -| ['compiler_generated'] )
	end
'noenv_output_generated'/1 =
    %% Line 132
    fun (_0) ->
	let <_1> =
	    apply %% Line 133
		  'expand_opts'/1
		(_0)
	in  %% Line 133
	    case apply 'passes'/2
		     ('file', _1) of
	      <{_7,Passes}> when 'true' ->
		  let <_5> =
		      fun (_3) ->
			  %% Line 134
			  case _3 of
			    <{'save_binary',_X_T,_X_F}> when 'true' ->
				'true'
			    %% Line 135
			    <_X_Other> when 'true' ->
				'false'
			  end
		  in  %% Line 134
		      call 'lists':'any'
			  (_5, %% Line 136
			       Passes)
	      ( <_2> when 'true' ->
		    primop 'match_fail'
			({'badmatch',_2})
		-| ['compiler_generated'] )
	    end
'env_compiler_options'/0 =
    %% Line 144
    fun () ->
	apply 'env_default_opts'/0
	    ()
'env_default_opts'/0 =
    %% Line 153
    fun () ->
	%% Line 155
	case call 'os':'getenv'
		 ([69|[82|[76|[95|[67|[79|[77|[80|[73|[76|[69|[82|[95|[79|[80|[84|[73|[79|[78|[83]]]]]]]]]]]]]]]]]]]]) of
	  %% Line 156
	  <'false'> when 'true' ->
	      []
	  %% Line 157
	  <Str>
	      when call 'erlang':'is_list'
		    (Str) ->
	      %% Line 158
	      case call 'erl_scan':'string'
		       (Str) of
		%% Line 159
		<{'ok',Tokens,_7}> when 'true' ->
		    let <_1> =
			call %% Line 160
			     'erl_anno':%% Line 160
					'new'
			    (%% Line 160
			     1)
		    in  let <Dot> = {%% Line 160
			     'dot',_1}
			in  let <_3> =
				call %% Line 161
				     'erlang':%% Line 161
					      '++'
				    (%% Line 161
				     Tokens, %% Line 161
					     [Dot|[]])
			    in  %% Line 161
				case call 'erl_parse':'parse_term'
					 (_3) of
				  %% Line 162
				  <{'ok',List}>
				      when call 'erlang':'is_list'
					    (List) ->
				      List
				  %% Line 163
				  <{'ok',Term}> when 'true' ->
				      [Term|[]]
				  %% Line 164
				  <{'error',_X_Reason}> when 'true' ->
				      do  %% Line 165
					  call 'io':'format'
					      ([73|[103|[110|[111|[114|[105|[110|[103|[32|[98|[97|[100|[32|[116|[101|[114|[109|[32|[105|[110|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]], [[69|[82|[76|[95|[67|[79|[77|[80|[73|[76|[69|[82|[95|[79|[80|[84|[73|[79|[78|[83]]]]]]]]]]]]]]]]]]]]])
					  %% Line 166
					  []
				  ( <_4> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_4})
				    -| ['compiler_generated'] )
				end
		%% Line 168
		<{'error',{_8,_9,_X_Reason},_10}> when 'true' ->
		    do  %% Line 169
			call 'io':'format'
			    ([73|[103|[110|[111|[114|[105|[110|[103|[32|[98|[97|[100|[32|[116|[101|[114|[109|[32|[105|[110|[32|[126|[115|[10]]]]]]]]]]]]]]]]]]]]]]]], [[69|[82|[76|[95|[67|[79|[77|[80|[73|[76|[69|[82|[95|[79|[80|[84|[73|[79|[78|[83]]]]]]]]]]]]]]]]]]]]])
			%% Line 170
			[]
		( <_5> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_5})
		  -| ['compiler_generated'] )
	      end
	  ( <_6> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_6})
	    -| ['compiler_generated'] )
	end
'do_compile'/2 =
    %% Line 174
    fun (_1,_0) ->
	let <Opts> =
	    apply %% Line 175
		  'expand_opts'/1
		(_0)
	in  let <IntFun> =
		fun () ->
		    %% Line 176
		    try
			%% Line 177
			apply 'internal'/2
			    (_1, Opts)
		    of <_3> ->
			_3
		    catch <_6,_5,_4> ->
			%% Line 179
			case <_6,_5,_4> of
			  <( 'error'
			     -| ['compiler_generated'] ),Reason,_14> when 'true' ->
			      %% Line 180
			      {'error',Reason}
			  ( <_19,_20,_21> when 'true' ->
				primop 'raise'
				    (_21, _20)
			    -| ['compiler_generated'] )
			end
	    in  %% Line 184
		case call 'lists':'member'
			 ('dialyzer', Opts) of
		  %% Line 185
		  <'true'> when 'true' ->
		      %% Line 186
		      apply IntFun
			  ()
		  %% Line 187
		  <'false'> when 'true' ->
		      let <_9> =
			  fun () ->
			      let <_8> =
				  apply %% Line 190
					IntFun
				      ()
			      in  %% Line 190
				  call 'erlang':'exit'
				      (_8)
		      in  %% Line 188
			  case %% Line 189
			       call 'erlang':'spawn_monitor'
				   (_9) of
			    <{Pid,Ref}> when 'true' ->
				%% Line 192
				receive
				  %% Line 193
				  <{'DOWN',_15,'process',_16,Rep}>
				      when let <_17> =
					    call 'erlang':'=:='
						(_15, Ref)
					in  let <_18> =
						call 'erlang':'=:='
						    (_16, Pid)
					    in  call 'erlang':'and'
						    (_17, _18) ->
				      Rep
				after 'infinity' ->
				  'true'
			    ( <_10> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_10})
			      -| ['compiler_generated'] )
			  end
		  ( <_11> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_11})
		    -| ['compiler_generated'] )
		end
'expand_opts'/1 =
    %% Line 197
    fun (_0) ->
	let <_3> =
	    call %% Line 199
		 'proplists':%% Line 199
			     'get_value'
		(%% Line 199
		 'debug_info_key', _0)
	in  let <_2> =
		call %% Line 200
		     'proplists':%% Line 200
				 'get_value'
		    (%% Line 200
		     'encrypt_debug_info', _0)
	    in  let <_1> =
		    call %% Line 201
			 'proplists':%% Line 201
				     'get_value'
			(%% Line 201
			 'debug_info', _0)
		in  let <_5> =
			case <_3,_2,_1> of
			  %% Line 202
			  <( 'undefined'
			     -| ['compiler_generated'] ),( 'undefined'
							   -| ['compiler_generated'] ),_11> when 'true' ->
			      _0
			  %% Line 203
			  <_12,_13,( 'undefined'
				     -| ['compiler_generated'] )> when 'true' ->
			      ['debug_info'|_0]
			  %% Line 204
			  <_14,_15,_16> when 'true' ->
			      _0
			end
		    in  let <_8> =
			    case %% Line 207
				 call 'proplists':'is_defined'
				     ('makedep_side_effect', _5) of
			      %% Line 208
			      <'true'> when 'true' ->
				  call 'proplists':'delete'
				      ('makedep', _5)
			      %% Line 209
			      <'false'> when 'true' ->
				  _5
			      ( <_7> when 'true' ->
				    %% Line 207
				    primop 'match_fail'
					({'case_clause',_7})
				-| ['compiler_generated'] )
			    end
			in  %% Line 211
			    call 'lists':'foldr'
				(( 'expand_opt'/2
				   -| [{'id',{0,0,'-expand_opts/1-fun-0-'}}] ), [], _8)
'expand_opt'/2 =
    %% Line 213
    fun (_1,_0) ->
	case <_1,_0> of
	  <'basic_validation',Os> when 'true' ->
	      %% Line 214
	      ['no_code_generation'|['to_pp'|['binary'|Os]]]
	  %% Line 215
	  <'strong_validation',Os> when 'true' ->
	      %% Line 216
	      ['no_code_generation'|['to_kernel'|['binary'|Os]]]
	  %% Line 217
	  <'report',Os> when 'true' ->
	      %% Line 218
	      ['report_errors'|['report_warnings'|Os]]
	  %% Line 219
	  <'return',Os> when 'true' ->
	      %% Line 220
	      ['return_errors'|['return_warnings'|Os]]
	  %% Line 221
	  <'r16',Os> when 'true' ->
	      %% Line 222
	      ['no_get_hd_tl'|['no_record_opt'|['no_utf8_atoms'|Os]]]
	  %% Line 223
	  <'r17',Os> when 'true' ->
	      %% Line 224
	      ['no_get_hd_tl'|['no_record_opt'|['no_utf8_atoms'|Os]]]
	  %% Line 225
	  <'r18',Os> when 'true' ->
	      %% Line 226
	      ['no_get_hd_tl'|['no_record_opt'|['no_utf8_atoms'|Os]]]
	  %% Line 227
	  <'r19',Os> when 'true' ->
	      %% Line 228
	      ['no_get_hd_tl'|['no_record_opt'|['no_utf8_atoms'|Os]]]
	  %% Line 229
	  <'r20',Os> when 'true' ->
	      %% Line 230
	      ['no_get_hd_tl'|['no_record_opt'|['no_utf8_atoms'|Os]]]
	  %% Line 231
	  <O = {'debug_info_key',_4},Os> when 'true' ->
	      %% Line 232
	      ['encrypt_debug_info'|[O|Os]]
	  %% Line 233
	  <'no_float_opt',Os> when 'true' ->
	      %% Line 235
	      ['no_topt'|Os]
	  %% Line 236
	  <O,Os> when 'true' ->
	      [O|Os]
	end
'format_error'/1 =
    %% Line 242
    fun (_0) ->
	case _0 of
	  <'no_native_support'> when 'true' ->
	      %% Line 243
	      [116|[104|[105|[115|[32|[115|[121|[115|[116|[101|[109|[32|[105|[115|[32|[110|[111|[116|[32|[99|[111|[110|[102|[105|[103|[117|[114|[101|[100|[32|[102|[111|[114|[32|[110|[97|[116|[105|[118|[101|[45|[99|[111|[100|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 244
	  <'no_crypto'> when 'true' ->
	      %% Line 245
	      [116|[104|[105|[115|[32|[115|[121|[115|[116|[101|[109|[32|[105|[115|[32|[110|[111|[116|[32|[99|[111|[110|[102|[105|[103|[117|[114|[101|[100|[32|[119|[105|[116|[104|[32|[99|[114|[121|[112|[116|[111|[32|[115|[117|[112|[112|[111|[114|[116|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 246
	  <'bad_crypto_key'> when 'true' ->
	      %% Line 247
	      [105|[110|[118|[97|[108|[105|[100|[32|[99|[114|[121|[112|[116|[111|[32|[107|[101|[121|[46]]]]]]]]]]]]]]]]]]]
	  %% Line 248
	  <'no_crypto_key'> when 'true' ->
	      %% Line 249
	      [110|[111|[32|[99|[114|[121|[112|[116|[111|[32|[107|[101|[121|[32|[115|[117|[112|[112|[108|[105|[101|[100|[46]]]]]]]]]]]]]]]]]]]]]]]
	  %% Line 250
	  <{'native',E}> when 'true' ->
	      %% Line 251
	      call 'io_lib':'fwrite'
		  ([110|[97|[116|[105|[118|[101|[45|[99|[111|[100|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[102|[97|[105|[108|[101|[100|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[58|[32|[126|[116|[80|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 252
																																				     [E|[25]])
	  %% Line 253
	  <{'native_crash',E,Stk}> when 'true' ->
	      %% Line 254
	      call 'io_lib':'fwrite'
		  ([110|[97|[116|[105|[118|[101|[45|[99|[111|[100|[101|[32|[99|[111|[109|[112|[105|[108|[97|[116|[105|[111|[110|[32|[99|[114|[97|[115|[104|[101|[100|[32|[119|[105|[116|[104|[32|[114|[101|[97|[115|[111|[110|[58|[32|[126|[116|[80|[46|[10|[126|[116|[80|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 255
																																								     [E|[25|[Stk|[25]]]])
	  %% Line 256
	  <{'open',E}> when 'true' ->
	      let <_1> =
		  call %% Line 257
		       'file':%% Line 257
			      'format_error'
		      (%% Line 257
		       E)
	      in  %% Line 257
		  call 'io_lib':'format'
		      ([111|[112|[101|[110|[32|[101|[114|[114|[111|[114|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]], [_1|[]])
	  %% Line 258
	  <{'epp',E}> when 'true' ->
	      %% Line 259
	      call 'epp':'format_error'
		  (E)
	  %% Line 260
	  <'write_error'> when 'true' ->
	      %% Line 261
	      [101|[114|[114|[111|[114|[32|[119|[114|[105|[116|[105|[110|[103|[32|[102|[105|[108|[101]]]]]]]]]]]]]]]]]]
	  %% Line 262
	  <{'write_error',Error}> when 'true' ->
	      let <_2> =
		  call %% Line 263
		       'file':%% Line 263
			      'format_error'
		      (%% Line 263
		       Error)
	      in  %% Line 263
		  call 'io_lib':'format'
		      ([101|[114|[114|[111|[114|[32|[119|[114|[105|[116|[105|[110|[103|[32|[102|[105|[108|[101|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]], [_2|[]])
	  %% Line 264
	  <{'rename',From,To,Error}> when 'true' ->
	      let <_3> =
		  call %% Line 266
		       'file':%% Line 266
			      'format_error'
		      (%% Line 266
		       Error)
	      in  %% Line 265
		  call 'io_lib':'format'
		      ([102|[97|[105|[108|[101|[100|[32|[116|[111|[32|[114|[101|[110|[97|[109|[101|[32|[126|[116|[115|[32|[116|[111|[32|[126|[116|[115|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 266
																									       [From|[To|[_3|[]]]])
	  %% Line 267
	  <{'delete',File,Error}> when 'true' ->
	      let <_4> =
		  call %% Line 269
		       'file':%% Line 269
			      'format_error'
		      (%% Line 269
		       Error)
	      in  %% Line 268
		  call 'io_lib':'format'
		      ([102|[97|[105|[108|[101|[100|[32|[116|[111|[32|[100|[101|[108|[101|[116|[101|[32|[102|[105|[108|[101|[32|[126|[116|[115|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 269
																								     [File|[_4|[]]])
	  %% Line 270
	  <{'delete_temp',File,Error}> when 'true' ->
	      let <_5> =
		  call %% Line 272
		       'file':%% Line 272
			      'format_error'
		      (%% Line 272
		       Error)
	      in  %% Line 271
		  call 'io_lib':'format'
		      ([102|[97|[105|[108|[101|[100|[32|[116|[111|[32|[100|[101|[108|[101|[116|[101|[32|[116|[101|[109|[112|[111|[114|[97|[114|[121|[32|[102|[105|[108|[101|[32|[126|[116|[115|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 272
																															       [File|[_5|[]]])
	  %% Line 273
	  <{'parse_transform',M,R}> when 'true' ->
	      %% Line 274
	      call 'io_lib':'format'
		  ([101|[114|[114|[111|[114|[32|[105|[110|[32|[112|[97|[114|[115|[101|[32|[116|[114|[97|[110|[115|[102|[111|[114|[109|[32|[39|[126|[116|[115|[39|[58|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[R|[]]])
	  %% Line 275
	  <{'undef_parse_transform',M}> when 'true' ->
	      %% Line 276
	      call 'io_lib':'format'
		  ([117|[110|[100|[101|[102|[105|[110|[101|[100|[32|[112|[97|[114|[115|[101|[32|[116|[114|[97|[110|[115|[102|[111|[114|[109|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[]])
	  %% Line 277
	  <{'core_transform',M,R}> when 'true' ->
	      %% Line 278
	      call 'io_lib':'format'
		  ([101|[114|[114|[111|[114|[32|[105|[110|[32|[99|[111|[114|[101|[32|[116|[114|[97|[110|[115|[102|[111|[114|[109|[32|[39|[126|[115|[39|[58|[32|[126|[116|[112]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [M|[R|[]]])
	  %% Line 279
	  <{'crash',Pass,Reason}> when 'true' ->
	      let <_6> =
		  apply %% Line 280
			'format_error_reason'/1
		      (%% Line 280
		       Reason)
	      in  %% Line 280
		  call 'io_lib':'format'
		      ([105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[126|[112|[59|[10|[99|[114|[97|[115|[104|[32|[114|[101|[97|[115|[111|[110|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Pass|[_6|[]]])
	  %% Line 281
	  <{'bad_return',Pass,Reason}> when 'true' ->
	      let <_7> =
		  apply %% Line 282
			'format_error_reason'/1
		      (%% Line 282
		       Reason)
	      in  %% Line 282
		  call 'io_lib':'format'
		      ([105|[110|[116|[101|[114|[110|[97|[108|[32|[101|[114|[114|[111|[114|[32|[105|[110|[32|[126|[112|[59|[10|[98|[97|[100|[32|[114|[101|[116|[117|[114|[110|[32|[118|[97|[108|[117|[101|[58|[32|[126|[116|[115]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Pass|[_7|[]]])
	  %% Line 283
	  <{'module_name',Mod,Filename}> when 'true' ->
	      %% Line 284
	      call 'io_lib':'format'
		  ([77|[111|[100|[117|[108|[101|[32|[110|[97|[109|[101|[32|[39|[126|[115|[39|[32|[100|[111|[101|[115|[32|[110|[111|[116|[32|[109|[97|[116|[99|[104|[32|[102|[105|[108|[101|[32|[110|[97|[109|[101|[32|[39|[126|[116|[115|[39]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Mod|[Filename|[]]])
	  %% Line 285
	  <'reparsing_invalid_unicode'> when 'true' ->
	      %% Line 286
	      [78|[111|[110|[45|[85|[84|[70|[45|[56|[32|[99|[104|[97|[114|[97|[99|[116|[101|[114|[40|[115|[41|[32|[100|[101|[116|[101|[99|[116|[101|[100|[44|[32|[98|[117|[116|[32|[110|[111|[32|[101|[110|[99|[111|[100|[105|[110|[103|[32|[100|[101|[99|[108|[97|[114|[101|[100|[46|[32|[69|[110|[99|[111|[100|[101|[32|[116|[104|[101|[32|[102|[105|[108|[101|[32|[105|[110|[32|[85|[84|[70|[45|[56|[32|[111|[114|[32|[97|[100|[100|[32|[34|[37|[37|[32|[99|[111|[100|[105|[110|[103|[58|[32|[108|[97|[116|[105|[110|[45|[49|[34|[32|[97|[116|[32|[116|[104|[101|[32|[98|[101|[103|[105|[110|[110|[105|[110|[103|[32|[111|[102|[32|[116|[104|[101|[32|[102|[105|[108|[101|[46|[32|[82|[101|[116|[114|[121|[105|[110|[103|[32|[119|[105|[116|[104|[32|[108|[97|[116|[105|[110|[45|[49|[32|[101|[110|[99|[111|[100|[105|[110|[103|[46]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'format_error',1}}] )
	    -| ['compiler_generated'] )
	end
'format_error_reason'/1 =
    %% Line 288
    fun (_0) ->
	case _0 of
	  <{Reason,Stack}>
	      when call 'erlang':'is_list'
		    (Stack) ->
	      let <StackFun> =
		  fun (_3,_2,_1) ->
		      %% Line 289
		      case <_3,_2,_1> of
			%% Line 290
			<'escript','run',2> when 'true' ->
			    'true'
			%% Line 291
			<'escript','start',1> when 'true' ->
			    'true'
			%% Line 292
			<'init','start_it',1> when 'true' ->
			    'true'
			%% Line 293
			<'init','start_em',1> when 'true' ->
			    'true'
			%% Line 294
			<_X_Mod,_X_Fun,_X_Arity> when 'true' ->
			    'false'
		      end
	      in  let <FormatFun> =
		      fun (_9,_8) ->
			  %% Line 296
			  call 'io_lib':'format'
			      ([126|[116|[112]]], [_9|[]])
		  in  let <_13> =
			  call %% Line 297
			       'io_lib':%% Line 297
					'format'
			      (%% Line 297
			       [126|[116|[112]]], %% Line 297
						  [Reason|[]])
		      in  let <_14> =
			      call %% Line 298
				   'erl_error':%% Line 298
					       'format_stacktrace'
				  (%% Line 298
				   1, %% Line 298
				      Stack, %% Line 298
					     StackFun, %% Line 298
						       FormatFun)
			  in  %% Line 297
			      [_13|[[10|[10]]|%% Line 298
					      [_14|[]]]]
	  %% Line 299
	  <Reason> when 'true' ->
	      %% Line 300
	      call 'io_lib':'format'
		  ([126|[116|[112]]], [Reason|[]])
	end
'internal'/2 =
    %% Line 320
    fun (_1,_0) ->
	case <_1,_0> of
	  <{'forms',Forms},Opts0> when 'true' ->
	      %% Line 321
	      case apply 'passes'/2
		       ('forms', Opts0) of
		<{_10,Ps}> when 'true' ->
		    let <Source> =
			call %% Line 322
			     'proplists':%% Line 322
					 'get_value'
			    (%% Line 322
			     'source', %% Line 322
				       Opts0, %% Line 322
					      [])
		    in  let <Opts1> =
			    call %% Line 323
				 'proplists':%% Line 323
					     'delete'
				(%% Line 323
				 'source', %% Line 323
					   Opts0)
			in  let <Compile> =
				apply %% Line 324
				      'build_compile'/1
				    (%% Line 324
				     Opts1)
			    in  %% Line 325
				apply 'internal_comp'/5
				    (Ps, Forms, Source, [], Compile)
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  %% Line 326
	  <{'file',File},Opts> when 'true' ->
	      %% Line 327
	      case apply 'passes'/2
		       ('file', Opts) of
		<{Ext,Ps}> when 'true' ->
		    let <Compile> =
			apply %% Line 328
			      'build_compile'/1
			    (%% Line 328
			     Opts)
		    in  %% Line 329
			apply 'internal_comp'/5
			    (Ps, 'none', File, Ext, Compile)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_6})
		  -| ['compiler_generated'] )
	      end
	  ( <_9,_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_9,_8})
		  -| [{'function_name',{'internal',2}}] )
	    -| ['compiler_generated'] )
	end
'build_compile'/1 =
    %% Line 331
    fun (_0) ->
	let <ExtraChunks> =
	    call %% Line 332
		 'proplists':%% Line 332
			     'get_value'
		(%% Line 332
		 'extra_chunks', _0, %% Line 332
				     [])
	in  let <Opts1> =
		call %% Line 333
		     'proplists':%% Line 333
				 'delete'
		    (%% Line 333
		     'extra_chunks', _0)
	    in  %% Line 334
		{'compile',[],[],[],[],[],[],[],[],Opts1,Opts1,'none',[],[],ExtraChunks}
'internal_comp'/5 =
    %% Line 336
    fun (_4,_3,_2,_1,_0) ->
	let <Dir> =
	    call %% Line 337
		 'filename':%% Line 337
			    'dirname'
		(_2)
	in  let <Base> =
		call %% Line 338
		     'filename':%% Line 338
				'basename'
		    (_2, _1)
	    in  let <_rec0> =
		    apply %% Line 340
			  'erlfile'/3
			(%% Line 340
			 Dir, %% Line 340
			      Base, _1)
		in  let <_rec1> =
			apply %% Line 341
			      'objfile'/2
			    (%% Line 341
			     Base, _0)
		    in  %% Line 339
			case _0 of
			  <{'compile',_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}> when 'true' ->
			      let <_10> =
				  call %% Line 341
				       'erlang':%% Line 341
						'setelement'
				      (%% Line 341
				       6, _0, %% Line 341
					      _rec1)
			      in  let <_11> =
				      call %% Line 340
					   'erlang':%% Line 340
						    'setelement'
					  (%% Line 340
					   5, _10, %% Line 340
						   _rec0)
				  in  let <_12> =
					  call 'erlang':'setelement'
					      (4, _11, Base)
				      in  let <_13> =
					      call 'erlang':'setelement'
						  (3, _12, Dir)
					  in  let <_15> =
						  call 'erlang':'setelement'
						      (2, _13, _2)
					      in  %% Line 342
						  ( case _15 of
						      ( <( {'compile',_59,_60,_61,_62,_63,_64,_65,_66,_rec3,_67,_68,_69,_70,_71}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_27> =
								case %% Line 343
								     call 'lists':'member'
									 ('time', _rec3) of
								  %% Line 344
								  <'true'> when 'true' ->
								      do  %% Line 345
									  call 'io':'format'
									      ([67|[111|[109|[112|[105|[108|[105|[110|[103|[32|[126|[116|[112|[10]]]]]]]]]]]]]], [_2|[]])
									  %% Line 346
									  ( 'run_tc'/3
									    -| [{'id',{0,0,'-internal_comp/5-fun-0-'}}] )
								  %% Line 347
								  <'false'> when 'true' ->
								      %% Line 348
								      ( fun (_22,_21,_20) ->
									    case <_22,_21,_20> of
									      <{_X_Name,Fun},Code,St> when 'true' ->
										  catch
										      %% Line 349
										      apply Fun
											  (Code, St)
									      ( <_25,_24,_23> when 'true' ->
										    ( primop 'match_fail'
											  ({'function_clause',_25,_24,_23})
										      -| [{'function_name',{'-internal_comp/5-fun-1-',3}}] )
										-| ['compiler_generated'] )
									    end
									-| [{'id',{0,0,'-internal_comp/5-fun-1-'}}] )
								  ( <_26> when 'true' ->
									%% Line 343
									primop 'match_fail'
									    ({'case_clause',_26})
								    -| ['compiler_generated'] )
								end
							    in  let <_36> =
								    case %% Line 352
									 call 'lists':'keyfind'
									     ('eprof', 1, _rec3) of
								      %% Line 353
								      <{'eprof',EprofPass}> when 'true' ->
									  %% Line 354
									  ( fun (_31,_30,_29) ->
										%% Line 355
										apply 'run_eprof'/4
										    (_31, _30, EprofPass, _29)
									    -| [{'id',{0,0,'-internal_comp/5-fun-2-'}}] )
								      %% Line 357
								      <'false'> when 'true' ->
									  _27
								      ( <_35> when 'true' ->
									    %% Line 352
									    primop 'match_fail'
										({'case_clause',_35})
									-| ['compiler_generated'] )
								    end
								in  %% Line 360
								    case apply 'fold_comp'/4
									     (_4, _36, _3, _15) of
								      %% Line 361
								      <{'ok',Code,St2}> when 'true' ->
									  apply 'comp_ret_ok'/2
									      (Code, St2)
								      %% Line 362
								      <{'error',St2}> when 'true' ->
									  apply 'comp_ret_err'/1
									      (St2)
								      ( <_38> when 'true' ->
									    primop 'match_fail'
										({'case_clause',_38})
									-| ['compiler_generated'] )
								    end
							-| ['compiler_generated'] )
						      ( <_72> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','compile'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
			  ( <_58> when 'true' ->
				( call ( 'erlang'
					 -| ['compiler_generated'] ):( 'error'
								       -| ['compiler_generated'] )
				      (( {'badrecord','compile'}
					 -| ['compiler_generated'] ))
				  -| ['compiler_generated'] )
			    -| ['compiler_generated'] )
			end
'fold_comp'/4 =
    %% Line 365
    fun (_3,_2,_1,_0) ->
	case <_3,_2,_1,_0> of
	  <[{'delay',Ps0}|Passes],Run,Code,St = {'compile',_30,_31,_32,_33,_34,_35,_36,_37,Opts,_38,_39,_40,_41,_42}> when 'true' ->
	      let <_4> =
		  apply %% Line 366
			'select_passes'/2
		      (%% Line 366
		       Ps0, %% Line 366
			    Opts)
	      in  let <Ps> =
		      call %% Line 366
			   'erlang':%% Line 366
				    '++'
			  (_4, %% Line 366
			       Passes)
		  in  %% Line 367
		      apply 'fold_comp'/4
			  (Ps, Run, Code, St)
	  %% Line 368
	  <[{Name,Test,Pass}|Ps],Run,Code,St> when 'true' ->
	      %% Line 369
	      case apply Test
		       (St) of
		%% Line 370
		<'false'> when 'true' ->
		    %% Line 371
		    apply 'fold_comp'/4
			(Ps, Run, Code, St)
		%% Line 372
		<'true'> when 'true' ->
		    %% Line 373
		    apply 'fold_comp'/4
			([{Name,Pass}|Ps], Run, Code, St)
		( <_6> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_6})
		  -| ['compiler_generated'] )
	      end
	  %% Line 375
	  <[_@r0 = {Name,Pass}|Ps],Run,Code0,St0> when 'true' ->
	      %% Line 376
	      case apply Run
		       (_@r0, Code0, St0) of
		%% Line 377
		<{'ok',Code,St1}> when 'true' ->
		    %% Line 378
		    apply 'fold_comp'/4
			(Ps, Run, Code, St1)
		%% Line 379
		<Error = {'error',_X_St1}> when 'true' ->
		    %% Line 380
		    Error
		%% Line 381
		<{'EXIT',Reason}> when 'true' ->
		    %% Line 382
		    ( case St0 of
			( <( {'compile',_43,_44,_45,_rec4,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Es> =
				  [{_rec4,[{'none','compile',{'crash',Name,Reason}}|[]]}|[]]
			      in  let <_rec5> =
				      call %% Line 383
					   'erlang':%% Line 383
						    '++'
					  (_53, %% Line 383
						Es)
				  in  let <_15> =
					  call %% Line 383
					       'erlang':%% Line 383
							'setelement'
					      (%% Line 383
					       13, %% Line 383
						   St0, %% Line 383
							_rec5)
				      in  %% Line 383
					  {'error',_15}
			  -| ['compiler_generated'] )
			( <_56> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','compile'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 384
		<Other> when 'true' ->
		    %% Line 385
		    ( case St0 of
			( <( {'compile',_86,_87,_88,_rec8,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Es> =
				  [{_rec8,[{'none','compile',{'bad_return',Name,Other}}|[]]}|[]]
			      in  let <_rec9> =
				      call %% Line 386
					   'erlang':%% Line 386
						    '++'
					  (_96, %% Line 386
						Es)
				  in  let <_24> =
					  call %% Line 386
					       'erlang':%% Line 386
							'setelement'
					      (%% Line 386
					       13, %% Line 386
						   St0, %% Line 386
							_rec9)
				      in  %% Line 386
					  {'error',_24}
			  -| ['compiler_generated'] )
			( <_99> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','compile'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
	      end
	  %% Line 388
	  <[],_X_Run,Code,St> when 'true' ->
	      {'ok',Code,St}
	  ( <_29,_28,_27,_26> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_29,_28,_27,_26})
		  -| [{'function_name',{'fold_comp',4}}] )
	    -| ['compiler_generated'] )
	end
'run_tc'/3 =
    %% Line 390
    fun (_2,_1,_0) ->
	case <_2,_1,_0> of
	  <{Name,Fun},Code,St> when 'true' ->
	      let <T1> =
		  call %% Line 391
		       'erlang':%% Line 391
				'monotonic_time'
		      ()
	      in  let <_4> =
		      catch
			  %% Line 392
			  apply Fun
			      (Code, St)
		  in  let <T2> =
			  call %% Line 393
			       'erlang':%% Line 393
					'monotonic_time'
			      ()
		      in  let <_7> =
			      call %% Line 394
				   'erlang':%% Line 394
					    '-'
				  (%% Line 394
				   T2, %% Line 394
				       T1)
			  in  let <Elapsed> =
				  call %% Line 394
				       'erlang':%% Line 394
						'convert_time_unit'
				      (_7, %% Line 394
					   'native', %% Line 394
						     'millisecond')
			      in  let <_10> =
				      call %% Line 395
					   'erts_debug':%% Line 395
							'flat_size'
					  (_4)
				  in  let <_9> =
					  call %% Line 395
					       'erlang':%% Line 395
							'system_info'
					      (%% Line 395
					       'wordsize')
				      in  let <Mem0> =
					      call %% Line 395
						   'erlang':%% Line 395
							    '*'
						  (_10, _9)
					  in  let <_12> =
						  call %% Line 396
						       'erlang':%% Line 396
								'/'
						      (%% Line 396
						       Mem0, %% Line 396
							     1024)
					      in  let <_13> =
						      call %% Line 396
							   'io_lib':%% Line 396
								    'format'
							  (%% Line 396
							   [126|[46|[49|[102|[32|[107|[66]]]]]]], %% Line 396
												  [_12|[]])
						  in  let <Mem> =
							  call %% Line 396
							       'lists':%% Line 396
								       'flatten'
							      (_13)
						      in  let <_15> =
							      call %% Line 398
								   'erlang':%% Line 398
									    '/'
								  (%% Line 398
								   Elapsed, %% Line 398
									    1000)
							  in  do  %% Line 397
								  call 'io':'format'
								      ([32|[126|[45|[51|[48|[115|[58|[32|[126|[49|[48|[46|[51|[102|[32|[115|[32|[126|[49|[50|[115|[10]]]]]]]]]]]]]]]]]]]]]], %% Line 398
																							     [Name|[_15|[Mem|[]]]])
								  _4
	  ( <_18,_17,_16> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_18,_17,_16})
		  -| [{'function_name',{'run_tc',3}}] )
	    -| ['compiler_generated'] )
	end
'run_eprof'/4 =
    %% Line 401
    fun (_3,_2,_1,_0) ->
	case <_3,_2,_1,_0> of
	  <{Name,Fun},Code,_11,St>
	      when call 'erlang':'=:='
		    (_11,
		     Name) ->
	      do  %% Line 402
		  call 'io':'format'
		      ([126|[112|[58|[32|[82|[117|[110|[110|[105|[110|[103|[32|[101|[112|[114|[111|[102|[10]]]]]]]]]]]]]]]]]], [Name|[]])
		  let <_4> =
		      call %% Line 403
			   'erlang':%% Line 403
				    'self'
			  ()
		  in  do  %% Line 403
			  call 'c':'appcall'
			      ('tools', 'eprof', 'start_profiling', [[_4|[]]|[]])
			  let <_5> =
			      catch
				  %% Line 404
				  apply Fun
				      (Code, St)
			  in  do  %% Line 405
				  call 'c':'appcall'
				      ('tools', 'eprof', 'stop_profiling', [])
				  do  %% Line 406
				      call 'c':'appcall'
					  ('tools', 'eprof', 'analyze', [])
				      _5
	  %% Line 408
	  <{_12,Fun},Code,_13,St> when 'true' ->
	      catch
		  %% Line 409
		  apply Fun
		      (Code, St)
	  ( <_10,_9,_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9,_8,_7})
		  -| [{'function_name',{'run_eprof',4}}] )
	    -| ['compiler_generated'] )
	end
'comp_ret_ok'/2 =
    %% Line 411
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code,St = {'compile',_20,_21,_22,_23,_24,Mod,_25,_26,Opts,_27,_28,_29,Warn0,_30}> when 'true' ->
	      %% Line 412
	      case apply 'werror'/1
		       (St) of
		%% Line 413
		<'true'> when 'true' ->
		    do  %% Line 414
			case call 'lists':'member'
				 ('report_warnings', Opts) of
			  %% Line 415
			  <'true'> when 'true' ->
			      %% Line 416
			      call 'io':'format'
				  ([126|[112|[58|[32|[119|[97|[114|[110|[105|[110|[103|[115|[32|[98|[101|[105|[110|[103|[32|[116|[114|[101|[97|[116|[101|[100|[32|[97|[115|[32|[101|[114|[114|[111|[114|[115|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], %% Line 417
																														       ['compile'])
			  %% Line 418
			  <'false'> when 'true' ->
			      'ok'
			  ( <_2> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_2})
			    -| ['compiler_generated'] )
			end
			%% Line 421
			apply 'comp_ret_err'/1
			    (St)
		%% Line 422
		<'false'> when 'true' ->
		    let <Warn> =
			apply %% Line 423
			      'messages_per_file'/1
			    (%% Line 423
			     Warn0)
		    in  let <_6> =
			    call %% Line 424
				 'erlang':%% Line 424
					  'setelement'
				(%% Line 424
				 14, %% Line 424
				     St, %% Line 424
					 Warn)
			in  do  %% Line 424
				apply 'report_warnings'/1
				    (_6)
				let <_10> =
				    case %% Line 425
					 call 'lists':'member'
					     ('binary', Opts) of
				      %% Line 425
				      ( <( 'true'
					   -| ['compiler_generated'] )> when 'true' ->
					    let <_8> =
						call %% Line 426
						     'lists':%% Line 426
							     'member'
						    (%% Line 426
						     'no_code_generation', %% Line 426
									   Opts)
					    in  %% Line 426
						call 'erlang':'not'
						    (_8)
					-| ['compiler_generated'] )
				      %% Line 425
				      ( <( 'false'
					   -| ['compiler_generated'] )> when 'true' ->
					    'false'
					-| ['compiler_generated'] )
				      %% Line 425
				      ( <_7> when 'true' ->
					    ( call ( 'erlang'
						     -| ['compiler_generated'] ):( 'error'
										   -| ['compiler_generated'] )
						  (( {( 'badarg'
							-| ['compiler_generated'] ),_7}
						     -| ['compiler_generated'] ))
					      -| ['compiler_generated'] )
					-| ['compiler_generated'] )
				    end
				in  let <_12> =
					case _10 of
					  %% Line 427
					  <'true'> when 'true' ->
					      [Code|[]]
					  %% Line 428
					  <'false'> when 'true' ->
					      []
					  ( <_11> when 'true' ->
						%% Line 425
						primop 'match_fail'
						    ({'case_clause',_11})
					    -| ['compiler_generated'] )
					end
				    in  let <_15> =
					    case %% Line 430
						 call 'lists':'member'
						     ('return_warnings', Opts) of
					      %% Line 431
					      <'true'> when 'true' ->
						  call 'erlang':'++'
						      (_12, [Warn|[]])
					      %% Line 432
					      <'false'> when 'true' ->
						  _12
					      ( <_14> when 'true' ->
						    %% Line 430
						    primop 'match_fail'
							({'case_clause',_14})
						-| ['compiler_generated'] )
					    end
					in  %% Line 434
					    call 'erlang':'list_to_tuple'
						(['ok'|[Mod|_15]])
		( <_17> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_17})
		  -| ['compiler_generated'] )
	      end
	  ( <_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18})
		  -| [{'function_name',{'comp_ret_ok',2}}] )
	    -| ['compiler_generated'] )
	end
'comp_ret_err'/1 =
    %% Line 437
    fun (_0) ->
	case _0 of
	  <St = {'compile',_11,_12,_13,_14,_15,_16,_17,_18,Opts,_19,_20,Err0,Warn0,_21}> when 'true' ->
	      let <Warn> =
		  apply %% Line 438
			'messages_per_file'/1
		      (%% Line 438
		       Warn0)
	      in  let <Err> =
		      apply %% Line 439
			    'messages_per_file'/1
			  (%% Line 439
			   Err0)
		  in  let <_5> =
			  call %% Line 440
			       'erlang':%% Line 440
					'setelement'
			      (%% Line 440
			       13, %% Line 440
				   St, %% Line 440
				       Err)
		      in  do  %% Line 440
			      apply 'report_errors'/1
				  (_5)
			      let <_8> =
				  call %% Line 441
				       'erlang':%% Line 441
						'setelement'
				      (%% Line 441
				       14, %% Line 441
					   St, %% Line 441
					       Warn)
			      in  do  %% Line 441
				      apply 'report_warnings'/1
					  (_8)
				      %% Line 442
				      case call 'lists':'member'
					       ('return_errors', Opts) of
					%% Line 443
					<'true'> when 'true' ->
					    {'error',Err,Warn}
					%% Line 444
					<'false'> when 'true' ->
					    'error'
					( <_9> when 'true' ->
					      primop 'match_fail'
						  ({'case_clause',_9})
					  -| ['compiler_generated'] )
				      end
	  ( <_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10})
		  -| [{'function_name',{'comp_ret_err',1}}] )
	    -| ['compiler_generated'] )
	end
'not_werror'/1 =
    %% Line 447
    fun (_0) ->
	let <_1> =
	    apply 'werror'/1
		(_0)
	in  call 'erlang':'not'
		(_1)
'werror'/1 =
    %% Line 449
    fun (_0) ->
	case _0 of
	  <{'compile',_4,_5,_6,_7,_8,_9,_10,_11,Opts,_12,_13,_14,Ws,_15}> when 'true' ->
	      %% Line 450
	      ( case <> of
		  ( <>
			when call 'erlang':'=/='
			      (Ws,
			       []) ->
			call 'lists':'member'
			    ('warnings_as_errors', Opts)
		    -| ['compiler_generated'] )
		  ( <> when 'true' ->
			'false'
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'werror',1}}] )
	    -| ['compiler_generated'] )
	end
'messages_per_file'/1 =
    %% Line 453
    fun (_0) ->
	let <_8> =
	    letrec
		'lc$^0'/1 =
		    %% Line 454
		    fun (_5) ->
			case _5 of
			  <[{File,Messages}|_2]> when 'true' ->
			      ( letrec
				    'lc$^1'/1 =
					fun (_6) ->
					    case _6 of
					      <[M|_4]> when 'true' ->
						  let <_7> =
						      apply 'lc$^1'/1
							  (_4)
						  in  ( [{File,M}|_7]
							-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  apply 'lc$^0'/1
						      (_2)
					      ( <_38> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_38})
						      -| [{'function_name',{'lc$^1',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^1'/1
					(Messages)
				-| ['list_comprehension'] )
			  ( <[_1|_2]> when 'true' ->
				apply 'lc$^0'/1
				    (_2)
			    -| ['compiler_generated'] )
			  <[]> when 'true' ->
			      []
			  ( <_39> when 'true' ->
				( primop 'match_fail'
				      ({'function_clause',_39})
				  -| [{'function_name',{'lc$^0',1}}] )
			    -| ['compiler_generated'] )
			end
	    in  %% Line 454
		apply 'lc$^0'/1
		    (_0)
	in  let <T> =
		call %% Line 454
		     'lists':%% Line 454
			     'sort'
		    (_8)
	    in  let <_18> =
		    fun (_15,_14) ->
			let <_13> =
			    fun (_11) ->
				%% Line 458
				case _11 of
				  <{_28,{_29,Mod,_30}}> when 'true' ->
				      call 'erlang':'=:='
					  (Mod, _15)
				  %% Line 459
				  <_31> when 'true' ->
				      'false'
				end
			in  %% Line 458
			    call 'lists':'partition'
				(_13, _14)
		in  %% Line 456
		    case %% Line 457
			 call 'lists':'mapfoldl'
			     (_18, %% Line 461
				   T, ['erl_scan'|['epp'|['erl_parse']]]) of
		      <{Prio0,Rest}> when 'true' ->
			  let <_25> =
			      fun (_22,_21) ->
				  %% Line 462
				  case <_22,_21> of
				    <{_32,{L1,_33,_34}},{_35,{L2,_36,_37}}> when 'true' ->
					call 'erlang':'=<'
					    (L1, L2)
				    ( <_24,_23> when 'true' ->
					  ( primop 'match_fail'
						({'function_clause',_24,_23})
					    -| [{'function_name',{'-messages_per_file/1-fun-4-',2}}] )
				      -| ['compiler_generated'] )
				  end
			  in  let <_20> =
				  call %% Line 463
				       'lists':%% Line 463
					       'append'
				      (%% Line 463
				       Prio0)
			      in  let <Prio> =
				      call %% Line 462
					   'lists':%% Line 462
						   'sort'
					  (_25, _20)
				  in  %% Line 464
				      call 'lists':'flatmap'
					  (( 'mpf'/1
					     -| [{'id',{0,0,'-messages_per_file/1-fun-5-'}}] ), [Prio|[Rest|[]]])
		      ( <_19> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_19})
			-| ['compiler_generated'] )
		    end
'mpf'/1 =
    %% Line 466
    fun (_0) ->
	%% Line 468
	( letrec
	      'lc$^1'/1 =
		  fun (_9) ->
		      case _9 of
			<[File|_2]> when 'true' ->
			    let <_14> =
				letrec
				    'lc$^2'/1 =
					fun (_12) ->
					    case _12 of
					      <[{F,M}|_11]>
						  when call 'erlang':'=:='
							(F,
							 File) ->
						  let <_13> =
						      apply 'lc$^2'/1
							  (_11)
						  in  ( [M|_13]
							-| ['compiler_generated'] )
					      ( <[_10|_11]> when 'true' ->
						    apply 'lc$^2'/1
							(_11)
						-| ['compiler_generated'] )
					      <[]> when 'true' ->
						  []
					      ( <_18> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_18})
						      -| [{'function_name',{'lc$^2',1}}] )
						-| ['compiler_generated'] )
					    end
				in  apply 'lc$^2'/1
					(_0)
			    in  let <_15> =
				    apply 'lc$^1'/1
					(_2)
				in  ( [{File,_14}|_15]
				      -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_19> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_19})
				-| [{'function_name',{'lc$^1',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  let <_7> =
		  letrec
		      'lc$^0'/1 =
			  fun (_5) ->
			      case _5 of
				<[{F,_17}|_4]> when 'true' ->
				    let <_6> =
					apply 'lc$^0'/1
					    (_4)
				    in  ( [F|_6]
					  -| ['compiler_generated'] )
				( <[_3|_4]> when 'true' ->
				      apply 'lc$^0'/1
					  (_4)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    []
				( <_20> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_20})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  apply 'lc$^0'/1
			  (_0)
	      in  let <_8> =
		      call 'lists':'usort'
			  (_7)
		  in  apply 'lc$^1'/1
			  (_8)
	  -| ['list_comprehension'] )
'passes'/2 =
    %% Line 474
    fun (_1,_0) ->
	%% Line 475
	case apply 'passes_1'/1
		 (_0) of
	  <{Ext,Passes0}> when 'true' ->
	      let <_4> =
		  case _1 of
		    %% Line 477
		    <'file'> when 'true' ->
			%% Line 478
			Passes0
		    %% Line 479
		    <'forms'> when 'true' ->
			%% Line 480
			apply 'fix_first_pass'/1
			    (Passes0)
		    ( <_3> when 'true' ->
			  %% Line 476
			  primop 'match_fail'
			      ({'case_clause',_3})
		      -| ['compiler_generated'] )
		  end
	      in  let <Passes> =
		      apply %% Line 482
			    'select_passes'/2
			  (_4, _0)
		  in  let <_9> =
			  case %% Line 487
			       call 'lists':'last'
				   (Passes) of
			    %% Line 488
			    <{'save_binary',_X_TestFun,_X_Fun}> when 'true' ->
				%% Line 489
				case Passes of
				  %% Line 490
				  <[{'read_beam_file',_12}|_13]> when 'true' ->
				      %% Line 493
				      Passes
				  %% Line 494
				  <_14> when 'true' ->
				      %% Line 495
				      [{'remove_file',( 'remove_file'/2
							-| [{'id',{0,0,'-passes/2-fun-0-'}}] )}|Passes]
				end
			    %% Line 497
			    <_15> when 'true' ->
				%% Line 498
				Passes
			  end
		      in  %% Line 487
			  {Ext,_9}
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'passes_1'/1 =
    %% Line 501
    fun (_0) ->
	case _0 of
	  <[Opt|Opts]> when 'true' ->
	      %% Line 502
	      case apply 'pass'/1
		       (Opt) of
		%% Line 503
		<Res = {_4,_5}> when 'true' ->
		    Res
		%% Line 504
		<'none'> when 'true' ->
		    apply 'passes_1'/1
			(Opts)
		( <_1> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_1})
		  -| ['compiler_generated'] )
	      end
	  %% Line 506
	  <[]> when 'true' ->
	      let <_2> =
		  apply %% Line 507
			'standard_passes'/0
		      ()
	      in  %% Line 507
		  {[46|[101|[114|[108]]]],[{'parse_module',( 'parse_module'/2
							     -| [{'id',{0,0,'-passes_1/1-fun-0-'}}] )}|_2]}
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'passes_1',1}}] )
	    -| ['compiler_generated'] )
	end
'pass'/1 =
    %% Line 509
    fun (_0) ->
	case _0 of
	  <'from_core'> when 'true' ->
	      let <_1> =
		  apply %% Line 510
			'core_passes'/0
		      ()
	      in  %% Line 510
		  {[46|[99|[111|[114|[101]]]]],[{'parse_core',( 'parse_core'/2
								-| [{'id',{0,0,'-pass/1-fun-0-'}}] )}|_1]}
	  %% Line 511
	  <'from_asm'> when 'true' ->
	      let <_2> =
		  apply %% Line 512
			'asm_passes'/0
		      ()
	      in  %% Line 512
		  {[46|[83]],[{'beam_consult_asm',( 'beam_consult_asm'/2
						    -| [{'id',{0,0,'-pass/1-fun-1-'}}] )}|_2]}
	  %% Line 513
	  <'from_beam'> when 'true' ->
	      let <_3> =
		  apply %% Line 514
			'binary_passes'/0
		      ()
	      in  %% Line 514
		  {[46|[98|[101|[97|[109]]]]],[{'read_beam_file',( 'read_beam_file'/2
								   -| [{'id',{0,0,'-pass/1-fun-2-'}}] )}|_3]}
	  %% Line 515
	  <_5> when 'true' ->
	      'none'
	end
'fix_first_pass'/1 =
    %% Line 521
    fun (_0) ->
	case _0 of
	  <[{'parse_core',_2}|Passes]> when 'true' ->
	      %% Line 522
	      [{'get_module_name_from_core',( 'get_module_name_from_core'/2
					      -| [{'id',{0,0,'-fix_first_pass/1-fun-0-'}}] )}|Passes]
	  %% Line 523
	  <[{'beam_consult_asm',_3}|Passes]> when 'true' ->
	      %% Line 524
	      [{'get_module_name_from_asm',( 'get_module_name_from_asm'/2
					     -| [{'id',{0,0,'-fix_first_pass/1-fun-1-'}}] )}|Passes]
	  %% Line 525
	  <[{'read_beam_file',_4}|Passes]> when 'true' ->
	      %% Line 526
	      [{'get_module_name_from_beam',( 'get_module_name_from_beam'/2
					      -| [{'id',{0,0,'-fix_first_pass/1-fun-2-'}}] )}|Passes]
	  %% Line 527
	  <[_5|Passes]> when 'true' ->
	      %% Line 530
	      Passes
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'fix_first_pass',1}}] )
	    -| ['compiler_generated'] )
	end
'select_passes'/2 =
    %% Line 583
    fun (_1,_0) ->
	case <_1,_0> of
	  <[{'pass',Mod}|Ps],Opts> when 'true' ->
	      let <F> =
		  fun (_19,_18) ->
		      let <_4> =
			  catch
			      %% Line 585
			      ( case _18 of
				  ( <( {'compile',_45,_46,_47,_48,_49,_50,_51,_52,_rec15,_53,_54,_55,_56,_57}
				       -| ['compiler_generated'] )> when 'true' ->
					call Mod:'module'
					    (_19, _rec15)
				    -| ['compiler_generated'] )
				  ( <_58> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','compile'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      in  %% Line 585
			  case _4 of
			    %% Line 586
			    <{'ok',Code}> when 'true' ->
				%% Line 587
				{'ok',Code,_18}
			    %% Line 588
			    <{'ok',Code,Ws}> when 'true' ->
				%% Line 589
				( case _18 of
				    ( <( {'compile',_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_rec18,_71}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_rec16> =
					      call 'erlang':'++'
						  (_rec18, Ws)
					  in  let <_10> =
						  call 'erlang':'setelement'
						      (14, _18, _rec16)
					      in  {'ok',Code,_10}
				      -| ['compiler_generated'] )
				    ( <_72> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','compile'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    %% Line 590
			    <{'error',Es}> when 'true' ->
				%% Line 591
				( case _18 of
				    ( <( {'compile',_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_rec21,_99,_100}
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_rec19> =
					      call 'erlang':'++'
						  (_rec21, Es)
					  in  let <_16> =
						  call 'erlang':'setelement'
						      (13, _18, _rec19)
					      in  {'error',_16}
				      -| ['compiler_generated'] )
				    ( <_101> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {'badrecord','compile'}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
			    ( <_17> when 'true' ->
				  primop 'match_fail'
				      ({'case_clause',_17})
			      -| ['compiler_generated'] )
			  end
	      in  let <_23> =
		      apply %% Line 594
			    'select_passes'/2
			  (%% Line 594
			   Ps, %% Line 594
			       Opts)
		  in  %% Line 594
		      [{Mod,F}|_23]
	  %% Line 595
	  <[{'src_listing',Ext}|_117],_X_Opts> when 'true' ->
	      let <_28> =
		  fun (_25,_24) ->
		      %% Line 596
		      apply 'src_listing'/3
			  (Ext, _25, _24)
	      in  %% Line 596
		  [{'listing',_28}|[]]
	  %% Line 597
	  <[{'listing',Ext}|_118],_X_Opts> when 'true' ->
	      let <_33> =
		  fun (_30,_29) ->
		      %% Line 598
		      apply 'listing'/3
			  (Ext, _30, _29)
	      in  %% Line 598
		  [{'listing',_33}|[]]
	  %% Line 599
	  <['done'|_119],_X_Opts> when 'true' ->
	      %% Line 600
	      []
	  %% Line 601
	  <[{'done',Ext}|_120],Opts> when 'true' ->
	      %% Line 602
	      apply 'select_passes'/2
		  ([{'unless','binary',{'listing',Ext}}|[]], Opts)
	  %% Line 603
	  <[{'iff',Flag,Pass}|Ps],Opts> when 'true' ->
	      %% Line 604
	      apply 'select_cond'/5
		  (Flag, 'true', Pass, Ps, Opts)
	  %% Line 605
	  <[{'unless',Flag,Pass}|Ps],Opts> when 'true' ->
	      %% Line 606
	      apply 'select_cond'/5
		  (Flag, 'false', Pass, Ps, Opts)
	  %% Line 607
	  <[P = {_121,Fun}|Ps],Opts>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      let <_34> =
		  apply %% Line 608
			'select_passes'/2
		      (%% Line 608
		       Ps, %% Line 608
			   Opts)
	      in  %% Line 608
		  [P|_34]
	  %% Line 609
	  <[{'delay',Passes0}|Ps],Opts>
	      when call 'erlang':'is_list'
		    (Passes0) ->
	      %% Line 614
	      case apply 'select_list_passes'/2
		       (Passes0, Opts) of
		%% Line 615
		<{'done',Passes}> when 'true' ->
		    %% Line 616
		    [{'delay',Passes}|[]]
		%% Line 617
		<{'not_done',Passes}> when 'true' ->
		    let <_35> =
			apply %% Line 618
			      'select_passes'/2
			    (%% Line 618
			     Ps, %% Line 618
				 Opts)
		    in  %% Line 618
			[{'delay',Passes}|_35]
		( <_36> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_36})
		  -| ['compiler_generated'] )
	      end
	  %% Line 620
	  <[P = {_122,Test,Fun}|Ps],Opts>
	      when try
		    let <_37> =
			call 'erlang':'is_function'
			    (Test)
		    in  let <_38> =
			    call %% Line 621
				 'erlang':%% Line 621
					  'is_function'
				(%% Line 621
				 Fun)
			in  call 'erlang':'and'
				(_37, _38)
		of <Try> ->
		    Try
		catch <T,R> ->
		    'false' ->
	      let <_39> =
		  apply %% Line 622
			'select_passes'/2
		      (%% Line 622
		       Ps, %% Line 622
			   Opts)
	      in  %% Line 622
		  [P|_39]
	  %% Line 623
	  <[],_X_Opts> when 'true' ->
	      %% Line 624
	      []
	  %% Line 625
	  <[List|Ps],Opts>
	      when call 'erlang':'is_list'
		    (List) ->
	      %% Line 626
	      case apply 'select_passes'/2
		       (List, Opts) of
		%% Line 627
		<[]> when 'true' ->
		    apply 'select_passes'/2
			(Ps, Opts)
		%% Line 628
		<Nested> when 'true' ->
		    %% Line 629
		    case call 'lists':'last'
			     (Nested) of
		      %% Line 630
		      <{'listing',_X_Fun}> when 'true' ->
			  Nested
		      %% Line 631
		      <_X_Other> when 'true' ->
			  let <_40> =
			      apply 'select_passes'/2
				  (Ps, Opts)
			  in  call 'erlang':'++'
				  (Nested, _40)
		    end
	      end
	  ( <_44,_43> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_44,_43})
		  -| [{'function_name',{'select_passes',2}}] )
	    -| ['compiler_generated'] )
	end
'select_cond'/5 =
    %% Line 635
    fun (_4,_3,_2,_1,_0) ->
	let <ShouldNotBe> =
	    call %% Line 636
		 'erlang':%% Line 636
			  'not'
		(_3)
	in  %% Line 637
	    case call 'lists':'member'
		     (_4, _0) of
	      %% Line 638
	      <_12>
		  when call 'erlang':'=:='
			(_12,
			 _3) ->
		  apply 'select_passes'/2
		      ([_2|_1], _0)
	      %% Line 639
	      <_13>
		  when call 'erlang':'=:='
			(_13,
			 ShouldNotBe) ->
		  apply 'select_passes'/2
		      (_1, _0)
	      ( <_6> when 'true' ->
		    primop 'match_fail'
			({'case_clause',_6})
		-| ['compiler_generated'] )
	    end
'select_list_passes'/2 =
    %% Line 646
    fun (_1,_0) ->
	%% Line 647
	apply 'select_list_passes_1'/3
	    (_1, _0, [])
'select_list_passes_1'/3 =
    %% Line 649
    fun (_2,_1,_0) ->
	case <_2,_1,_0> of
	  <[{'iff',Flag,Listing = {'listing',_18}}|Ps],Opts,Acc> when 'true' ->
	      %% Line 650
	      case call 'lists':'member'
		       (Flag, Opts) of
		%% Line 651
		<'true'> when 'true' ->
		    let <_3> =
			call 'lists':'reverse'
			    (Acc, [Listing|[]])
		    in  {'done',_3}
		%% Line 652
		<'false'> when 'true' ->
		    apply 'select_list_passes_1'/3
			(Ps, Opts, Acc)
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  %% Line 654
	  <[{'iff',Flag,{'done',Ext}}|Ps],Opts,Acc> when 'true' ->
	      %% Line 655
	      case call 'lists':'member'
		       (Flag, Opts) of
		%% Line 656
		<'false'> when 'true' ->
		    %% Line 657
		    apply 'select_list_passes_1'/3
			(Ps, Opts, Acc)
		%% Line 658
		<'true'> when 'true' ->
		    let <_6> =
			case %% Line 659
			     call 'lists':'member'
				 ('binary', Opts) of
			  %% Line 660
			  <'false'> when 'true' ->
			      call 'lists':'reverse'
				  (Acc, [{'listing',Ext}|[]])
			  %% Line 661
			  <'true'> when 'true' ->
			      call 'lists':'reverse'
				  (Acc)
			  ( <_5> when 'true' ->
				%% Line 659
				primop 'match_fail'
				    ({'case_clause',_5})
			    -| ['compiler_generated'] )
			end
		    in  %% Line 659
			{'done',_6}
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 664
	  <[{Op = 'iff',Flag,List0}|Ps],Opts,Acc>
	      when call 'erlang':'is_list'
		    (List0) ->
	      %% Line 665
	      case apply 'select_list_passes'/2
		       (List0, Opts) of
		%% Line 666
		<{'done',List}> when 'true' ->
		    let <_8> =
			call 'lists':'reverse'
			    (Acc)
		    in  let <_9> =
			    call 'erlang':'++'
				(_8, List)
			in  {'done',_9}
		%% Line 667
		<{'not_done',List}> when 'true' ->
		    apply 'select_list_passes_1'/3
			(Ps, Opts, [{Op,Flag,List}|Acc])
		( <_10> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_10})
		  -| ['compiler_generated'] )
	      end
	  %% Line 669
	  <[{Op = 'unless',Flag,List0}|Ps],Opts,Acc>
	      when call 'erlang':'is_list'
		    (List0) ->
	      %% Line 670
	      case apply 'select_list_passes'/2
		       (List0, Opts) of
		%% Line 671
		<{'done',List}> when 'true' ->
		    let <_11> =
			call 'lists':'reverse'
			    (Acc)
		    in  let <_12> =
			    call 'erlang':'++'
				(_11, List)
			in  {'done',_12}
		%% Line 672
		<{'not_done',List}> when 'true' ->
		    apply 'select_list_passes_1'/3
			(Ps, Opts, [{Op,Flag,List}|Acc])
		( <_13> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_13})
		  -| ['compiler_generated'] )
	      end
	  %% Line 674
	  <[P|Ps],Opts,Acc> when 'true' ->
	      %% Line 675
	      apply 'select_list_passes_1'/3
		  (Ps, Opts, [P|Acc])
	  %% Line 676
	  <[],_19,Acc> when 'true' ->
	      let <_14> =
		  call %% Line 677
		       'lists':%% Line 677
			       'reverse'
		      (%% Line 677
		       Acc)
	      in  %% Line 677
		  {'not_done',_14}
	  ( <_17,_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_17,_16,_15})
		  -| [{'function_name',{'select_list_passes_1',3}}] )
	    -| ['compiler_generated'] )
	end
'standard_passes'/0 =
    %% Line 681
    fun () ->
	let <_0> =
	    apply %% Line 708
		  'core_passes'/0
		()
	in  %% Line 682
	    [{'transform_module',( 'transform_module'/2
				   -| [{'id',{0,0,'-standard_passes/0-fun-0-'}}] )}|%% Line 684
										    [{'iff','makedep_side_effect',{'makedep_and_output',( 'makedep_and_output'/2
																	  -| [{'id',{0,0,'-standard_passes/0-fun-1-'}}] )}}|%% Line 685
																							    [{'iff','makedep',[%% Line 686
																									       {'makedep',( 'makedep'/2
																											    -| [{'id',{0,0,'-standard_passes/0-fun-2-'}}] )}|%% Line 687
																																	     [{'unless','binary',{'makedep_output',( 'makedep_output'/2
																																						     -| [{'id',{0,0,'-standard_passes/0-fun-3-'}}] )}}|%% Line 688
																																												       []]]}|%% Line 689
																																													     [{'iff','makedep','done'}|%% Line 691
																																																       [{'iff','dpp',{'listing',[112|[112]]}}|%% Line 692
																																																					      [{'lint_module',( 'lint_module'/2
																																																								-| [{'id',{0,0,'-standard_passes/0-fun-4-'}}] )}|%% Line 693
																																																														 [{'iff','P',{'src_listing',[80]}}|%% Line 694
																																																																		   [{'iff','to_pp',{'done',[80]}}|%% Line 696
																																																																						  [{'iff','dabstr',{'listing',[97|[98|[115|[116|[114]]]]]}}|%% Line 697
																																																																													    [{'iff','debug_info',{'save_abstract_code',( 'save_abstract_code'/2
																																																																																			 -| [{'id',{0,0,'-standard_passes/0-fun-5-'}}] )}}|%% Line 699
																																																																																									   [{'expand_records',( 'expand_records'/2
																																																																																												-| [{'id',{0,0,'-standard_passes/0-fun-6-'}}] )}|%% Line 700
																																																																																																		 [{'iff','dexp',{'listing',[101|[120|[112|[97|[110|[100]]]]]]}}|%% Line 701
																																																																																																										[{'iff','E',{'src_listing',[69]}}|%% Line 702
																																																																																																														  [{'iff','to_exp',{'done',[69]}}|%% Line 705
																																																																																																																		  [{'core',( 'core'/2
																																																																																																																			     -| [{'id',{0,0,'-standard_passes/0-fun-7-'}}] )}|%% Line 706
																																																																																																																									      [{'iff','dcore',{'listing',[99|[111|[114|[101]]]]}}|%% Line 707
																																																																																																																																  [{'iff','to_core0',{'done',[99|[111|[114|[101]]]]}}|_0]]]]]]]]]]]]]]]]]
'core_passes'/0 =
    %% Line 710
    fun () ->
	let <_0> =
	    apply %% Line 728
		  'kernel_passes'/0
		()
	in  %% Line 712
	    [{'iff','clint0',{'core_lint_module',( 'core_lint_module'/2
						   -| [{'id',{0,0,'-core_passes/0-fun-0-'}}] )}}|%% Line 713
												 [{'delay',%% Line 714
													   [{'unless','no_copt',%% Line 715
																[{'core_old_inliner',( 'test_old_inliner'/1
																		       -| [{'id',{0,0,'-core_passes/0-fun-2-'}}] ),( 'core_old_inliner'/2
																								     -| [{'id',{0,0,'-core_passes/0-fun-1-'}}] )}|%% Line 716
																														  [{'iff','doldinline',{'listing',[111|[108|[100|[105|[110|[108|[105|[110|[101]]]]]]]]]}}|%% Line 717
																																									  [{'unless','no_fold',{'pass','sys_core_fold'}}|%% Line 718
																																															 [{'iff','dcorefold',{'listing',[99|[111|[114|[101|[102|[111|[108|[100]]]]]]]]}}|%% Line 719
																																																									 [{'core_inline_module',( 'test_core_inliner'/1
																																																												  -| [{'id',{0,0,'-core_passes/0-fun-4-'}}] ),( 'core_inline_module'/2
																																																																		-| [{'id',{0,0,'-core_passes/0-fun-3-'}}] )}|%% Line 720
																																																																							     [{'iff','dinline',{'listing',[105|[110|[108|[105|[110|[101]]]]]]}}|%% Line 721
																																																																																[{'core_fold_after_inlining',( 'test_any_inliner'/1
																																																																																			       -| [{'id',{0,0,'-core_passes/0-fun-6-'}}] ),%% Line 722
																																																																																									   ( 'core_fold_module_after_inlining'/2
																																																																																									     -| [{'id',{0,0,'-core_passes/0-fun-5-'}}] )}|%% Line 723
																																																																																															  [{'iff','dcopt',{'listing',[99|[111|[112|[116]]]]}}|%% Line 724
																																																																																																					      [{'unless','no_alias',{'pass','sys_core_alias'}}|%% Line 725
																																																																																																											       [{'iff','dalias',{'listing',[99|[111|[114|[101|[95|[97|[108|[105|[97|[115]]]]]]]]]]}}|%% Line 726
																																																																																																																						     [{'core_transforms',( 'core_transforms'/2
																																																																																																																									   -| [{'id',{0,0,'-core_passes/0-fun-7-'}}] )}|[]]]]]]]]]]]]}|%% Line 727
																																																																																																																																       [{'iff','to_core',{'done',[99|[111|[114|[101]]]]}}]]}|_0]]
'kernel_passes'/0 =
    %% Line 730
    fun () ->
	let <_0> =
	    apply %% Line 746
		  'asm_passes'/0
		()
	in  %% Line 732
	    [{'pass','sys_core_bsm'}|%% Line 733
				     [{'iff','dcbsm',{'listing',[99|[111|[114|[101|[95|[98|[115|[109]]]]]]]]}}|%% Line 734
													       [{'pass','sys_core_dsetel'}|%% Line 735
																	   [{'iff','dsetel',{'listing',[100|[115|[101|[116|[101|[108]]]]]]}}|%% Line 737
																									     [{'iff','clint',{'core_lint_module',( 'core_lint_module'/2
																														   -| [{'id',{0,0,'-kernel_passes/0-fun-0-'}}] )}}|%% Line 738
																																				   [{'iff','core',{'save_core_code',( 'save_core_code'/2
																																								      -| [{'id',{0,0,'-kernel_passes/0-fun-1-'}}] )}}|%% Line 741
																																														      [{'v3_kernel',( 'v3_kernel'/2
																																																      -| [{'id',{0,0,'-kernel_passes/0-fun-2-'}}] )}|%% Line 742
																																																						     [{'iff','dkern',{'listing',[107|[101|[114|[110|[101|[108]]]]]]}}|%% Line 743
																																																														      [{'iff','to_kernel',{'done',[107|[101|[114|[110|[101|[108]]]]]]}}|%% Line 744
																																																																							[{'pass','v3_codegen'}|%% Line 745
																																																																									       [{'iff','dcg',{'listing',[99|[111|[100|[101|[103|[101|[110]]]]]]]}}|_0]]]]]]]]]]]
'asm_passes'/0 =
    %% Line 748
    fun () ->
	let <_0> =
	    apply %% Line 797
		  'binary_passes'/0
		()
	in  %% Line 750
	    [{'delay',%% Line 751
		      [{'pass','beam_a'}|%% Line 752
					 [{'iff','da',{'listing',[97]}}|%% Line 753
									[{'unless','no_postopt',%% Line 754
												[{'unless','no_reorder',{'pass','beam_reorder'}}|%% Line 755
																		 [{'iff','dre',{'listing',[114|[101|[111|[114|[100|[101|[114]]]]]]]}}|%% Line 756
																										      [{'pass','beam_block'}|%% Line 757
																													     [{'iff','dblk',{'listing',[98|[108|[111|[99|[107]]]]]}}|%% Line 758
																																				     [{'unless','no_except',{'pass','beam_except'}}|%% Line 759
																																										    [{'iff','dexcept',{'listing',[101|[120|[99|[101|[112|[116]]]]]]}}|%% Line 760
																																																		      [{'unless','no_bs_opt',{'pass','beam_bs'}}|%% Line 761
																																																								 [{'iff','dbs',{'listing',[98|[115]]}}|%% Line 762
																																																												       [{'unless','no_topt',{'pass','beam_type'}}|%% Line 763
																																																																		  [{'iff','dtype',{'listing',[116|[121|[112|[101]]]]}}|%% Line 764
																																																																								       [{'pass','beam_split'}|%% Line 765
																																																																											      [{'iff','dsplit',{'listing',[115|[112|[108|[105|[116]]]]]}}|%% Line 766
																																																																																			  [{'unless','no_dead',{'pass','beam_dead'}}|%% Line 767
																																																																																								     [{'iff','ddead',{'listing',[100|[101|[97|[100]]]]}}|%% Line 768
																																																																																															 [{'unless','no_jopt',{'pass','beam_jump'}}|%% Line 769
																																																																																																				    [{'iff','djmp',{'listing',[106|[117|[109|[112]]]]}}|%% Line 770
																																																																																																											[{'unless','no_peep_opt',{'pass','beam_peep'}}|%% Line 771
																																																																																																																       [{'iff','dpeep',{'listing',[112|[101|[101|[112]]]]}}|%% Line 772
																																																																																																																							    [{'pass','beam_clean'}|%% Line 773
																																																																																																																										   [{'iff','dclean',{'listing',[99|[108|[101|[97|[110]]]]]}}|%% Line 774
																																																																																																																																	     [{'unless','no_bsm_opt',{'pass','beam_bsm'}}|%% Line 775
																																																																																																																																							  [{'iff','dbsm',{'listing',[98|[115|[109]]]}}|%% Line 776
																																																																																																																																												       [{'unless','no_recv_opt',{'pass','beam_receive'}}|%% Line 777
																																																																																																																																																			 [{'iff','drecv',{'listing',[114|[101|[99|[118]]]]}}|%% Line 778
																																																																																																																																																									     [{'unless','no_record_opt',{'pass','beam_record'}}|%% Line 779
																																																																																																																																																																[{'iff','drecord',{'listing',[114|[101|[99|[111|[114|[100]]]]]]}}|%% Line 780
																																																																																																																																																																								  [{'unless','no_blk2',{'block2',( 'block2'/2
																																																																																																																																																																												   -| [{'id',{0,0,'-asm_passes/0-fun-0-'}}] )}}|%% Line 781
																																																																																																																																																																																		[{'iff','dblk2',{'listing',[98|[108|[111|[99|[107|[50]]]]]]}}|[{'unless','no_stack_trimming',{'pass','beam_trim'}}|[{'iff','dtrim',{'listing',[116|[114|[105|[109]]]]}}|[{'pass','beam_flatten'}]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]}|%% Line 788
																																																																																																																																																																																																														 [{'iff','no_postopt',[{'pass','beam_clean'}]}|[{'pass','beam_z'}|[{'iff','dz',{'listing',[122]}}|[{'iff','dopt',{'listing',[111|[112|[116|[105|[109|[105|[122|[101]]]]]]]]}}|[{'iff','S',{'listing',[83]}}|[{'iff','to_asm',{'done',[83]}}]]]]]]]]]}|%% Line 795
																																																																																																																																																																																																																																												      [{'pass','beam_validator'}|%% Line 796
																																																																																																																																																																																																																																																 [{'beam_asm',( 'beam_asm'/2
																																																																																																																																																																																																																																																		-| [{'id',{0,0,'-asm_passes/0-fun-1-'}}] )}|_0]]]
'binary_passes'/0 =
    %% Line 799
    fun () ->
	%% Line 800
	[{'iff','to_dis',{'to_dis',( 'to_dis'/2
				     -| [{'id',{0,0,'-binary_passes/0-fun-0-'}}] )}}|%% Line 801
										     [{'native_compile',( 'test_native'/1
													  -| [{'id',{0,0,'-binary_passes/0-fun-2-'}}] ),( 'native_compile'/2
																			  -| [{'id',{0,0,'-binary_passes/0-fun-1-'}}] )}|%% Line 802
																									 [{'unless','binary',{'save_binary',( 'not_werror'/1
																													      -| [{'id',{0,0,'-binary_passes/0-fun-4-'}}] ),( 'save_binary'/2
																																			      -| [{'id',{0,0,'-binary_passes/0-fun-3-'}}] )}}|%% Line 803
																																									      []]]]
'remove_file'/2 =
    %% Line 810
    fun (_1,_0) ->
	%% Line 811
	( case _0 of
	    ( <( {'compile',_7,_8,_9,_10,_rec22,_11,_12,_13,_14,_15,_16,_17,_18,_19}
		 -| ['result_not_wanted','compiler_generated'] )> when 'true' ->
		  do  ( call ( 'file'
			       -| ['result_not_wanted'] ):( 'delete'
							    -| ['result_not_wanted'] )
			    (_rec22)
			-| ['result_not_wanted'] )
		      %% Line 812
		      {'ok',_1,_0}
	      -| ['compiler_generated'] )
	    ( <_20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['result_not_wanted','compiler_generated'] ):( 'error'
									     -| ['result_not_wanted','compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['result_not_wanted','compiler_generated'] ))
		    -| ['result_not_wanted','compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'preprocess_asm_forms'/1 =
    %% Line 822
    fun (_0) ->
	%% Line 825
	( case apply 'collect_asm'/2
		   (_0, {'asm_module','undefined','undefined','undefined',[],'undefined','undefined',[]}) of
	    ( <( {'asm_module',_rec23,_16,_17,_18,_19,_20,_21}
		 -| ['compiler_generated'] )> when 'true' ->
		  {_rec23,%% Line 826
			  {_rec23,_16,_21,_18,_17}}
	      -| ['compiler_generated'] )
	    ( <_22> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','asm_module'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'collect_asm'/2 =
    %% Line 832
    fun (_1,_0) ->
	case <_1,_0> of
	  <[],R> when 'true' ->
	      %% Line 833
	      ( case R of
		  ( <( {'asm_module',_49,_50,_51,_52,_rec29,_53,_54}
		       -| ['compiler_generated'] )> when 'true' ->
			case _rec29 of
			  %% Line 834
			  <'undefined'> when 'true' ->
			      %% Line 835
			      R
			  %% Line 836
			  <{A,B,C}> when 'true' ->
			      let <_rec30> =
				  call %% Line 837
				       'erlang':%% Line 837
						'++'
				      (_52, %% Line 838
					    [{'function',A,B,C,_53}|[]])
			      in  %% Line 837
				  call 'erlang':'setelement'
				      (5, R, _rec30)
			  ( <_11> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_11})
			    -| ['compiler_generated'] )
			end
		    -| ['compiler_generated'] )
		  ( <_55> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','asm_module'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 840
	  <[{'module',M}|Rest],R> when 'true' ->
	      %% Line 841
	      case R of
		<{'asm_module',_78,_79,_80,_81,_82,_83,_84}> when 'true' ->
		    let <_14> =
			call 'erlang':'setelement'
			    (2, R, M)
		    in  apply 'collect_asm'/2
			    (Rest, _14)
		( <_85> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','asm_module'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 842
	  <[{'exports',M}|Rest],R> when 'true' ->
	      %% Line 843
	      case R of
		<{'asm_module',_86,_87,_88,_89,_90,_91,_92}> when 'true' ->
		    let <_17> =
			call 'erlang':'setelement'
			    (3, R, M)
		    in  apply 'collect_asm'/2
			    (Rest, _17)
		( <_93> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','asm_module'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 844
	  <[{'labels',M}|Rest],R> when 'true' ->
	      %% Line 845
	      case R of
		<{'asm_module',_94,_95,_96,_97,_98,_99,_100}> when 'true' ->
		    let <_20> =
			call 'erlang':'setelement'
			    (4, R, M)
		    in  apply 'collect_asm'/2
			    (Rest, _20)
		( <_101> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','asm_module'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 846
	  <[{'function',A,B,C}|Rest],R> when 'true' ->
	      %% Line 847
	      ( case R of
		  ( <( {'asm_module',_102,_103,_104,_105,_rec37,_106,_107}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_31> =
			    case _rec37 of
			      %% Line 848
			      <'undefined'> when 'true' ->
				  %% Line 849
				  R
			      %% Line 850
			      <{A0,B0,C0}> when 'true' ->
				  let <_rec38> =
				      call %% Line 851
					   'erlang':%% Line 851
						    '++'
					  (_105, %% Line 852
						 [{'function',A0,B0,C0,_106}|[]])
				  in  %% Line 851
				      call 'erlang':'setelement'
					  (5, R, _rec38)
			      ( <_30> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_30})
				-| ['compiler_generated'] )
			    end
			in  let <_rec42> = {%% Line 854
				 A,%% Line 854
				   B,%% Line 854
				     C}
			    in  %% Line 854
				case _31 of
				  <{'asm_module',_131,_132,_133,_134,_135,_136,_137}> when 'true' ->
				      let <_35> =
					  call 'erlang':'setelement'
					      (7, _31, [])
				      in  let <_37> =
					      call 'erlang':'setelement'
						  (6, _35, _rec42)
					  in  apply 'collect_asm'/2
						  (Rest, _37)
				  ( <_138> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','asm_module'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
		    -| ['compiler_generated'] )
		  ( <_108> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','asm_module'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  %% Line 855
	  <[{'attributes',Attr}|Rest],R> when 'true' ->
	      %% Line 856
	      case R of
		<{'asm_module',_139,_140,_141,_142,_143,_144,_145}> when 'true' ->
		    let <_40> =
			call 'erlang':'setelement'
			    (8, R, Attr)
		    in  apply 'collect_asm'/2
			    (Rest, _40)
		( <_146> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','asm_module'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 857
	  <[X|Rest],R> when 'true' ->
	      %% Line 858
	      ( case R of
		  ( <( {'asm_module',_147,_148,_149,_150,_151,_rec47,_152}
		       -| ['compiler_generated'] )> when 'true' ->
			let <_rec45> =
			    call 'erlang':'++'
				(_rec47, [X|[]])
			in  let <_46> =
				call 'erlang':'setelement'
				    (7, R, _rec45)
			    in  apply 'collect_asm'/2
				    (Rest, _46)
		    -| ['compiler_generated'] )
		  ( <_153> when 'true' ->
			( call ( 'erlang'
				 -| ['compiler_generated'] ):( 'error'
							       -| ['compiler_generated'] )
			      (( {'badrecord','asm_module'}
				 -| ['compiler_generated'] ))
			  -| ['compiler_generated'] )
		    -| ['compiler_generated'] )
		end
		-| ['compiler_generated'] )
	  ( <_48,_47> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_48,_47})
		  -| [{'function_name',{'collect_asm',2}}] )
	    -| ['compiler_generated'] )
	end
'beam_consult_asm'/2 =
    %% Line 860
    fun (_1,_0) ->
	%% Line 861
	( case _0 of
	    ( <( {'compile',_24,_25,_26,_rec48,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'consult'
			   (_rec48) of
		    %% Line 862
		    <{'ok',Forms0}> when 'true' ->
			let <Encoding> =
			    call %% Line 863
				 'epp':%% Line 863
				       'read_encoding'
				(_rec48)
			in  %% Line 864
			    case apply 'preprocess_asm_forms'/1
				     (Forms0) of
			      <{Module,Forms}> when 'true' ->
				  let <_9> =
				      call %% Line 865
					   'erlang':%% Line 865
						    'setelement'
					  (%% Line 865
					   12, _0, %% Line 865
						   Encoding)
				  in  let <_11> =
					  call %% Line 865
					       'erlang':%% Line 865
							'setelement'
					      (%% Line 865
					       7, _9, %% Line 865
						      Module)
				      in  %% Line 865
					  {'ok',Forms,_11}
			      ( <_7> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_7})
				-| ['compiler_generated'] )
			    end
		    %% Line 866
		    <{'error',E}> when 'true' ->
			let <Es> =
			    [%% Line 867
			     {_rec48,[{'none','compile',{'open',E}}|[]]}|%% Line 867
									 []]
			in  let <_rec52> =
				call %% Line 868
				     'erlang':%% Line 868
					      '++'
				    (_34, %% Line 868
					  Es)
			    in  let <_20> =
				    call %% Line 868
					 'erlang':%% Line 868
						  'setelement'
					(%% Line 868
					 13, _0, %% Line 868
						 _rec52)
				in  %% Line 868
				    {'error',_20}
		    ( <_21> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_21})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_37> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_module_name_from_asm'/2 =
    %% Line 871
    fun (_1,_0) ->
	case <_1,_0> of
	  <Asm = {Mod,_7,_8,_9,_10},St> when 'true' ->
	      %% Line 872
	      case St of
		<{'compile',_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24}> when 'true' ->
		    let <_4> =
			call 'erlang':'setelement'
			    (7, St, Mod)
		    in  {'ok',Asm,_4}
		( <_25> when 'true' ->
		      ( call ( 'erlang'
			       -| ['compiler_generated'] ):( 'error'
							     -| ['compiler_generated'] )
			    (( {'badrecord','compile'}
			       -| ['compiler_generated'] ))
			-| ['compiler_generated'] )
		  -| ['compiler_generated'] )
	      end
	  %% Line 873
	  <Asm,St> when 'true' ->
	      %% Line 875
	      {'ok',Asm,St}
	end
'read_beam_file'/2 =
    %% Line 877
    fun (_1,_0) ->
	%% Line 878
	( case _0 of
	    ( <( {'compile',_30,_31,_32,_rec56,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'read_file'
			   (_rec56) of
		    %% Line 879
		    <{'ok',Beam}> when 'true' ->
			%% Line 881
			case apply 'no_native_compilation'/2
				 (_rec56, _0) of
			  %% Line 882
			  <'true'> when 'true' ->
			      let <_9> =
				  call %% Line 883
				       'erlang':%% Line 883
						'setelement'
				      (%% Line 883
				       7, _0, %% Line 883
					      'none')
			      in  %% Line 883
				  {'ok','none',_9}
			  %% Line 884
			  <'false'> when 'true' ->
			      let <_10> =
				  call %% Line 885
				       'filename':%% Line 885
						  'basename'
				      (_rec56)
			      in  let <Mod0> =
				      call %% Line 885
					   'filename':%% Line 885
						      'rootname'
					  (_10)
				  in  let <Mod> =
					  call %% Line 886
					       'erlang':%% Line 886
							'list_to_atom'
					      (%% Line 886
					       Mod0)
				      in  let <_14> =
					      call %% Line 887
						   'erlang':%% Line 887
							    'setelement'
						  (%% Line 887
						   7, _0, %% Line 887
							  Mod)
					  in  let <_16> =
						  call %% Line 887
						       'erlang':%% Line 887
								'setelement'
						      (%% Line 887
						       6, _14, _rec56)
					      in  %% Line 887
						  {'ok',Beam,_16}
			  ( <_17> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_17})
			    -| ['compiler_generated'] )
			end
		    %% Line 889
		    <{'error',E}> when 'true' ->
			let <Es> =
			    [%% Line 890
			     {_rec56,[{'none','compile',{'open',E}}|[]]}|%% Line 890
									 []]
			in  let <_rec61> =
				call %% Line 891
				     'erlang':%% Line 891
					      '++'
				    (_40, %% Line 891
					  Es)
			    in  let <_26> =
				    call %% Line 891
					 'erlang':%% Line 891
						  'setelement'
					(%% Line 891
					 13, _0, %% Line 891
						 _rec61)
				in  %% Line 891
				    {'error',_26}
		    ( <_27> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_27})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_43> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_module_name_from_beam'/2 =
    %% Line 894
    fun (_1,_0) ->
	%% Line 895
	case call 'beam_lib':'info'
		 (_1) of
	  %% Line 896
	  <{'error','beam_lib',Error}> when 'true' ->
	      let <Es> =
		  [%% Line 897
		   {[40|[40|[102|[111|[114|[109|[115|[41|[41]]]]]]]]],[{'none','beam_lib',Error}|[]]}|%% Line 897
												      []]
	      in  %% Line 898
		  ( case _0 of
		      ( <( {'compile',_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_rec66,_27,_28}
			   -| ['compiler_generated'] )> when 'true' ->
			    let <_rec64> =
				call 'erlang':'++'
				    (_rec66, Es)
			    in  let <_8> =
				    call 'erlang':'setelement'
					(13, _0, _rec64)
				in  {'error',_8}
			-| ['compiler_generated'] )
		      ( <_29> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','compile'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		    -| ['compiler_generated'] )
	  %% Line 899
	  <Info> when 'true' ->
	      %% Line 900
	      case call 'lists':'keyfind'
		       ('module', 1, Info) of
		<{'module',Mod}> when 'true' ->
		    %% Line 901
		    case _0 of
		      <{'compile',_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58}> when 'true' ->
			  let <_12> =
			      call 'erlang':'setelement'
				  (7, _0, Mod)
			  in  {'ok',_1,_12}
		      ( <_59> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','compile'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
		( <_9> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_9})
		  -| ['compiler_generated'] )
	      end
	end
'no_native_compilation'/2 =
    %% Line 904
    fun (_1,_0) ->
	case <_1,_0> of
	  <BeamFile,{'compile',_11,_12,_13,_14,_15,_16,_17,_18,Opts0,_19,_20,_21,_22,_23}> when 'true' ->
	      %% Line 905
	      case call 'beam_lib':'chunks'
		       (BeamFile, [[67|[73|[110|[102]]]]]) of
		%% Line 906
		<{'ok',{_24,[{[67|[73|[110|[102]]]],Term0}|[]]}}> when 'true' ->
		    let <Term> =
			call %% Line 907
			     'erlang':%% Line 907
				      'binary_to_term'
			    (%% Line 907
			     Term0)
		    in  let <_3> =
			    call %% Line 911
				 'proplists':%% Line 911
					     'get_value'
				(%% Line 911
				 'options', %% Line 911
					    Term, %% Line 911
						  [])
			in  let <Opts> =
				call %% Line 911
				     'erlang':%% Line 911
					      '++'
				    (_3, %% Line 911
					 Opts0)
			    in  %% Line 912
				( case call 'lists':'member'
					   ('no_new_funs', Opts) of
				    ( <( 'true'
					 -| ['compiler_generated'] )> when 'true' ->
					  'true'
				      -| ['compiler_generated'] )
				    ( <( 'false'
					 -| ['compiler_generated'] )> when 'true' ->
					  let <_6> =
					      apply 'is_native_enabled'/1
						  (Opts)
					  in  call 'erlang':'not'
						  (_6)
				      -| ['compiler_generated'] )
				    ( <_5> when 'true' ->
					  ( call ( 'erlang'
						   -| ['compiler_generated'] ):( 'error'
										 -| ['compiler_generated'] )
						(( {( 'badarg'
						      -| ['compiler_generated'] ),_5}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
				  -| ['compiler_generated'] )
		%% Line 913
		<_25> when 'true' ->
		    'false'
	      end
	  ( <_10,_9> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_10,_9})
		  -| [{'function_name',{'no_native_compilation',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_module'/2 =
    %% Line 916
    fun (_1,_0) ->
	%% Line 917
	case apply 'do_parse_module'/2
		 ('utf8', _0) of
	  %% Line 918
	  <Ret = {'ok',_20,_21}> when 'true' ->
	      %% Line 919
	      Ret
	  %% Line 920
	  <Ret = {'error',_22}> when 'true' ->
	      %% Line 921
	      Ret
	  %% Line 922
	  <{'invalid_unicode',File,Line}> when 'true' ->
	      %% Line 923
	      case apply 'do_parse_module'/2
		       ('latin1', _0) of
		%% Line 924
		<{'ok',Code,St}> when 'true' ->
		    let <Es> =
			[%% Line 925
			 {File,[{Line,'compile','reparsing_invalid_unicode'}|[]]}|%% Line 925
										  []]
		    in  %% Line 926
			( case St of
			    ( <( {'compile',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_rec70,_35}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_rec68> =
				      call 'erlang':'++'
					  (Es, _rec70)
				  in  let <_8> =
					  call 'erlang':'setelement'
					      (14, St, _rec68)
				      in  {'ok',Code,_8}
			      -| ['compiler_generated'] )
			    ( <_36> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','compile'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		%% Line 927
		<{'error',St}> when 'true' ->
		    let <Es> =
			[%% Line 928
			 {File,[{Line,'compile','reparsing_invalid_unicode'}|[]]}|%% Line 928
										  []]
		    in  %% Line 929
			( case St of
			    ( <( {'compile',_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_rec73,_63,_64}
				 -| ['compiler_generated'] )> when 'true' ->
				  let <_rec71> =
				      call 'erlang':'++'
					  (Es, _rec73)
				  in  let <_15> =
					  call 'erlang':'setelement'
					      (13, St, _rec71)
				      in  {'error',_15}
			      -| ['compiler_generated'] )
			    ( <_65> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {'badrecord','compile'}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
			  -| ['compiler_generated'] )
		( <_16> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_16})
		  -| ['compiler_generated'] )
	      end
	  ( <_17> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_17})
	    -| ['compiler_generated'] )
	end
'do_parse_module'/2 =
    %% Line 933
    fun (_1,_0) ->
	case <_1,_0> of
	  <DefEncoding,St = {'compile',_26,Dir,_27,File,_28,_29,_30,_31,Opts,_32,_33,_34,_35,_36}> when 'true' ->
	      let <_2> =
		  apply %% Line 935
			'inc_paths'/1
		      (%% Line 935
		       Opts)
	      in  let <_3> =
		      apply %% Line 936
			    'pre_defs'/1
			  (%% Line 936
			   Opts)
		  in  %% Line 939
		      case call 'epp':'parse_file'
			       (File, [{'includes',[[46]|[Dir|_2]]}|[{'macros',_3}|[{'default_encoding',DefEncoding}|['extra']]]]) of
			%% Line 940
			<{'ok',Forms,Extra}> when 'true' ->
			    let <Encoding> =
				call %% Line 941
				     'proplists':%% Line 941
						 'get_value'
				    (%% Line 941
				     'encoding', %% Line 941
						 Extra)
			    in  %% Line 942
				case apply 'find_invalid_unicode'/2
					 (Forms, File) of
				  %% Line 943
				  <'none'> when 'true' ->
				      let <_8> =
					  call %% Line 944
					       'erlang':%% Line 944
							'setelement'
					      (%% Line 944
					       12, %% Line 944
						   St, %% Line 944
						       Encoding)
				      in  %% Line 944
					  {'ok',Forms,_8}
				  %% Line 945
				  <Ret = {'invalid_unicode',_52,_53}> when 'true' ->
				      %% Line 946
				      case Encoding of
					%% Line 947
					<'none'> when 'true' ->
					    %% Line 948
					    Ret
					%% Line 949
					<_54> when 'true' ->
					    let <_11> =
						call %% Line 950
						     'erlang':%% Line 950
							      'setelement'
						    (%% Line 950
						     12, %% Line 950
							 St, %% Line 950
							     Encoding)
					    in  %% Line 950
						{'ok',Forms,_11}
				      end
				  ( <_13> when 'true' ->
					primop 'match_fail'
					    ({'case_clause',_13})
				    -| ['compiler_generated'] )
				end
			%% Line 953
			<{'error',E}> when 'true' ->
			    let <Es> =
				[%% Line 954
				 {File,[{'none','compile',{'epp',E}}|[]]}|%% Line 954
									  []]
			    in  let <_rec77> =
				    call %% Line 955
					 'erlang':%% Line 955
						  '++'
					(_34, %% Line 955
					      Es)
				in  let <_22> =
					call %% Line 955
					     'erlang':%% Line 955
						      'setelement'
					    (%% Line 955
					     13, %% Line 955
						 St, %% Line 955
						     _rec77)
				    in  %% Line 955
					{'error',_22}
			( <_23> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_23})
			  -| ['compiler_generated'] )
		      end
	  ( <_25,_24> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_25,_24})
		  -| [{'function_name',{'do_parse_module',2}}] )
	    -| ['compiler_generated'] )
	end
'find_invalid_unicode'/2 =
    %% Line 958
    fun (_1,_0) ->
	case <_1,_0> of
	  <[H|T],File0> when 'true' ->
	      %% Line 959
	      case H of
		%% Line 960
		<{'attribute',_5,'file',{File,_6}}> when 'true' ->
		    %% Line 961
		    apply 'find_invalid_unicode'/2
			(T, File)
		%% Line 962
		<{'error',{Line,'file_io_server','invalid_unicode'}}> when 'true' ->
		    %% Line 963
		    {'invalid_unicode',File0,Line}
		%% Line 964
		<_X_Other> when 'true' ->
		    %% Line 965
		    apply 'find_invalid_unicode'/2
			(T, File0)
	      end
	  %% Line 967
	  <[],_7> when 'true' ->
	      'none'
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'find_invalid_unicode',2}}] )
	    -| ['compiler_generated'] )
	end
'parse_core'/2 =
    %% Line 969
    fun (_1,_0) ->
	%% Line 970
	( case _0 of
	    ( <( {'compile',_45,_46,_47,_rec80,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'file':'read_file'
			   (_rec80) of
		    %% Line 971
		    <{'ok',Bin}> when 'true' ->
			let <_4> =
			    call %% Line 972
				 'erlang':%% Line 972
					  'binary_to_list'
				(%% Line 972
				 Bin)
			in  %% Line 972
			    case call 'core_scan':'string'
				     (_4) of
			      %% Line 973
			      <{'ok',Toks,_59}> when 'true' ->
				  %% Line 974
				  case call 'core_parse':'parse'
					   (Toks) of
				    %% Line 975
				    <{'ok',Mod}> when 'true' ->
					%% Line 976
					( case Mod of
					    ( <( {'c_module',_60,_rec82,_61,_62,_63}
						 -| ['compiler_generated'] )> when 'true' ->
						  ( case _rec82 of
						      ( <( {'c_literal',_65,_rec81}
							   -| ['compiler_generated'] )> when 'true' ->
							    let <_12> =
								call %% Line 977
								     'erlang':%% Line 977
									      'setelement'
								    (%% Line 977
								     7, _0, _rec81)
							    in  %% Line 977
								{'ok',Mod,_12}
							-| ['compiler_generated'] )
						      ( <_66> when 'true' ->
							    ( call ( 'erlang'
								     -| ['compiler_generated'] ):( 'error'
												   -| ['compiler_generated'] )
								  (( {'badrecord','c_literal'}
								     -| ['compiler_generated'] ))
							      -| ['compiler_generated'] )
							-| ['compiler_generated'] )
						    end
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					    ( <_64> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','c_module'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				    %% Line 978
				    <{'error',E}> when 'true' ->
					let <Es> =
					    [%% Line 979
					     {_rec80,[E|[]]}|%% Line 979
							     []]
					in  let <_rec85> =
						call %% Line 980
						     'erlang':%% Line 980
							      '++'
						    (_55, %% Line 980
							  Es)
					    in  let <_21> =
						    call %% Line 980
							 'erlang':%% Line 980
								  'setelement'
							(%% Line 980
							 13, _0, %% Line 980
								 _rec85)
						in  %% Line 980
						    {'error',_21}
				    ( <_22> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_22})
				      -| ['compiler_generated'] )
				  end
			      %% Line 982
			      <{'error',E,_125}> when 'true' ->
				  let <Es> =
				      [%% Line 983
				       {_rec80,[E|[]]}|%% Line 983
						       []]
				  in  let <_rec89> =
					  call %% Line 984
					       'erlang':%% Line 984
							'++'
					      (_55, %% Line 984
						    Es)
				      in  let <_31> =
					      call %% Line 984
						   'erlang':%% Line 984
							    'setelement'
						  (%% Line 984
						   13, _0, %% Line 984
							   _rec89)
					  in  %% Line 984
					      {'error',_31}
			      ( <_32> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_32})
				-| ['compiler_generated'] )
			    end
		    %% Line 986
		    <{'error',E}> when 'true' ->
			let <Es> =
			    [%% Line 987
			     {_rec80,[{'none','compile',{'open',E}}|[]]}|%% Line 987
									 []]
			in  let <_rec93> =
				call %% Line 988
				     'erlang':%% Line 988
					      '++'
				    (_55, %% Line 988
					  Es)
			    in  let <_41> =
				    call %% Line 988
					 'erlang':%% Line 988
						  'setelement'
					(%% Line 988
					 13, _0, %% Line 988
						 _rec93)
				in  %% Line 988
				    {'error',_41}
		    ( <_42> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_42})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_58> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'get_module_name_from_core'/2 =
    %% Line 991
    fun (_1,_0) ->
	%% Line 992
	try
	    let <_2> =
		call %% Line 993
		     'cerl':%% Line 993
			    'module_name'
		    (_1)
	    in  let <Mod> =
		    call %% Line 993
			 'cerl':%% Line 993
				'concrete'
			(_2)
		in  %% Line 994
		    case _0 of
		      <{'compile',_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}> when 'true' ->
			  let <_6> =
			      call 'erlang':'setelement'
				  (7, _0, Mod)
			  in  {'ok',_1,_6}
		      ( <_27> when 'true' ->
			    ( call ( 'erlang'
				     -| ['compiler_generated'] ):( 'error'
								   -| ['compiler_generated'] )
				  (( {'badrecord','compile'}
				     -| ['compiler_generated'] ))
			      -| ['compiler_generated'] )
			-| ['compiler_generated'] )
		    end
	of <_7> ->
	    _7
	catch <_10,_9,_8> ->
	    %% Line 998
	    {'ok',_1,_0}
'compile_options'/1 =
    %% Line 1001
    fun (_0) ->
	case _0 of
	  <[{'attribute',_X_L,'compile',C}|Fs]>
	      when call 'erlang':'is_list'
		    (C) ->
	      let <_1> =
		  apply %% Line 1002
			'compile_options'/1
		      (%% Line 1002
		       Fs)
	      in  %% Line 1002
		  call 'erlang':'++'
		      (C, _1)
	  %% Line 1003
	  <[{'attribute',_X_L,'compile',C}|Fs]> when 'true' ->
	      let <_2> =
		  apply %% Line 1004
			'compile_options'/1
		      (%% Line 1004
		       Fs)
	      in  %% Line 1004
		  [C|_2]
	  %% Line 1005
	  <[_X_F|Fs]> when 'true' ->
	      apply 'compile_options'/1
		  (Fs)
	  %% Line 1006
	  <[]> when 'true' ->
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'compile_options',1}}] )
	    -| ['compiler_generated'] )
	end
'clean_parse_transforms'/1 =
    %% Line 1008
    fun (_0) ->
	%% Line 1009
	apply 'clean_parse_transforms_1'/2
	    (_0, [])
'clean_parse_transforms_1'/2 =
    %% Line 1011
    fun (_1,_0) ->
	case <_1,_0> of
	  <[{'attribute',L,'compile',C0}|Fs],Acc>
	      when call 'erlang':'is_list'
		    (C0) ->
	      let <_4> =
		  fun (_2) ->
		      %% Line 1012
		      case _2 of
			<{'parse_transform',_8}> when 'true' ->
			    'false'
			%% Line 1013
			<_9> when 'true' ->
			    'true'
		      end
	      in  let <C> =
		      call %% Line 1012
			   'lists':%% Line 1012
				   'filter'
			  (_4, %% Line 1014
			       C0)
		  in  %% Line 1015
		      apply 'clean_parse_transforms_1'/2
			  (Fs, [{'attribute',L,'compile',C}|Acc])
	  %% Line 1016
	  <[{'attribute',_10,'compile',{'parse_transform',_11}}|Fs],Acc> when 'true' ->
	      %% Line 1017
	      apply 'clean_parse_transforms_1'/2
		  (Fs, Acc)
	  %% Line 1018
	  <[F|Fs],Acc> when 'true' ->
	      %% Line 1019
	      apply 'clean_parse_transforms_1'/2
		  (Fs, [F|Acc])
	  %% Line 1020
	  <[],Acc> when 'true' ->
	      call 'lists':'reverse'
		  (Acc)
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'clean_parse_transforms_1',2}}] )
	    -| ['compiler_generated'] )
	end
'transforms'/1 =
    %% Line 1022
    fun (_0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[{'parse_transform',M}|_2]> when 'true' ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [M|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'transform_module'/2 =
    %% Line 1024
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_8,_9,_10,_11,_12,_13,_14,_15,Opt,_16,_17,_18,_19,_20}> when 'true' ->
	      let <_2> =
		  apply %% Line 1026
			'compile_options'/1
		      (%% Line 1026
		       Code0)
	      in  let <_3> =
		      call %% Line 1026
			   'erlang':%% Line 1026
				    '++'
			  (%% Line 1026
			   Opt, _2)
		  in  %% Line 1026
		      case apply 'transforms'/1
			       (_3) of
			%% Line 1027
			<[]> when 'true' ->
			    %% Line 1029
			    {'ok',Code0,St}
			%% Line 1030
			<Ts> when 'true' ->
			    let <Code> =
				apply %% Line 1033
				      'clean_parse_transforms'/1
				    (%% Line 1033
				     Code0)
			    in  %% Line 1034
				apply 'foldl_transform'/3
				    (Ts, Code, St)
		      end
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'transform_module',2}}] )
	    -| ['compiler_generated'] )
	end
'foldl_transform'/3 =
    %% Line 1037
    fun (_2,_1,_0) ->
	case <_2,_1,_0> of
	  <[T|Ts],Code0,St> when 'true' ->
	      let <_3> =
		  call %% Line 1038
		       'erlang':%% Line 1038
				'atom_to_list'
		      (%% Line 1038
		       T)
	      in  let <Name> =
		      call %% Line 1038
			   'erlang':%% Line 1038
				    '++'
			  (%% Line 1038
			   [116|[114|[97|[110|[115|[102|[111|[114|[109|[32]]]]]]]]]], _3)
		  in  let <_6> =
			  call %% Line 1039
			       'code':%% Line 1039
				      'ensure_loaded'
			      (%% Line 1039
			       T)
		      in  let <_8> =
			      case <> of
				%% Line 1039
				( <>
				      when call 'erlang':'=:='
					    (_6,
					     {'module',T}) ->
				      %% Line 1040
				      call 'erlang':'function_exported'
					  (T, 'parse_transform', 2)
				  -| ['compiler_generated'] )
				%% Line 1039
				( <> when 'true' ->
				      'false'
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1039
			      case _8 of
				%% Line 1041
				<'true'> when 'true' ->
				    let <Fun> =
					fun (_12,_11) ->
					    %% Line 1043
					    ( case _11 of
						( <( {'compile',_66,_67,_68,_69,_70,_71,_72,_73,_rec97,_74,_75,_76,_77,_78}
						     -| ['compiler_generated'] )> when 'true' ->
						      call T:'parse_transform'
							  (_12, _rec97)
						  -| ['compiler_generated'] )
						( <_79> when 'true' ->
						      ( call ( 'erlang'
							       -| ['compiler_generated'] ):( 'error'
											     -| ['compiler_generated'] )
							    (( {'badrecord','compile'}
							       -| ['compiler_generated'] ))
							-| ['compiler_generated'] )
						  -| ['compiler_generated'] )
					      end
					      -| ['compiler_generated'] )
				    in  %% Line 1045
					( case St of
					    ( <( {'compile',_80,_81,_82,_83,_84,_85,_86,_87,_rec98,_88,_89,_90,_91,_92}
						 -| ['compiler_generated'] )> when 'true' ->
						  let <_25> =
						      case call 'lists':'member'
							       ('time', _rec98) of
							%% Line 1046
							<'true'> when 'true' ->
							    %% Line 1047
							    ( 'run_tc'/3
							      -| [{'id',{0,0,'-foldl_transform/3-fun-1-'}}] )
							%% Line 1048
							<'false'> when 'true' ->
							    %% Line 1049
							    ( fun (_20,_19,_18) ->
								  case <_20,_19,_18> of
								    <{_X_Name,F},Code,S> when 'true' ->
									catch
									    %% Line 1050
									    apply F
										(Code, S)
								    ( <_23,_22,_21> when 'true' ->
									  ( primop 'match_fail'
										({'function_clause',_23,_22,_21})
									    -| [{'function_name',{'-foldl_transform/3-fun-2-',3}}] )
								      -| ['compiler_generated'] )
								  end
							      -| [{'id',{0,0,'-foldl_transform/3-fun-2-'}}] )
							( <_24> when 'true' ->
							      primop 'match_fail'
								  ({'case_clause',_24})
							  -| ['compiler_generated'] )
						      end
						  in  %% Line 1053
						      case apply _25
							       ({Name,Fun}, Code0, St) of
							%% Line 1054
							<{'error',Es,Ws}> when 'true' ->
							    let <_rec99> =
								call %% Line 1055
								     'erlang':%% Line 1055
									      '++'
								    (_91, %% Line 1055
									  Ws)
							    in  let <_rec100> =
								    call %% Line 1056
									 'erlang':%% Line 1056
										  '++'
									(_90, %% Line 1056
									      Es)
								in  let <_34> =
									call %% Line 1055
									     'erlang':%% Line 1055
										      'setelement'
									    (%% Line 1055
									     14, %% Line 1055
										 St, %% Line 1055
										     _rec99)
								    in  let <_36> =
									    call %% Line 1056
										 'erlang':%% Line 1056
											  'setelement'
										(%% Line 1056
										 13, _34, %% Line 1056
											  _rec100)
									in  %% Line 1055
									    {'error',_36}
							%% Line 1057
							<{'EXIT',R}> when 'true' ->
							    let <Es> =
								[%% Line 1058
								 {_83,[{'none','compile',%% Line 1059
											 {'parse_transform',T,R}}|%% Line 1059
														  []]}|%% Line 1059
														       []]
							    in  let <_rec105> =
								    call %% Line 1060
									 'erlang':%% Line 1060
										  '++'
									(_90, %% Line 1060
									      Es)
								in  let <_45> =
									call %% Line 1060
									     'erlang':%% Line 1060
										      'setelement'
									    (%% Line 1060
									     13, %% Line 1060
										 St, %% Line 1060
										     _rec105)
								    in  %% Line 1060
									{'error',_45}
							%% Line 1061
							<{'warning',Forms,Ws}> when 'true' ->
							    let <_rec108> =
								call %% Line 1063
								     'erlang':%% Line 1063
									      '++'
								    (_91, %% Line 1063
									  Ws)
							    in  let <_51> =
								    call %% Line 1063
									 'erlang':%% Line 1063
										  'setelement'
									(%% Line 1063
									 14, %% Line 1063
									     St, %% Line 1063
										 _rec108)
								in  %% Line 1062
								    apply 'foldl_transform'/3
									(Ts, Forms, _51)
							%% Line 1064
							<Forms> when 'true' ->
							    %% Line 1065
							    apply 'foldl_transform'/3
								(Ts, Forms, St)
						      end
					      -| ['compiler_generated'] )
					    ( <_93> when 'true' ->
						  ( call ( 'erlang'
							   -| ['compiler_generated'] ):( 'error'
											 -| ['compiler_generated'] )
							(( {'badrecord','compile'}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
					  -| ['compiler_generated'] )
				%% Line 1067
				<'false'> when 'true' ->
				    %% Line 1068
				    ( case St of
					( <( {'compile',_209,_210,_211,_rec111,_212,_213,_214,_215,_216,_217,_218,_219,_220,_221}
					     -| ['compiler_generated'] )> when 'true' ->
					      let <Es> =
						  [{_rec111,[{'none','compile',%% Line 1069
									       {'undef_parse_transform',T}}|%% Line 1069
													    []]}|%% Line 1069
														 []]
					      in  let <_rec112> =
						      call %% Line 1070
							   'erlang':%% Line 1070
								    '++'
							  (_219, %% Line 1070
								 Es)
						  in  let <_61> =
							  call %% Line 1070
							       'erlang':%% Line 1070
									'setelement'
							      (%% Line 1070
							       13, %% Line 1070
								   St, %% Line 1070
								       _rec112)
						      in  %% Line 1070
							  {'error',_61}
					  -| ['compiler_generated'] )
					( <_222> when 'true' ->
					      ( call ( 'erlang'
						       -| ['compiler_generated'] ):( 'error'
										     -| ['compiler_generated'] )
						    (( {'badrecord','compile'}
						       -| ['compiler_generated'] ))
						-| ['compiler_generated'] )
					  -| ['compiler_generated'] )
				      end
				      -| ['compiler_generated'] )
				( <_62> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_62})
				  -| ['compiler_generated'] )
			      end
	  %% Line 1072
	  <[],Code,St> when 'true' ->
	      {'ok',Code,St}
	  ( <_65,_64,_63> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_65,_64,_63})
		  -| [{'function_name',{'foldl_transform',3}}] )
	    -| ['compiler_generated'] )
	end
'get_core_transforms'/1 =
    %% Line 1074
    fun (_0) ->
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[{'core_transform',M}|_2]> when 'true' ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [M|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'core_transforms'/2 =
    %% Line 1076
    fun (_1,_0) ->
	%% Line 1078
	( case _0 of
	    ( <( {'compile',_7,_8,_9,_10,_11,_12,_13,_14,_rec115,_15,_16,_17,_18,_19}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Ts> =
		      apply 'get_core_transforms'/1
			  (_rec115)
		  in  %% Line 1079
		      apply 'foldl_core_transforms'/3
			  (Ts, _1, _0)
	      -| ['compiler_generated'] )
	    ( <_20> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'foldl_core_transforms'/3 =
    %% Line 1081
    fun (_2,_1,_0) ->
	case <_2,_1,_0> of
	  <[T|Ts],Code0,St> when 'true' ->
	      let <_3> =
		  call %% Line 1082
		       'erlang':%% Line 1082
				'atom_to_list'
		      (%% Line 1082
		       T)
	      in  let <Name> =
		      call %% Line 1082
			   'erlang':%% Line 1082
				    '++'
			  (%% Line 1082
			   [99|[111|[114|[101|[32|[116|[114|[97|[110|[115|[102|[111|[114|[109|[32]]]]]]]]]]]]]]], _3)
		  in  let <Fun> =
			  fun (_8,_7) ->
			      %% Line 1083
			      ( case _7 of
				  ( <( {'compile',_36,_37,_38,_39,_40,_41,_42,_43,_rec116,_44,_45,_46,_47,_48}
				       -| ['compiler_generated'] )> when 'true' ->
					call T:'core_transform'
					    (_8, _rec116)
				    -| ['compiler_generated'] )
				  ( <_49> when 'true' ->
					( call ( 'erlang'
						 -| ['compiler_generated'] ):( 'error'
									       -| ['compiler_generated'] )
					      (( {'badrecord','compile'}
						 -| ['compiler_generated'] ))
					  -| ['compiler_generated'] )
				    -| ['compiler_generated'] )
				end
				-| ['compiler_generated'] )
		      in  %% Line 1084
			  ( case St of
			      ( <( {'compile',_50,_51,_52,_53,_54,_55,_56,_57,_rec117,_58,_59,_60,_61,_62}
				   -| ['compiler_generated'] )> when 'true' ->
				    let <_21> =
					case call 'lists':'member'
						 ('time', _rec117) of
					  %% Line 1085
					  <'true'> when 'true' ->
					      %% Line 1086
					      ( 'run_tc'/3
						-| [{'id',{0,0,'-foldl_core_transforms/3-fun-1-'}}] )
					  %% Line 1087
					  <'false'> when 'true' ->
					      %% Line 1088
					      ( fun (_16,_15,_14) ->
						    case <_16,_15,_14> of
						      <{_X_Name,F},Code,S> when 'true' ->
							  catch
							      %% Line 1089
							      apply F
								  (Code, S)
						      ( <_19,_18,_17> when 'true' ->
							    ( primop 'match_fail'
								  ({'function_clause',_19,_18,_17})
							      -| [{'function_name',{'-foldl_core_transforms/3-fun-2-',3}}] )
							-| ['compiler_generated'] )
						    end
						-| [{'id',{0,0,'-foldl_core_transforms/3-fun-2-'}}] )
					  ( <_20> when 'true' ->
						primop 'match_fail'
						    ({'case_clause',_20})
					    -| ['compiler_generated'] )
					end
				    in  %% Line 1092
					case apply _21
						 ({Name,Fun}, Code0, St) of
					  %% Line 1093
					  <{'EXIT',R}> when 'true' ->
					      let <Es> =
						  [%% Line 1094
						   {_53,[{'none','compile',{'core_transform',T,R}}|[]]}|%% Line 1094
													[]]
					      in  let <_rec119> =
						      call %% Line 1095
							   'erlang':%% Line 1095
								    '++'
							  (_60, %% Line 1095
								Es)
						  in  let <_31> =
							  call %% Line 1095
							       'erlang':%% Line 1095
									'setelement'
							      (%% Line 1095
							       13, %% Line 1095
								   St, %% Line 1095
								       _rec119)
						      in  %% Line 1095
							  {'error',_31}
					  %% Line 1096
					  <Forms> when 'true' ->
					      %% Line 1097
					      apply 'foldl_core_transforms'/3
						  (Ts, Forms, St)
					end
				-| ['compiler_generated'] )
			      ( <_63> when 'true' ->
				    ( call ( 'erlang'
					     -| ['compiler_generated'] ):( 'error'
									   -| ['compiler_generated'] )
					  (( {'badrecord','compile'}
					     -| ['compiler_generated'] ))
				      -| ['compiler_generated'] )
				-| ['compiler_generated'] )
			    end
			    -| ['compiler_generated'] )
	  %% Line 1099
	  <[],Code,St> when 'true' ->
	      {'ok',Code,St}
	  ( <_35,_34,_33> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_35,_34,_33})
		  -| [{'function_name',{'foldl_core_transforms',3}}] )
	    -| ['compiler_generated'] )
	end
'get_module'/1 =
    %% Line 1103
    fun (_0) ->
	case _0 of
	  <[{'attribute',_2,'module',M}|_3]> when 'true' ->
	      M
	  %% Line 1104
	  <[_4|Rest]> when 'true' ->
	      %% Line 1105
	      apply 'get_module'/1
		  (Rest)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'get_module',1}}] )
	    -| ['compiler_generated'] )
	end
'add_default_base'/2 =
    %% Line 1110
    fun (_1,_0) ->
	%% Line 1111
	( case _1 of
	    ( <( {'compile',_rec122,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24}
		 -| ['compiler_generated'] )> when 'true' ->
		  %% Line 1112
		  case _rec122 of
		    %% Line 1113
		    <[]> when 'true' ->
			let <M> =
			    apply %% Line 1114
				  'get_module'/1
				(_0)
			in  let <_rec123> =
				call %% Line 1115
				     'erlang':%% Line 1115
					      'atom_to_list'
				    (%% Line 1115
				     M)
			    in  %% Line 1115
				call 'erlang':'setelement'
				    (4, _1, _rec123)
		    %% Line 1116
		    <_41> when 'true' ->
			_1
		  end
	      -| ['compiler_generated'] )
	    ( <_25> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'lint_module'/2 =
    %% Line 1120
    fun (_1,_0) ->
	%% Line 1121
	( case _0 of
	    ( <( {'compile',_26,_27,_28,_rec125,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'erl_lint':'module'
			   (_1, _rec125, _33) of
		    %% Line 1122
		    <{'ok',Ws}> when 'true' ->
			let <St1> =
			    apply %% Line 1125
				  'add_default_base'/2
				(_0, _1)
			in  %% Line 1126
			    ( case St1 of
				( <( {'compile',_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_rec129,_66}
				     -| ['compiler_generated'] )> when 'true' ->
				      let <_rec127> =
					  call 'erlang':'++'
					      (_rec129, Ws)
				      in  let <_12> =
					      call 'erlang':'setelement'
						  (14, St1, _rec127)
					  in  {'ok',_1,_12}
				  -| ['compiler_generated'] )
				( <_67> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {'badrecord','compile'}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			      -| ['compiler_generated'] )
		    %% Line 1127
		    <{'error',Es,Ws}> when 'true' ->
			let <_rec130> =
			    call %% Line 1128
				 'erlang':%% Line 1128
					  '++'
				(_37, %% Line 1128
				      Ws)
			in  let <_rec131> =
				call %% Line 1129
				     'erlang':%% Line 1129
					      '++'
				    (_36, %% Line 1129
					  Es)
			    in  let <_20> =
				    call %% Line 1128
					 'erlang':%% Line 1128
						  'setelement'
					(%% Line 1128
					 14, _0, %% Line 1128
						 _rec130)
				in  let <_22> =
					call %% Line 1129
					     'erlang':%% Line 1129
						      'setelement'
					    (%% Line 1129
					     13, _20, %% Line 1129
						      _rec131)
				    in  %% Line 1128
					{'error',_22}
		    ( <_23> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_23})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_39> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'core_lint_module'/2 =
    %% Line 1132
    fun (_1,_0) ->
	%% Line 1133
	( case _0 of
	    ( <( {'compile',_23,_24,_25,_26,_27,_28,_29,_30,_rec135,_31,_32,_33,_34,_35}
		 -| ['compiler_generated'] )> when 'true' ->
		  case call 'core_lint':'module'
			   (_1, _rec135) of
		    %% Line 1134
		    <{'ok',Ws}> when 'true' ->
			let <_rec136> =
			    call %% Line 1135
				 'erlang':%% Line 1135
					  '++'
				(_34, %% Line 1135
				      Ws)
			in  let <_9> =
				call %% Line 1135
				     'erlang':%% Line 1135
					      'setelement'
				    (%% Line 1135
				     14, _0, %% Line 1135
					     _rec136)
			    in  %% Line 1135
				{'ok',_1,_9}
		    %% Line 1136
		    <{'error',Es,Ws}> when 'true' ->
			let <_rec139> =
			    call %% Line 1137
				 'erlang':%% Line 1137
					  '++'
				(_34, %% Line 1137
				      Ws)
			in  let <_rec140> =
				call %% Line 1138
				     'erlang':%% Line 1138
					      '++'
				    (_33, %% Line 1138
					  Es)
			    in  let <_17> =
				    call %% Line 1137
					 'erlang':%% Line 1137
						  'setelement'
					(%% Line 1137
					 14, _0, %% Line 1137
						 _rec139)
				in  let <_19> =
					call %% Line 1138
					     'erlang':%% Line 1138
						      'setelement'
					    (%% Line 1138
					     13, _17, %% Line 1138
						      _rec140)
				    in  %% Line 1137
					{'error',_19}
		    ( <_20> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_20})
		      -| ['compiler_generated'] )
		  end
	      -| ['compiler_generated'] )
	    ( <_36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'makedep_and_output'/2 =
    %% Line 1142
    fun (_1,_0) ->
	%% Line 1143
	case apply 'makedep'/2
		 (_1, _0) of
	  <{'ok',DepCode,St1}> when 'true' ->
	      %% Line 1144
	      case apply 'makedep_output'/2
		       (DepCode, St1) of
		%% Line 1145
		<{'ok',_X_IgnoreCode,St2}> when 'true' ->
		    %% Line 1146
		    {'ok',_1,St2}
		%% Line 1147
		<_@r0 = {'error',St2}> when 'true' ->
		    %% Line 1148
		    _@r0
		( <_3> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_3})
		  -| ['compiler_generated'] )
	      end
	  ( <_2> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_2})
	    -| ['compiler_generated'] )
	end
'makedep'/2 =
    %% Line 1151
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_20,_21,_22,Ifile,Ofile,_23,_24,_25,Opts,_26,_27,_28,_29,_30}> when 'true' ->
	      let <_3> =
		  case %% Line 1155
		       call 'proplists':'get_value'
			   ('makedep_target', Opts) of
		    %% Line 1156
		    <'undefined'> when 'true' ->
			%% Line 1160
			apply 'shorten_filename'/1
			    (Ofile)
		    %% Line 1161
		    <T> when 'true' ->
			%% Line 1163
			T
		  end
	      in  let <_9> =
		      case %% Line 1167
			   call 'proplists':'get_value'
			       ('makedep_quote_target', Opts) of
			%% Line 1168
			<'true'> when 'true' ->
			    let <Fun> =
				fun (_5) ->
				    %% Line 1170
				    case _5 of
				      %% Line 1171
				      <36> when 'true' ->
					  [36|[36]]
				      %% Line 1172
				      <C> when 'true' ->
					  C
				    end
			    in  %% Line 1174
				call 'lists':'map'
				    (Fun, _3)
			%% Line 1175
			<_31> when 'true' ->
			    _3
		      end
		  in  let <Target> =
			  call %% Line 1178
			       'erlang':%% Line 1178
					'++'
			      (_9, %% Line 1178
				   [58])
		      in  let <_12> =
			      call %% Line 1185
				   'erlang':%% Line 1185
					    'length'
				  (%% Line 1185
				   Target)
			  in  %% Line 1181
			      case apply 'makedep_add_headers'/7
				       (%% Line 1182
					Ifile, %% Line 1183
					       Code0, %% Line 1184
						      [], _12, %% Line 1186
							       Target, %% Line 1187
								       [], %% Line 1188
									   Opts) of
				<{MainRule,PhonyRules}> when 'true' ->
				    let <_15> =
					case %% Line 1199
					     call 'proplists':'get_value'
						 ('makedep_phony', Opts) of
					  %% Line 1200
					  <'true'> when 'true' ->
					      call 'erlang':'++'
						  (MainRule, PhonyRules)
					  %% Line 1201
					  <_32> when 'true' ->
					      MainRule
					end
				    in  let <Code> =
					    call %% Line 1203
						 'erlang':%% Line 1203
							  'iolist_to_binary'
						(%% Line 1203
						 [_15|[[10]]])
					in  %% Line 1204
					    {'ok',Code,St}
				( <_13> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_13})
				  -| ['compiler_generated'] )
			      end
	  ( <_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18})
		  -| [{'function_name',{'makedep',2}}] )
	    -| ['compiler_generated'] )
	end
'makedep_add_headers'/7 =
    %% Line 1206
    fun (_6,_5,_4,_3,_2,_1,_0) ->
	case <_6,_5,_4,_3,_2,_1,_0> of
	  <Ifile,[{'attribute',_17,'file',{File,_18}}|Rest],%% Line 1207
							    Included,%% Line 1207
								     LineLen,%% Line 1207
									     MainTarget,%% Line 1207
											Phony,%% Line 1207
											      Opts> when 'true' ->
	      %% Line 1209
	      case %% Line 1210
		   apply 'makedep_add_header'/6
		       (Ifile, Included, LineLen, MainTarget, Phony, File) of
		<{Included1,LineLen1,MainTarget1,Phony1}> when 'true' ->
		    %% Line 1211
		    apply 'makedep_add_headers'/7
			(Ifile, Rest, Included1, LineLen1, %% Line 1212
							   MainTarget1, %% Line 1212
									Phony1, %% Line 1212
										Opts)
		( <_7> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_7})
		  -| ['compiler_generated'] )
	      end
	  %% Line 1213
	  <Ifile,[{'error',{_19,'epp',{'include','file',File}}}|Rest],%% Line 1214
								      Included,%% Line 1214
									       LineLen,%% Line 1214
										       MainTarget,%% Line 1214
												  Phony,%% Line 1214
													Opts> when 'true' ->
	      %% Line 1216
	      case call 'proplists':'get_value'
		       ('makedep_add_missing', Opts) of
		%% Line 1217
		<'true'> when 'true' ->
		    %% Line 1218
		    case %% Line 1219
			 apply 'makedep_add_header'/6
			     (Ifile, Included, LineLen, MainTarget, %% Line 1220
								    Phony, %% Line 1220
									   File) of
		      <{Included1,LineLen1,MainTarget1,Phony1}> when 'true' ->
			  %% Line 1221
			  apply 'makedep_add_headers'/7
			      (Ifile, Rest, Included1, LineLen1, %% Line 1222
								 MainTarget1, %% Line 1222
									      Phony1, %% Line 1222
										      Opts)
		      ( <_8> when 'true' ->
			    primop 'match_fail'
				({'badmatch',_8})
			-| ['compiler_generated'] )
		    end
		%% Line 1223
		<_20> when 'true' ->
		    %% Line 1224
		    apply 'makedep_add_headers'/7
			(Ifile, Rest, Included, LineLen, %% Line 1225
							 MainTarget, %% Line 1225
								     Phony, %% Line 1225
									    Opts)
	      end
	  %% Line 1227
	  <Ifile,[_21|Rest],Included,LineLen,%% Line 1228
					     MainTarget,%% Line 1228
							Phony,%% Line 1228
							      Opts> when 'true' ->
	      %% Line 1229
	      apply 'makedep_add_headers'/7
		  (Ifile, Rest, Included, %% Line 1230
					  LineLen, %% Line 1230
						   MainTarget, %% Line 1230
							       Phony, %% Line 1230
								      Opts)
	  %% Line 1231
	  <_X_Ifile,[],_X_Included,_X_LineLen,%% Line 1232
					      MainTarget,%% Line 1232
							 Phony,%% Line 1232
							       _X_Opts> when 'true' ->
	      %% Line 1233
	      {MainTarget,Phony}
	  ( <_16,_15,_14,_13,_12,_11,_10> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15,_14,_13,_12,_11,_10})
		  -| [{'function_name',{'makedep_add_headers',7}}] )
	    -| ['compiler_generated'] )
	end
'makedep_add_header'/6 =
    %% Line 1235
    fun (_5,_4,_3,_2,_1,_0) ->
	%% Line 1236
	case call 'lists':'member'
		 (_0, _4) of
	  %% Line 1237
	  <'true'> when 'true' ->
	      %% Line 1239
	      {_4,_3,_2,_1}
	  %% Line 1240
	  <'false'> when 'true' ->
	      let <Included1> =
		  [_0|_4]
	      in  let <_8> =
		      case _0 of
			%% Line 1245
			<[46|[47|File0]]> when 'true' ->
			    File0
			%% Line 1246
			<_34> when 'true' ->
			    _0
		      end
		  in  let <_13> =
			  case _0 of
			    %% Line 1251
			    <_35>
				when call 'erlang':'=:='
				      (_0,
				       _5) ->
				_1
			    %% Line 1252
			    <_36> when 'true' ->
				let <_10> =
				    call 'erlang':'++'
					(_8, [58])
				in  let <_11> =
					[10|[10|_10]]
				    in  call 'erlang':'++'
					    (_1, _11)
			  end
		      in  %% Line 1257
			  case <> of
			    %% Line 1258
			    <>
				when try
				      let <_16> =
					  call 'erlang':'+'
					      (_3, 1)
				      in  let <_15> =
					      call 'erlang':'length'
						  (_8)
					  in  let <_17> =
						  call 'erlang':'+'
						      (_16, _15)
					      in  call 'erlang':'>'
						      (_17, 76)
				  of <Try> ->
				      Try
				  catch <T,R> ->
				      'false' ->
				let <_18> =
				    call %% Line 1259
					 'erlang':%% Line 1259
						  'length'
					(_8)
				in  let <LineLen1> =
					call %% Line 1259
					     'erlang':%% Line 1259
						      '+'
					    (%% Line 1259
					     2, _18)
				    in  let <_20> =
					    call %% Line 1260
						 'erlang':%% Line 1260
							  '++'
						(%% Line 1260
						 [32|[92|[10|[32|[32]]]]], _8)
					in  let <MainTarget1> =
						call %% Line 1260
						     'erlang':%% Line 1260
							      '++'
						    (_2, _20)
					    in  %% Line 1261
						{Included1,LineLen1,MainTarget1,_13}
			    %% Line 1262
			    <> when 'true' ->
				let <_23> =
				    call %% Line 1263
					 'erlang':%% Line 1263
						  '+'
					(_3, %% Line 1263
					     1)
				in  let <_22> =
					call %% Line 1263
					     'erlang':%% Line 1263
						      'length'
					    (_8)
				    in  let <LineLen1> =
					    call %% Line 1263
						 'erlang':%% Line 1263
							  '+'
						(_23, _22)
					in  let <_25> =
						[32|_8]
					    in  let <MainTarget1> =
						    call %% Line 1264
							 'erlang':%% Line 1264
								  '++'
							(_2, _25)
						in  %% Line 1265
						    {Included1,LineLen1,MainTarget1,_13}
			  end
	  ( <_27> when 'true' ->
		primop 'match_fail'
		    ({'case_clause',_27})
	    -| ['compiler_generated'] )
	end
'makedep_output'/2 =
    %% Line 1269
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code,St = {'compile',_48,_49,_50,_51,Ofile,_52,_53,_54,Opts,_55,_56,_57,_58,_59}> when 'true' ->
	      let <_4> =
		  case %% Line 1273
		       call 'proplists':'get_value'
			   ('makedep_output', Opts) of
		    %% Line 1274
		    <'undefined'> when 'true' ->
			let <_2> =
			    call %% Line 1276
				 'filename':%% Line 1276
					    'basename'
				(%% Line 1276
				 Ofile, %% Line 1276
					[46|[98|[101|[97|[109]]]]])
			in  %% Line 1276
			    apply 'outfile'/3
				(_2, [80|[98|[101|[97|[109]]]]], Opts)
		    %% Line 1277
		    <O> when 'true' ->
			%% Line 1278
			O
		  end
	      in  let <_197,_198,_199> =
		      case _4 of
			%% Line 1285
			<_60>
			    when call 'erlang':'is_list'
				  (_4) ->
			    %% Line 1286
			    case call 'file':'delete'
				     (_4) of
			      %% Line 1287
			      <Ret2>
				  when let <_6> =
					call 'erlang':'=:='
					    (Ret2, 'ok')
				    in  let <_7> =
					    call 'erlang':'=:='
						(Ret2, {'error','enoent'})
					in  call 'erlang':'or'
						(_6, _7) ->
				  %% Line 1288
				  case call 'file':'open'
					   (_4, ['write']) of
				    %% Line 1289
				    <{'ok',IODev}> when 'true' ->
					%% Line 1290
					<'ok',IODev,'true'>
				    %% Line 1291
				    <{'error',Reason2}> when 'true' ->
					%% Line 1292
					<'error','open',Reason2>
				    ( <_8> when 'true' ->
					  primop 'match_fail'
					      ({'case_clause',_8})
				      -| ['compiler_generated'] )
				  end
			      %% Line 1294
			      <{'error',Reason1}> when 'true' ->
				  %% Line 1295
				  <'error','delete',Reason1>
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_9})
				-| ['compiler_generated'] )
			    end
			%% Line 1297
			<_61> when 'true' ->
			    %% Line 1298
			    <'ok',_4,'false'>
		      end
		  in  %% Line 1301
		      case ( <( _197
				-| ['compiler_generated'] ),( _198
							      -| ['compiler_generated'] ),( _199
											    -| ['compiler_generated'] )>
			     -| ['compiler_generated'] ) of
			%% Line 1302
			<( 'ok'
			   -| ['compiler_generated'] ),Output1,CloseOutput> when 'true' ->
			    %% Line 1303
			    try
				do  %% Line 1305
				    call 'io':'fwrite'
					(Output1, [126|[116|[115]]], [Code|[]])
				    do  %% Line 1307
					case <> of
					  %% Line 1308
					  <>
					      when ( call 'erlang':'=:='
						      (CloseOutput,
						       'true')
						  -| ['compiler_generated'] ) ->
					      case call 'file':'close'
						       (Output1) of
						<'ok'> when 'true' ->
						    'ok'
						( <_13> when 'true' ->
						      primop 'match_fail'
							  ({'badmatch',_13})
						  -| ['compiler_generated'] )
					      end
					  %% Line 1309
					  <> when 'true' ->
					      'ok'
					end
					%% Line 1311
					{'ok',Code,St}
			    of <_14> ->
				_14
			    catch <_17,_16,_15> ->
				%% Line 1313
				case <_17,_16,_15> of
				  <( 'error'
				     -| ['compiler_generated'] ),_63,_64> when 'true' ->
				      let <Err> =
					  {_51,%% Line 1315
					       [{'none','compile','write_error'}]}
				      in  let <_rec145> =
					      call %% Line 1316
						   'erlang':%% Line 1316
							    '++'
						  (_57, %% Line 1316
							[Err|[]])
					  in  let <_26> =
						  call %% Line 1316
						       'erlang':%% Line 1316
								'setelement'
						      (%% Line 1316
						       13, %% Line 1316
							   St, %% Line 1316
							       _rec145)
					      in  %% Line 1316
						  {'error',_26}
				  ( <_194,_195,_196> when 'true' ->
					primop 'raise'
					    (_196, _195)
				    -| ['compiler_generated'] )
				end
			%% Line 1318
			<( 'error'
			   -| ['compiler_generated'] ),( 'open'
							 -| ['compiler_generated'] ),Reason> when 'true' ->
			    let <Err> =
				{_51,%% Line 1320
				     [{'none','compile',{'open',Reason}}|[]]}
			    in  let <_rec149> =
				    call %% Line 1321
					 'erlang':%% Line 1321
						  '++'
					(_57, %% Line 1321
					      [Err|[]])
				in  let <_35> =
					call %% Line 1321
					     'erlang':%% Line 1321
						      'setelement'
					    (%% Line 1321
					     13, %% Line 1321
						 St, %% Line 1321
						     _rec149)
				    in  %% Line 1321
					{'error',_35}
			%% Line 1322
			<( 'error'
			   -| ['compiler_generated'] ),( 'delete'
							 -| ['compiler_generated'] ),Reason> when 'true' ->
			    let <Err> =
				{_51,%% Line 1324
				     [{'none','compile',{'delete',_4,Reason}}|[]]}
			    in  let <_rec153> =
				    call %% Line 1325
					 'erlang':%% Line 1325
						  '++'
					(_57, %% Line 1325
					      [Err|[]])
				in  let <_44> =
					call %% Line 1325
					     'erlang':%% Line 1325
						      'setelement'
					    (%% Line 1325
					     13, %% Line 1325
						 St, %% Line 1325
						     _rec153)
				    in  %% Line 1325
					{'error',_44}
			( <( _200
			     -| ['compiler_generated'] ),( _201
							   -| ['compiler_generated'] ),( _202
											 -| ['compiler_generated'] )> when 'true' ->
			      let <_45> = {( _200
				     -| ['compiler_generated'] ),( _201
								   -| ['compiler_generated'] ),( _202
												 -| ['compiler_generated'] )}
			      in  primop 'match_fail'
				      ({'case_clause',_45})
			  -| ['compiler_generated'] )
		      end
	  ( <_47,_46> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_47,_46})
		  -| [{'function_name',{'makedep_output',2}}] )
	    -| ['compiler_generated'] )
	end
'expand_records'/2 =
    %% Line 1328
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_5,_6,_7,_8,_9,_10,_11,_12,Opts,_13,_14,_15,_16,_17}> when 'true' ->
	      let <Code> =
		  call %% Line 1329
		       'erl_expand_records':%% Line 1329
					    'module'
		      (%% Line 1329
		       Code0, %% Line 1329
			      Opts)
	      in  %% Line 1330
		  {'ok',Code,St}
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'expand_records',2}}] )
	    -| ['compiler_generated'] )
	end
'core'/2 =
    %% Line 1332
    fun (_1,_0) ->
	case <_1,_0> of
	  <Forms,St = {'compile',_22,_23,_24,_25,_26,_27,_28,_29,Opts0,_30,_31,_32,_33,_34}> when 'true' ->
	      let <_6> =
		  letrec
		      'lc$^0'/1 =
			  %% Line 1333
			  fun (_4) ->
			      case _4 of
				<[{'attribute',_35,'compile',C}|_3]> when 'true' ->
				    let <_5> =
					apply 'lc$^0'/1
					    (_3)
				    in  ( [C|_5]
					  -| ['compiler_generated'] )
				( <[_2|_3]> when 'true' ->
				      apply 'lc$^0'/1
					  (_3)
				  -| ['compiler_generated'] )
				<[]> when 'true' ->
				    Opts0
				( <_65> when 'true' ->
				      ( primop 'match_fail'
					    ({'function_clause',_65})
					-| [{'function_name',{'lc$^0',1}}] )
				  -| ['compiler_generated'] )
			      end
		  in  %% Line 1333
		      apply 'lc$^0'/1
			  (Forms)
	      in  let <Opts1> =
		      call %% Line 1333
			   'lists':%% Line 1333
				   'flatten'
			  (_6)
		  in  let <Opts> =
			  apply %% Line 1334
				'expand_opts'/1
			      (%% Line 1334
			       Opts1)
		      in  %% Line 1335
			  case call 'v3_core':'module'
				   (Forms, Opts) of
			    <{'ok',Core,Ws}> when 'true' ->
				let <_10> =
				    call %% Line 1336
					 'cerl':%% Line 1336
						'module_name'
					(%% Line 1336
					 Core)
				in  let <Mod> =
					call %% Line 1336
					     'cerl':%% Line 1336
						    'concrete'
					    (_10)
				    in  let <_rec156> =
					    call %% Line 1338
						 'erlang':%% Line 1338
							  '++'
						(_33, %% Line 1338
						      Ws)
					in  let <_16> =
						call %% Line 1338
						     'erlang':%% Line 1338
							      'setelement'
						    (%% Line 1338
						     14, %% Line 1337
							 St, %% Line 1338
							     _rec156)
					    in  let <_17> =
						    call %% Line 1337
							 'erlang':%% Line 1337
								  'setelement'
							(%% Line 1337
							 10, _16, %% Line 1337
								  Opts)
						in  let <_19> =
							call %% Line 1337
							     'erlang':%% Line 1337
								      'setelement'
							    (%% Line 1337
							     7, _17, %% Line 1337
								     Mod)
						    in  %% Line 1337
							{'ok',Core,_19}
			    ( <_9> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_9})
			      -| ['compiler_generated'] )
			  end
	  ( <_21,_20> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20})
		  -| [{'function_name',{'core',2}}] )
	    -| ['compiler_generated'] )
	end
'core_fold_module_after_inlining'/2 =
    %% Line 1340
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_5,_6,_7,_8,_9,_10,_11,_12,Opts,_13,_14,_15,_16,_17}> when 'true' ->
	      %% Line 1343
	      case call 'sys_core_fold':'module'
		       (Code0, Opts) of
		<{'ok',Code,_X_Ws}> when 'true' ->
		    %% Line 1344
		    {'ok',Code,St}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'core_fold_module_after_inlining',2}}] )
	    -| ['compiler_generated'] )
	end
'v3_kernel'/2 =
    %% Line 1346
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_13,_14,_15,_16,_17,_18,_19,_20,Opts,_21,_22,_23,Ws0,_24}> when 'true' ->
	      %% Line 1347
	      case call 'v3_kernel':'module'
		       (Code0, Opts) of
		<{'ok',Code,Ws}> when 'true' ->
		    let <_5> =
			case <> of
			  %% Line 1348
			  ( <>
				when call 'erlang':'=:='
				      (Ws,
				       []) ->
				'true'
			    -| ['compiler_generated'] )
			  %% Line 1348
			  ( <> when 'true' ->
				apply 'test_core_inliner'/1
				    (St)
			    -| ['compiler_generated'] )
			end
		    in  %% Line 1348
			case _5 of
			  %% Line 1349
			  <'false'> when 'true' ->
			      let <_rec159> =
				  call %% Line 1350
				       'erlang':%% Line 1350
						'++'
				      (%% Line 1350
				       Ws0, %% Line 1350
					    Ws)
			      in  let <_9> =
				      call %% Line 1350
					   'erlang':%% Line 1350
						    'setelement'
					  (%% Line 1350
					   14, %% Line 1350
					       St, %% Line 1350
						   _rec159)
				  in  %% Line 1350
				      {'ok',Code,_9}
			  %% Line 1351
			  <'true'> when 'true' ->
			      %% Line 1354
			      {'ok',Code,St}
			  ( <_10> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_10})
			    -| ['compiler_generated'] )
			end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'v3_kernel',2}}] )
	    -| ['compiler_generated'] )
	end
'block2'/2 =
    %% Line 1357
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_5,_6,_7,_8,_9,_10,_11,_12,Opts,_13,_14,_15,_16,_17}> when 'true' ->
	      %% Line 1358
	      case call 'beam_block':'module'
		       (Code0, ['no_blockify'|Opts]) of
		<{'ok',Code}> when 'true' ->
		    %% Line 1359
		    {'ok',Code,St}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'block2',2}}] )
	    -| ['compiler_generated'] )
	end
'test_old_inliner'/1 =
    %% Line 1361
    fun (_0) ->
	case _0 of
	  <{'compile',_5,_6,_7,_8,_9,_10,_11,_12,Opts,_13,_14,_15,_16,_17}> when 'true' ->
	      let <_3> =
		  fun (_1) ->
		      %% Line 1364
		      case _1 of
			<{'inline',_18}> when 'true' ->
			    'true'
			%% Line 1365
			<_19> when 'true' ->
			    'false'
		      end
	      in  %% Line 1364
		  call 'lists':'any'
		      (_3, %% Line 1366
			   Opts)
	  ( <_4> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4})
		  -| [{'function_name',{'test_old_inliner',1}}] )
	    -| ['compiler_generated'] )
	end
'test_core_inliner'/1 =
    %% Line 1368
    fun (_0) ->
	case _0 of
	  <{'compile',_9,_10,_11,_12,_13,_14,_15,_16,Opts,_17,_18,_19,_20,_21}> when 'true' ->
	      let <_3> =
		  fun (_1) ->
		      %% Line 1369
		      case _1 of
			<'no_inline'> when 'true' ->
			    'true'
			%% Line 1370
			<_22> when 'true' ->
			    'false'
		      end
	      in  %% Line 1369
		  case call 'lists':'any'
			   (_3, %% Line 1371
				Opts) of
		    %% Line 1372
		    <'true'> when 'true' ->
			'false'
		    %% Line 1373
		    <'false'> when 'true' ->
			let <_6> =
			    fun (_4) ->
				%% Line 1374
				case _4 of
				  <'inline'> when 'true' ->
				      'true'
				  %% Line 1375
				  <_23> when 'true' ->
				      'false'
				end
			in  %% Line 1374
			    call 'lists':'any'
				(_6, %% Line 1376
				     Opts)
		    ( <_7> when 'true' ->
			  primop 'match_fail'
			      ({'case_clause',_7})
		      -| ['compiler_generated'] )
		  end
	  ( <_8> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8})
		  -| [{'function_name',{'test_core_inliner',1}}] )
	    -| ['compiler_generated'] )
	end
'test_any_inliner'/1 =
    %% Line 1379
    fun (_0) ->
	%% Line 1380
	( case apply 'test_old_inliner'/1
		   (_0) of
	    ( <( 'true'
		 -| ['compiler_generated'] )> when 'true' ->
		  'true'
	      -| ['compiler_generated'] )
	    ( <( 'false'
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'test_core_inliner'/1
		      (_0)
	      -| ['compiler_generated'] )
	    ( <_1> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {( 'badarg'
			      -| ['compiler_generated'] ),_1}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'core_old_inliner'/2 =
    %% Line 1382
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_5,_6,_7,_8,_9,_10,_11,_12,Opts,_13,_14,_15,_16,_17}> when 'true' ->
	      %% Line 1383
	      case call 'sys_core_inline':'module'
		       (Code0, Opts) of
		<{'ok',Code}> when 'true' ->
		    %% Line 1384
		    {'ok',Code,St}
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'core_old_inliner',2}}] )
	    -| ['compiler_generated'] )
	end
'core_inline_module'/2 =
    %% Line 1386
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_5,_6,_7,_8,_9,_10,_11,_12,Opts,_13,_14,_15,_16,_17}> when 'true' ->
	      let <Code> =
		  call %% Line 1387
		       'cerl_inline':%% Line 1387
				     'core_transform'
		      (%% Line 1387
		       Code0, %% Line 1387
			      Opts)
	      in  %% Line 1388
		  {'ok',Code,St}
	  ( <_4,_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_4,_3})
		  -| [{'function_name',{'core_inline_module',2}}] )
	    -| ['compiler_generated'] )
	end
'save_abstract_code'/2 =
    %% Line 1390
    fun (_1,_0) ->
	let <_rec161> =
	    call %% Line 1391
		 'erl_parse':%% Line 1391
			     'anno_to_term'
		(_1)
	in  %% Line 1391
	    case _0 of
	      <{'compile',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21}> when 'true' ->
		  let <_5> =
		      call 'erlang':'setelement'
			  (9, _0, _rec161)
		  in  {'ok',_1,_5}
	      ( <_22> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','compile'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'debug_info'/1 =
    %% Line 1393
    fun (_0) ->
	case _0 of
	  <{'compile',_12,_13,_14,_15,OFile,Module,_16,Abst,_17,Opts0,_18,_19,_20,_21}> when 'true' ->
	      let <AbstOpts> =
		  apply %% Line 1394
			'cleanup_compile_options'/1
		      (%% Line 1394
		       Opts0)
	      in  let <Opts1> =
		      call %% Line 1395
			   'proplists':%% Line 1395
				       'delete'
			  (%% Line 1395
			   'debug_info', %% Line 1395
					 Opts0)
		  in  let <_23,_24,_25> =
			  case %% Line 1397
			       call 'proplists':'get_value'
				   ('debug_info', Opts0, 'false') of
			    %% Line 1398
			    <{OptBackend,OptMetadata}>
				when call 'erlang':'is_atom'
				      (OptBackend) ->
				<OptBackend,OptMetadata,Opts1>
			    %% Line 1399
			    <'false'> when 'true' ->
				<'erl_abstract_code',{'none',AbstOpts},Opts1>
			    %% Line 1400
			    <'true'> when 'true' ->
				<'erl_abstract_code',{Abst,AbstOpts},['debug_info'|Opts1]>
			    ( <_3> when 'true' ->
				  %% Line 1397
				  primop 'match_fail'
				      ({'case_clause',_3})
			      -| ['compiler_generated'] )
			  end
		      in  let <DebugInfo> =
			      call %% Line 1402
				   'erlang':%% Line 1402
					    'term_to_binary'
				  (%% Line 1402
				   {'debug_info_v1',( _23
						      -| ['compiler_generated'] ),( _24
										    -| ['compiler_generated'] )}, %% Line 1402
														  ['compressed'])
			  in  %% Line 1404
			      case call 'lists':'member'
				       ('encrypt_debug_info', ( _25
								-| ['compiler_generated'] )) of
				%% Line 1405
				<'true'> when 'true' ->
				    %% Line 1406
				    case call 'lists':'keytake'
					     ('debug_info_key', 1, ( _25
								     -| ['compiler_generated'] )) of
				      %% Line 1407
				      <{'value',{_22,Key},Opts3}> when 'true' ->
					  %% Line 1408
					  apply 'encrypt_debug_info'/3
					      (DebugInfo, Key, [{'debug_info_key','********'}|Opts3])
				      %% Line 1409
				      <'false'> when 'true' ->
					  let <Mode> =
					      call %% Line 1410
						   'proplists':%% Line 1410
							       'get_value'
						  (%% Line 1410
						   'crypto_mode', ( _25
								    -| ['compiler_generated'] ), %% Line 1410
												 'des3_cbc')
					  in  %% Line 1411
					      case call 'beam_lib':'get_crypto_key'
						       ({'debug_info',Mode,Module,OFile}) of
						%% Line 1412
						<'error'> when 'true' ->
						    %% Line 1413
						    {'error',[{'none','compile','no_crypto_key'}]}
						%% Line 1414
						<Key> when 'true' ->
						    %% Line 1415
						    apply 'encrypt_debug_info'/3
							(DebugInfo, {Mode,Key}, ( _25
										  -| ['compiler_generated'] ))
					      end
				      ( <_9> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_9})
					-| ['compiler_generated'] )
				    end
				%% Line 1418
				<'false'> when 'true' ->
				    %% Line 1419
				    {'ok',DebugInfo,( _25
						      -| ['compiler_generated'] )}
				( <_10> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_10})
				  -| ['compiler_generated'] )
			      end
	  ( <_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_11})
		  -| [{'function_name',{'debug_info',1}}] )
	    -| ['compiler_generated'] )
	end
'encrypt_debug_info'/3 =
    %% Line 1422
    fun (_2,_1,_0) ->
	%% Line 1423
	try
	    let <RealKey> =
		apply %% Line 1424
		      'generate_key'/1
		    (_1)
	    in  %% Line 1425
		case apply 'start_crypto'/0
			 () of
		  %% Line 1426
		  <'ok'> when 'true' ->
		      let <_4> =
			  apply 'encrypt'/2
			      (RealKey, _2)
		      in  {'ok',_4,_0}
		  %% Line 1427
		  <E = {'error',_13}> when 'true' ->
		      E
		  ( <_5> when 'true' ->
			primop 'match_fail'
			    ({'case_clause',_5})
		    -| ['compiler_generated'] )
		end
	of <_6> ->
	    _6
	catch <_9,_8,_7> ->
	    %% Line 1430
	    case <_9,_8,_7> of
	      <( 'error'
		 -| ['compiler_generated'] ),_14,_15> when 'true' ->
		  %% Line 1431
		  {'error',[{'none','compile','bad_crypto_key'}]}
	      ( <_16,_17,_18> when 'true' ->
		    primop 'raise'
			(_18, _17)
		-| ['compiler_generated'] )
	    end
'cleanup_compile_options'/1 =
    %% Line 1434
    fun (_0) ->
	%% Line 1435
	call 'lists':'filter'
	    (( 'keep_compile_option'/1
	       -| [{'id',{0,0,'-cleanup_compile_options/1-fun-0-'}}] ), _0)
'keep_compile_option'/1 =
    %% Line 1438
    fun (_0) ->
	case _0 of
	  <'from_asm'> when 'true' ->
	      'false'
	  %% Line 1439
	  <'from_core'> when 'true' ->
	      'false'
	  %% Line 1441
	  <{'parse_transform',_2}> when 'true' ->
	      'false'
	  %% Line 1442
	  <{'d',_3,_4}> when 'true' ->
	      'false'
	  %% Line 1444
	  <Option> when 'true' ->
	      apply 'effects_code_generation'/1
		  (Option)
	end
'start_crypto'/0 =
    %% Line 1446
    fun () ->
	%% Line 1447
	try
	    call 'crypto':'start'
		()
	of <_0> ->
	    case _0 of
	      %% Line 1448
	      <{'error',{'already_started','crypto'}}> when 'true' ->
		  'ok'
	      %% Line 1449
	      <'ok'> when 'true' ->
		  'ok'
	      ( <_1> when 'true' ->
		    primop 'match_fail'
			({'try_clause',_1})
		-| ['compiler_generated'] )
	    end
	catch <_4,_3,_2> ->
	    %% Line 1451
	    case <_4,_3,_2> of
	      <( 'error'
		 -| ['compiler_generated'] ),_5,_6> when 'true' ->
		  %% Line 1452
		  {'error',[{'none','compile','no_crypto'}]}
	      ( <_7,_8,_9> when 'true' ->
		    primop 'raise'
			(_9, _8)
		-| ['compiler_generated'] )
	    end
'generate_key'/1 =
    %% Line 1455
    fun (_0) ->
	case _0 of
	  <{Type,String}>
	      when let <_1> =
		    call 'erlang':'is_atom'
			(Type)
		in  let <_2> =
			call 'erlang':'is_list'
			    (String)
		    in  call 'erlang':'and'
			    (_1, _2) ->
	      %% Line 1456
	      call 'beam_lib':'make_crypto_key'
		  (Type, String)
	  %% Line 1457
	  <String>
	      when call 'erlang':'is_list'
		    (_0) ->
	      %% Line 1458
	      apply 'generate_key'/1
		  ({'des3_cbc',String})
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'generate_key',1}}] )
	    -| ['compiler_generated'] )
	end
'encrypt'/2 =
    %% Line 1460
    fun (_1,_0) ->
	case <_1,_0> of
	  <{Type = 'des3_cbc',Key,IVec,BlockSize},Bin0> when 'true' ->
	      let <_2> =
		  call %% Line 1461
		       'erlang':%% Line 1461
				'byte_size'
		      (%% Line 1461
		       Bin0)
	      in  let <_6> =
		      case %% Line 1461
			   call 'erlang':'rem'
			       (_2, BlockSize) of
			%% Line 1462
			<0> when 'true' ->
			    Bin0
			%% Line 1463
			<N> when 'true' ->
			    let <_3> =
				call 'erlang':'-'
				    (BlockSize, N)
			    in  let <_4> =
				    call 'crypto':'strong_rand_bytes'
					(_3)
				in  call 'erlang':'list_to_binary'
					([Bin0|[_4|[]]])
		      end
		  in  let <Bin> =
			  call %% Line 1465
			       'crypto':%% Line 1465
					'block_encrypt'
			      (%% Line 1465
			       Type, %% Line 1465
				     Key, %% Line 1465
					  IVec, _6)
		      in  let <TypeString> =
			      call %% Line 1466
				   'erlang':%% Line 1466
					    'atom_to_list'
				  (%% Line 1466
				   Type)
			  in  let <_10> =
				  call %% Line 1467
				       'erlang':%% Line 1467
						'length'
				      (%% Line 1467
				       TypeString)
			      in  %% Line 1467
				  call 'erlang':'list_to_binary'
				      ([0|[_10|[TypeString|[Bin|[]]]]])
	  ( <_12,_11> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_12,_11})
		  -| [{'function_name',{'encrypt',2}}] )
	    -| ['compiler_generated'] )
	end
'save_core_code'/2 =
    %% Line 1469
    fun (_1,_0) ->
	let <_rec163> =
	    call %% Line 1470
		 'cerl':%% Line 1470
			'from_records'
		(_1)
	in  %% Line 1470
	    case _0 of
	      <{'compile',_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21}> when 'true' ->
		  let <_5> =
		      call 'erlang':'setelement'
			  (8, _0, _rec163)
		  in  {'ok',_1,_5}
	      ( <_22> when 'true' ->
		    ( call ( 'erlang'
			     -| ['compiler_generated'] ):( 'error'
							   -| ['compiler_generated'] )
			  (( {'badrecord','compile'}
			     -| ['compiler_generated'] ))
		      -| ['compiler_generated'] )
		-| ['compiler_generated'] )
	    end
'beam_asm'/2 =
    %% Line 1472
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code0,St = {'compile',_24,_25,_26,File,_27,_28,_29,_30,CompilerOpts,_31,_32,_33,_34,ExtraChunks}> when 'true' ->
	      %% Line 1473
	      case apply 'debug_info'/1
		       (St) of
		%% Line 1474
		<{'ok',DebugInfo,Opts0}> when 'true' ->
		    let <_7> =
			letrec
			    'lc$^0'/1 =
				%% Line 1475
				fun (_4) ->
				    case _4 of
				      <[O|_3]> when 'true' ->
					  ( case apply 'effects_code_generation'/1
						     (O) of
					      <'true'> when 'true' ->
						  let <_5> =
						      apply 'lc$^0'/1
							  (_3)
						  in  ( [O|_5]
							-| ['compiler_generated'] )
					      ( <'false'> when 'true' ->
						    apply 'lc$^0'/1
							(_3)
						-| ['compiler_generated'] )
					      ( <_6> when 'true' ->
						    primop 'match_fail'
							({'case_clause',_6})
						-| ['compiler_generated'] )
					    end
					    -| ['list_comprehension'] )
				      <[]> when 'true' ->
					  []
				      ( <_79> when 'true' ->
					    ( primop 'match_fail'
						  ({'function_clause',_79})
					      -| [{'function_name',{'lc$^0',1}}] )
					-| ['compiler_generated'] )
				    end
			in  %% Line 1475
			    apply 'lc$^0'/1
				(Opts0)
		    in  let <Chunks> =
			    [%% Line 1476
			     {#{#<68>(8,1,'integer',['unsigned'|['big']]),
				#<98>(8,1,'integer',['unsigned'|['big']]),
				#<103>(8,1,'integer',['unsigned'|['big']]),
				#<105>(8,1,'integer',['unsigned'|['big']])}#,DebugInfo}|%% Line 1476
											ExtraChunks]
			in  let <CompileInfo> =
				apply %% Line 1477
				      'compile_info'/3
				    (%% Line 1477
				     File, %% Line 1477
					   CompilerOpts, _7)
			    in  %% Line 1478
				case call 'beam_asm':'module'
					 (Code0, Chunks, CompileInfo, CompilerOpts) of
				  <{'ok',Code}> when 'true' ->
				      let <_14> =
					  call %% Line 1479
					       'erlang':%% Line 1479
							'setelement'
					      (%% Line 1479
					       9, %% Line 1479
						  St, %% Line 1479
						      [])
				      in  %% Line 1479
					  {'ok',Code,_14}
				  ( <_11> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_11})
				    -| ['compiler_generated'] )
				end
		%% Line 1480
		<{'error',Es}> when 'true' ->
		    let <_rec166> =
			call %% Line 1481
			     'erlang':%% Line 1481
				      '++'
			    (_33, %% Line 1481
				  [{File,Es}|[]])
		    in  let <_20> =
			    call %% Line 1481
				 'erlang':%% Line 1481
					  'setelement'
				(%% Line 1481
				 13, %% Line 1481
				     St, %% Line 1481
					 _rec166)
			in  %% Line 1481
			    {'error',_20}
		( <_21> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_21})
		  -| ['compiler_generated'] )
	      end
	  ( <_23,_22> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_23,_22})
		  -| [{'function_name',{'beam_asm',2}}] )
	    -| ['compiler_generated'] )
	end
'compile_info'/3 =
    %% Line 1484
    fun (_2,_1,_0) ->
	let <IsSlim> =
	    call %% Line 1485
		 'lists':%% Line 1485
			 'member'
		(%% Line 1485
		 'slim', _1)
	in  let <IsDeterministic> =
		call %% Line 1486
		     'lists':%% Line 1486
			     'member'
		    (%% Line 1486
		     'deterministic', _1)
	    in  let <Info0> =
		    call %% Line 1487
			 'proplists':%% Line 1487
				     'get_value'
			(%% Line 1487
			 'compile_info', _0, %% Line 1487
					     [])
		in  let <_9> =
			case %% Line 1489
			     apply 'paranoid_absname'/1
				 (_2) of
			  %% Line 1490
			  <Source = [_18|_19]>
			      when let <_6> =
				    call 'erlang':'=:='
					(IsSlim, 'false')
				in  let <_7> =
					call 'erlang':'=:='
					    (IsDeterministic, 'false')
				    in  call 'erlang':'and'
					    (_6, _7) ->
			      %% Line 1491
			      [{'source',Source}|Info0]
			  %% Line 1492
			  <_20> when 'true' ->
			      %% Line 1493
			      Info0
			end
		    in  %% Line 1496
			case IsDeterministic of
			  %% Line 1497
			  <'false'> when 'true' ->
			      let <_11> =
				  call 'proplists':'delete'
				      ('compile_info', _0)
			      in  [{'options',_11}|_9]
			  %% Line 1498
			  <'true'> when 'true' ->
			      _9
			  ( <_12> when 'true' ->
				primop 'match_fail'
				    ({'case_clause',_12})
			    -| ['compiler_generated'] )
			end
'paranoid_absname'/1 =
    %% Line 1502
    fun (_0) ->
	case _0 of
	  <File = []> when 'true' ->
	      %% Line 1503
	      File
	  %% Line 1504
	  <File> when 'true' ->
	      %% Line 1505
	      case call 'file':'get_cwd'
		       () of
		%% Line 1506
		<{'ok',Cwd}> when 'true' ->
		    %% Line 1507
		    call 'filename':'absname'
			(File, Cwd)
		%% Line 1508
		<_3> when 'true' ->
		    %% Line 1509
		    File
	      end
	end
'test_native'/1 =
    %% Line 1512
    fun (_0) ->
	case _0 of
	  <{'compile',_2,_3,_4,_5,_6,_7,_8,_9,Opts,_10,_11,_12,_13,_14}> when 'true' ->
	      %% Line 1516
	      apply 'is_native_enabled'/1
		  (Opts)
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'test_native',1}}] )
	    -| ['compiler_generated'] )
	end
'is_native_enabled'/1 =
    %% Line 1518
    fun (_0) ->
	case _0 of
	  <['native'|_2]> when 'true' ->
	      'true'
	  %% Line 1519
	  <['no_native'|_3]> when 'true' ->
	      'false'
	  %% Line 1520
	  <[_4|Opts]> when 'true' ->
	      apply 'is_native_enabled'/1
		  (Opts)
	  %% Line 1521
	  <[]> when 'true' ->
	      'false'
	  ( <_1> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_1})
		  -| [{'function_name',{'is_native_enabled',1}}] )
	    -| ['compiler_generated'] )
	end
'native_compile'/2 =
    %% Line 1523
    fun (_1,_0) ->
	case <_1,_0> of
	  <'none',St> when 'true' ->
	      {'ok','none',St}
	  %% Line 1524
	  <Code,St> when 'true' ->
	      %% Line 1525
	      case call 'erlang':'system_info'
		       ('hipe_architecture') of
		%% Line 1526
		<'undefined'> when 'true' ->
		    %% Line 1527
		    ( case St of
			( <( {'compile',_14,_15,_16,_rec169,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26}
			     -| ['compiler_generated'] )> when 'true' ->
			      let <Ws> =
				  [{_rec169,[{'none','compile','no_native_support'}]}|[]]
			      in  let <_rec170> =
				      call %% Line 1528
					   'erlang':%% Line 1528
						    '++'
					  (_25, %% Line 1528
						Ws)
				  in  let <_10> =
					  call %% Line 1528
					       'erlang':%% Line 1528
							'setelement'
					      (%% Line 1528
					       14, %% Line 1528
						   St, %% Line 1528
						       _rec170)
				      in  %% Line 1528
					  {'ok',Code,_10}
			  -| ['compiler_generated'] )
			( <_27> when 'true' ->
			      ( call ( 'erlang'
				       -| ['compiler_generated'] ):( 'error'
								     -| ['compiler_generated'] )
				    (( {'badrecord','compile'}
				       -| ['compiler_generated'] ))
				-| ['compiler_generated'] )
			  -| ['compiler_generated'] )
		      end
		      -| ['compiler_generated'] )
		%% Line 1529
		<_57> when 'true' ->
		    %% Line 1530
		    apply 'native_compile_1'/2
			(Code, St)
	      end
	end
'native_compile_1'/2 =
    %% Line 1533
    fun (_1,_0) ->
	%% Line 1534
	( case _0 of
	    ( <( {'compile',_50,_51,_52,_53,_54,_55,_56,_57,_rec173,_58,_59,_60,_61,_62}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <IgnoreErrors> =
		      call %% Line 1535
			   'lists':%% Line 1535
				   'member'
			  (%% Line 1535
			   'ignore_native_errors', _rec173)
		  in  let <_7> =
			  case %% Line 1536
			       call 'lists':'keyfind'
				   ('hipe', 1, _rec173) of
			    %% Line 1537
			    <{'hipe',L}>
				when call 'erlang':'is_list'
				      (L) ->
				L
			    %% Line 1538
			    <{'hipe',X}> when 'true' ->
				[X|[]]
			    %% Line 1539
			    <_64> when 'true' ->
				[]
			  end
		      in  %% Line 1541
			  try
			      call 'hipe':'compile'
				  (_55, _56, _1, _7)
			  of <_13> ->
			      case _13 of
				%% Line 1545
				<{'ok',T = {_X_Type,Bin}}>
				    when call 'erlang':'is_binary'
					  (Bin) ->
				    let <_14> =
					apply %% Line 1546
					      'embed_native_code'/2
					    (_1, %% Line 1546
						 T)
				    in  %% Line 1546
					{'ok',_14,_0}
				%% Line 1547
				<{'error',R}> when 'true' ->
				    %% Line 1548
				    case IgnoreErrors of
				      %% Line 1549
				      <'true'> when 'true' ->
					  let <Ws> =
					      [%% Line 1550
					       {_53,[{'none','compile',{'native',R}}|[]]}|%% Line 1550
											  []]
					  in  let <_rec177> =
						  call %% Line 1551
						       'erlang':%% Line 1551
								'++'
						      (_61, %% Line 1551
							    Ws)
					      in  let <_23> =
						      call %% Line 1551
							   'erlang':%% Line 1551
								    'setelement'
							  (%% Line 1551
							   14, _0, %% Line 1551
								   _rec177)
						  in  %% Line 1551
						      {'ok',_23}
				      %% Line 1552
				      <'false'> when 'true' ->
					  let <Es> =
					      [%% Line 1553
					       {_53,[{'none','compile',{'native',R}}|[]]}|%% Line 1553
											  []]
					  in  let <_rec181> =
						  call %% Line 1554
						       'erlang':%% Line 1554
								'++'
						      (_60, %% Line 1554
							    Es)
					      in  let <_32> =
						      call %% Line 1554
							   'erlang':%% Line 1554
								    'setelement'
							  (%% Line 1554
							   13, _0, %% Line 1554
								   _rec181)
						  in  %% Line 1554
						      {'error',_32}
				      ( <_33> when 'true' ->
					    primop 'match_fail'
						({'case_clause',_33})
					-| ['compiler_generated'] )
				    end
				( <_34> when 'true' ->
				      primop 'match_fail'
					  ({'try_clause',_34})
				  -| ['compiler_generated'] )
			      end
			  catch <_37,_36,_35> ->
			      %% Line 1558
			      case IgnoreErrors of
				%% Line 1559
				<'true'> when 'true' ->
				    let <Stack> =
					primop 'build_stacktrace'
					    (_35)
				    in  let <Ws> =
					    [%% Line 1560
					     {_53,%% Line 1561
						  [{'none','compile',{'native_crash',_36,Stack}}|[]]}|%% Line 1561
												      []]
					in  let <_rec185> =
						call %% Line 1562
						     'erlang':%% Line 1562
							      '++'
						    (_61, %% Line 1562
							  Ws)
					    in  let <_46> =
						    call %% Line 1562
							 'erlang':%% Line 1562
								  'setelement'
							(%% Line 1562
							 14, _0, %% Line 1562
								 _rec185)
						in  %% Line 1562
						    {'ok',_46}
				%% Line 1563
				<'false'> when 'true' ->
				    primop 'raw_raise'
					(_37, _36, _35)
				( <_47> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_47})
				  -| ['compiler_generated'] )
			      end
	      -| ['compiler_generated'] )
	    ( <_63> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'embed_native_code'/2 =
    %% Line 1568
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code,{Architecture,NativeCode}> when 'true' ->
	      %% Line 1569
	      case call 'beam_lib':'all_chunks'
		       (Code) of
		<{'ok',_9,Chunks0}> when 'true' ->
		    let <ChunkName> =
			call %% Line 1570
			     'hipe_unified_loader':%% Line 1570
						   'chunk_name'
			    (%% Line 1570
			     Architecture)
		    in  let <Chunks1> =
			    call %% Line 1571
				 'lists':%% Line 1571
					 'keydelete'
				(%% Line 1571
				 ChunkName, %% Line 1571
					    1, %% Line 1571
					       Chunks0)
			in  let <Chunks> =
				call %% Line 1572
				     'erlang':%% Line 1572
					      '++'
				    (%% Line 1572
				     Chunks1, %% Line 1572
					      [{ChunkName,NativeCode}|[]])
			    in  %% Line 1573
				case call 'beam_lib':'build_module'
					 (Chunks) of
				  <{'ok',BeamPlusNative}> when 'true' ->
				      %% Line 1574
				      BeamPlusNative
				  ( <_6> when 'true' ->
					primop 'match_fail'
					    ({'badmatch',_6})
				    -| ['compiler_generated'] )
				end
		( <_2> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_2})
		  -| ['compiler_generated'] )
	      end
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'embed_native_code',2}}] )
	    -| ['compiler_generated'] )
	end
'effects_code_generation'/1 =
    %% Line 1581
    fun (_0) ->
	%% Line 1582
	case _0 of
	  %% Line 1583
	  <'beam'> when 'true' ->
	      'false'
	  %% Line 1584
	  <'report_warnings'> when 'true' ->
	      'false'
	  %% Line 1585
	  <'report_errors'> when 'true' ->
	      'false'
	  %% Line 1586
	  <'return_errors'> when 'true' ->
	      'false'
	  %% Line 1587
	  <'return_warnings'> when 'true' ->
	      'false'
	  %% Line 1588
	  <'warnings_as_errors'> when 'true' ->
	      'false'
	  %% Line 1589
	  <'binary'> when 'true' ->
	      'false'
	  %% Line 1590
	  <'verbose'> when 'true' ->
	      'false'
	  %% Line 1591
	  <{'cwd',_3}> when 'true' ->
	      'false'
	  %% Line 1592
	  <{'outdir',_4}> when 'true' ->
	      'false'
	  %% Line 1593
	  <_5> when 'true' ->
	      'true'
	end
'save_binary'/2 =
    %% Line 1596
    fun (_1,_0) ->
	case <_1,_0> of
	  <'none',St> when 'true' ->
	      {'ok','none',St}
	  %% Line 1597
	  <Code,St = {'compile',_17,_18,_19,_20,Outfile,Mod,_21,_22,Opts,_23,_24,_25,_26,_27}> when 'true' ->
	      %% Line 1599
	      case call 'lists':'member'
		       ('no_error_module_mismatch', Opts) of
		%% Line 1600
		<'true'> when 'true' ->
		    %% Line 1601
		    apply 'save_binary_1'/2
			(Code, St)
		%% Line 1602
		<'false'> when 'true' ->
		    let <_2> =
			call %% Line 1603
			     'filename':%% Line 1603
					'basename'
			    (%% Line 1603
			     Outfile)
		    in  let <Base> =
			    call %% Line 1603
				 'filename':%% Line 1603
					    'rootname'
				(_2)
			in  %% Line 1604
			    case call 'erlang':'atom_to_list'
				     (Mod) of
			      %% Line 1605
			      <_28>
				  when call 'erlang':'=:='
					(_28,
					 Base) ->
				  %% Line 1606
				  apply 'save_binary_1'/2
				      (Code, St)
			      %% Line 1607
			      <_29> when 'true' ->
				  let <Es> =
				      [%% Line 1608
				       {Outfile,%% Line 1609
						[{'none','compile',{'module_name',Mod,Base}}|[]]}|%% Line 1609
												  []]
				  in  let <_rec189> =
					  call %% Line 1610
					       'erlang':%% Line 1610
							'++'
					      (_25, %% Line 1610
						    Es)
				      in  let <_12> =
					      call %% Line 1610
						   'erlang':%% Line 1610
							    'setelement'
						  (%% Line 1610
						   13, %% Line 1610
						       St, %% Line 1610
							   _rec189)
					  in  %% Line 1610
					      {'error',_12}
			    end
		( <_14> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_14})
		  -| ['compiler_generated'] )
	      end
	  ( <_16,_15> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_16,_15})
		  -| [{'function_name',{'save_binary',2}}] )
	    -| ['compiler_generated'] )
	end
'save_binary_1'/2 =
    %% Line 1614
    fun (_1,_0) ->
	%% Line 1615
	( case _0 of
	    ( <( {'compile',_27,_28,_29,_30,_rec192,_31,_32,_33,_34,_35,_36,_37,_38,_39}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Tfile> =
		      apply %% Line 1616
			    'tmpfile'/1
			  (_rec192)
		  in  %% Line 1617
		      case apply 'write_binary'/3
			       (Tfile, _1, _0) of
			%% Line 1618
			<'ok'> when 'true' ->
			    %% Line 1619
			    case call 'file':'rename'
				     (Tfile, _rec192) of
			      %% Line 1620
			      <'ok'> when 'true' ->
				  %% Line 1621
				  {'ok','none',_0}
			      %% Line 1622
			      <{'error',RenameError}> when 'true' ->
				  let <Es0> =
				      [%% Line 1623
				       {_rec192,[{'none','compile',{'rename',Tfile,_rec192,%% Line 1624
											   RenameError}}|%% Line 1624
													 []]}|%% Line 1624
													      []]
				  in  let <_8> =
					  case %% Line 1625
					       call 'file':'delete'
						   (Tfile) of
					    %% Line 1626
					    <'ok'> when 'true' ->
						Es0
					    %% Line 1627
					    <{'error',DeleteError}> when 'true' ->
						%% Line 1628
						call 'erlang':'++'
						    (Es0, %% Line 1629
							  [{_rec192,%% Line 1630
								    [{'none','compile',{'delete_temp',Tfile,%% Line 1631
													    DeleteError}}|%% Line 1631
															  []]}|%% Line 1631
															       []])
					    ( <_7> when 'true' ->
						  %% Line 1625
						  primop 'match_fail'
						      ({'case_clause',_7})
					      -| ['compiler_generated'] )
					  end
				      in  let <_rec193> =
					      call %% Line 1633
						   'erlang':%% Line 1633
							    '++'
						  (_37, _8)
					  in  let <_15> =
						  call %% Line 1633
						       'erlang':%% Line 1633
								'setelement'
						      (%% Line 1633
						       13, _0, %% Line 1633
							       _rec193)
					      in  %% Line 1633
						  {'error',_15}
			      ( <_16> when 'true' ->
				    primop 'match_fail'
					({'case_clause',_16})
				-| ['compiler_generated'] )
			    end
			%% Line 1635
			<{'error',Error}> when 'true' ->
			    let <Es> =
				[%% Line 1636
				 {Tfile,[{'none','compile',{'write_error',Error}}|[]]}|%% Line 1636
										       []]
			    in  let <_rec196> =
				    call %% Line 1637
					 'erlang':%% Line 1637
						  '++'
					(_37, %% Line 1637
					      Es)
				in  let <_23> =
					call %% Line 1637
					     'erlang':%% Line 1637
						      'setelement'
					    (%% Line 1637
					     13, _0, %% Line 1637
						     _rec196)
				    in  %% Line 1637
					{'error',_23}
			( <_24> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_24})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_40> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'write_binary'/3 =
    %% Line 1640
    fun (_2,_1,_0) ->
	%% Line 1641
	( case _0 of
	    ( <( {'compile',_12,_13,_14,_15,_16,_17,_18,_19,_rec199,_20,_21,_22,_23,_24}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <_6> =
		      case call 'lists':'member'
			       ('compressed', _rec199) of
			%% Line 1642
			<'true'> when 'true' ->
			    ['compressed']
			%% Line 1643
			<'false'> when 'true' ->
			    []
			( <_5> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_5})
			  -| ['compiler_generated'] )
		      end
		  in  %% Line 1645
		      case call 'file':'write_file'
			       (_2, _1, _6) of
			%% Line 1646
			<'ok'> when 'true' ->
			    'ok'
			%% Line 1647
			<Error = {'error',_26}> when 'true' ->
			    Error
			( <_8> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_8})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_25> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'report_errors'/1 =
    %% Line 1653
    fun (_0) ->
	case _0 of
	  <{'compile',_6,_7,_8,_9,_10,_11,_12,_13,Opts,_14,_15,Errors,_16,_17}> when 'true' ->
	      %% Line 1654
	      case call 'lists':'member'
		       ('report_errors', Opts) of
		%% Line 1655
		<'true'> when 'true' ->
		    let <_3> =
			fun (_1) ->
			    %% Line 1656
			    case _1 of
			      <{{F,_X_L},Eds}> when 'true' ->
				  apply 'list_errors'/2
				      (F, Eds)
			      %% Line 1657
			      <{F,Eds}> when 'true' ->
				  apply 'list_errors'/2
				      (F, Eds)
			      ( <_2> when 'true' ->
				    ( primop 'match_fail'
					  ({'function_clause',_2})
				      -| [{'function_name',{'-report_errors/1-fun-0-',1}}] )
				-| ['compiler_generated'] )
			    end
		    in  %% Line 1656
			call 'lists':'foreach'
			    (_3, %% Line 1658
				 Errors)
		%% Line 1659
		<'false'> when 'true' ->
		    'ok'
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_5> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_5})
		  -| [{'function_name',{'report_errors',1}}] )
	    -| ['compiler_generated'] )
	end
'report_warnings'/1 =
    %% Line 1662
    fun (_0) ->
	case _0 of
	  <{'compile',_22,_23,_24,_25,_26,_27,_28,_29,Opts,_30,_31,_32,Ws0,_33}> when 'true' ->
	      let <Werror> =
		  call %% Line 1663
		       'lists':%% Line 1663
			       'member'
		      (%% Line 1663
		       'warnings_as_errors', %% Line 1663
					     Opts)
	      in  let <_3> =
		      case %% Line 1664
			   Werror of
			%% Line 1665
			<'true'> when 'true' ->
			    []
			%% Line 1666
			<'false'> when 'true' ->
			    [87|[97|[114|[110|[105|[110|[103|[58|[32]]]]]]]]]
			( <_2> when 'true' ->
			      %% Line 1664
			      primop 'match_fail'
				  ({'case_clause',_2})
			  -| ['compiler_generated'] )
		      end
		  in  let <_7> =
			  case %% Line 1668
			       Werror of
			    %% Line 1668
			    ( <( 'true'
				 -| ['compiler_generated'] )> when 'true' ->
				  call 'lists':'member'
				      ('report_errors', Opts)
			      -| ['compiler_generated'] )
			    %% Line 1668
			    ( <( 'false'
				 -| ['compiler_generated'] )> when 'true' ->
				  'false'
			      -| ['compiler_generated'] )
			    %% Line 1668
			    ( <_5> when 'true' ->
				  ( call ( 'erlang'
					   -| ['compiler_generated'] ):( 'error'
									 -| ['compiler_generated'] )
					(( {( 'badarg'
					      -| ['compiler_generated'] ),_5}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  let <_11> =
			      case %% Line 1669
				   call 'lists':'member'
				       ('report_warnings', Opts) of
				%% Line 1669
				( <( 'true'
				     -| ['compiler_generated'] )> when 'true' ->
				      'true'
				  -| ['compiler_generated'] )
				%% Line 1669
				( <( 'false'
				     -| ['compiler_generated'] )> when 'true' ->
				      _7
				  -| ['compiler_generated'] )
				%% Line 1669
				( <_9> when 'true' ->
				      ( call ( 'erlang'
					       -| ['compiler_generated'] ):( 'error'
									     -| ['compiler_generated'] )
					    (( {( 'badarg'
						  -| ['compiler_generated'] ),_9}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 1669
			      case _11 of
				%% Line 1670
				<'true'> when 'true' ->
				    let <_14> =
					fun (_12) ->
					    %% Line 1671
					    case _12 of
					      <{{F,_X_L},Eds}> when 'true' ->
						  apply 'format_message'/3
						      (F, _3, Eds)
					      %% Line 1672
					      <{F,Eds}> when 'true' ->
						  apply 'format_message'/3
						      (F, _3, Eds)
					      ( <_13> when 'true' ->
						    ( primop 'match_fail'
							  ({'function_clause',_13})
						      -| [{'function_name',{'-report_warnings/1-fun-0-',1}}] )
						-| ['compiler_generated'] )
					    end
				    in  let <Ws1> =
					    call %% Line 1671
						 'lists':%% Line 1671
							 'flatmap'
						(_14, %% Line 1673
						      Ws0)
					in  let <Ws> =
						call %% Line 1674
						     'lists':%% Line 1674
							     'sort'
						    (%% Line 1674
						     Ws1)
					    in  let <_19> =
						    fun (_17) ->
							%% Line 1675
							case _17 of
							  <{_34,Str}> when 'true' ->
							      call 'io':'put_chars'
								  (Str)
							  ( <_18> when 'true' ->
								( primop 'match_fail'
								      ({'function_clause',_18})
								  -| [{'function_name',{'-report_warnings/1-fun-1-',1}}] )
							    -| ['compiler_generated'] )
							end
						in  %% Line 1675
						    call 'lists':'foreach'
							(_19, Ws)
				%% Line 1676
				<'false'> when 'true' ->
				    'ok'
				( <_20> when 'true' ->
				      primop 'match_fail'
					  ({'case_clause',_20})
				  -| ['compiler_generated'] )
			      end
	  ( <_21> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21})
		  -| [{'function_name',{'report_warnings',1}}] )
	    -| ['compiler_generated'] )
	end
'format_message'/3 =
    %% Line 1679
    fun (_2,_1,_0) ->
	case <_2,_1,_0> of
	  <F,P,[{'none',Mod,E}|Es]> when 'true' ->
	      let <_3> =
		  call %% Line 1680
		       Mod:%% Line 1680
			   'format_error'
		      (%% Line 1680
		       E)
	      in  let <_4> =
		      call %% Line 1680
			   'io_lib':%% Line 1680
				    'format'
			  (%% Line 1680
			   [126|[116|[115|[58|[32|[126|[115|[126|[116|[115|[10]]]]]]]]]]], %% Line 1680
											   [F|[P|[_3|[]]]])
		  in  let <M> = {%% Line 1680
			   'none',_4}
		      in  let <_6> =
			      apply %% Line 1681
				    'format_message'/3
				  (%% Line 1681
				   F, %% Line 1681
				      P, %% Line 1681
					 Es)
			  in  %% Line 1681
			      [M|_6]
	  %% Line 1682
	  <F,P,[{Loc = {Line,Column},Mod,E}|Es]> when 'true' ->
	      let <_7> =
		  call %% Line 1684
		       Mod:%% Line 1684
			   'format_error'
		      (%% Line 1684
		       E)
	      in  let <_8> =
		      call %% Line 1683
			   'io_lib':%% Line 1683
				    'format'
			  (%% Line 1683
			   [126|[116|[115|[58|[126|[119|[58|[126|[119|[32|[126|[115|[126|[116|[115|[10]]]]]]]]]]]]]]]], %% Line 1684
															[F|[Line|[Column|[P|[_7|[]]]]]])
		  in  let <M> = {%% Line 1683
			   {F,Loc},_8}
		      in  let <_10> =
			      apply %% Line 1685
				    'format_message'/3
				  (%% Line 1685
				   F, %% Line 1685
				      P, %% Line 1685
					 Es)
			  in  %% Line 1685
			      [M|_10]
	  %% Line 1686
	  <F,P,[{Line,Mod,E}|Es]> when 'true' ->
	      let <_11> =
		  call %% Line 1688
		       Mod:%% Line 1688
			   'format_error'
		      (%% Line 1688
		       E)
	      in  let <_12> =
		      call %% Line 1687
			   'io_lib':%% Line 1687
				    'format'
			  (%% Line 1687
			   [126|[116|[115|[58|[126|[119|[58|[32|[126|[115|[126|[116|[115|[10]]]]]]]]]]]]]], %% Line 1688
													    [F|[Line|[P|[_11|[]]]]])
		  in  let <M> = {%% Line 1687
			   {F,{Line,0}},_12}
		      in  let <_14> =
			      apply %% Line 1689
				    'format_message'/3
				  (%% Line 1689
				   F, %% Line 1689
				      P, %% Line 1689
					 Es)
			  in  %% Line 1689
			      [M|_14]
	  %% Line 1690
	  <F,P,[{Mod,E}|Es]> when 'true' ->
	      let <_15> =
		  call %% Line 1693
		       Mod:%% Line 1693
			   'format_error'
		      (%% Line 1693
		       E)
	      in  let <_16> =
		      call %% Line 1693
			   'io_lib':%% Line 1693
				    'format'
			  (%% Line 1693
			   [126|[116|[115|[58|[32|[126|[115|[126|[116|[115|[10]]]]]]]]]]], %% Line 1693
											   [F|[P|[_15|[]]]])
		  in  let <M> = {%% Line 1693
			   'none',_16}
		      in  let <_18> =
			      apply %% Line 1694
				    'format_message'/3
				  (%% Line 1694
				   F, %% Line 1694
				      P, %% Line 1694
					 Es)
			  in  %% Line 1694
			      [M|_18]
	  %% Line 1695
	  <_22,_23,[]> when 'true' ->
	      []
	  ( <_21,_20,_19> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_21,_20,_19})
		  -| [{'function_name',{'format_message',3}}] )
	    -| ['compiler_generated'] )
	end
'list_errors'/2 =
    %% Line 1699
    fun (_1,_0) ->
	case <_1,_0> of
	  <F,[{'none',Mod,E}|Es]> when 'true' ->
	      let <_2> =
		  call %% Line 1700
		       Mod:%% Line 1700
			   'format_error'
		      (%% Line 1700
		       E)
	      in  do  %% Line 1700
		      call 'io':'fwrite'
			  ([126|[116|[115|[58|[32|[126|[116|[115|[10]]]]]]]]], [F|[_2|[]]])
		      %% Line 1701
		      apply 'list_errors'/2
			  (F, Es)
	  %% Line 1702
	  <F,[{{Line,Column},Mod,E}|Es]> when 'true' ->
	      let <_3> =
		  call %% Line 1703
		       Mod:%% Line 1703
			   'format_error'
		      (%% Line 1703
		       E)
	      in  do  %% Line 1703
		      call 'io':'fwrite'
			  ([126|[116|[115|[58|[126|[119|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]]]]], [F|[Line|[Column|[_3|[]]]]])
		      %% Line 1704
		      apply 'list_errors'/2
			  (F, Es)
	  %% Line 1705
	  <F,[{Line,Mod,E}|Es]> when 'true' ->
	      let <_4> =
		  call %% Line 1706
		       Mod:%% Line 1706
			   'format_error'
		      (%% Line 1706
		       E)
	      in  do  %% Line 1706
		      call 'io':'fwrite'
			  ([126|[116|[115|[58|[126|[119|[58|[32|[126|[116|[115|[10]]]]]]]]]]]], [F|[Line|[_4|[]]]])
		      %% Line 1707
		      apply 'list_errors'/2
			  (F, Es)
	  %% Line 1708
	  <F,[{Mod,E}|Es]> when 'true' ->
	      let <_5> =
		  call %% Line 1711
		       Mod:%% Line 1711
			   'format_error'
		      (%% Line 1711
		       E)
	      in  do  %% Line 1711
		      call 'io':'fwrite'
			  ([126|[116|[115|[58|[32|[126|[116|[115|[10]]]]]]]]], [F|[_5|[]]])
		      %% Line 1712
		      apply 'list_errors'/2
			  (F, Es)
	  %% Line 1713
	  <_X_F,[]> when 'true' ->
	      'ok'
	  ( <_7,_6> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7,_6})
		  -| [{'function_name',{'list_errors',2}}] )
	    -| ['compiler_generated'] )
	end
'iofile'/1 =
    %% Line 1724
    fun (_0) ->
	case _0 of
	  <File>
	      when call 'erlang':'is_atom'
		    (_0) ->
	      let <_1> =
		  call %% Line 1725
		       'erlang':%% Line 1725
				'atom_to_list'
		      (%% Line 1725
		       File)
	      in  %% Line 1725
		  apply 'iofile'/1
		      (_1)
	  %% Line 1726
	  <File> when 'true' ->
	      let <_3> =
		  call %% Line 1727
		       'filename':%% Line 1727
				  'dirname'
		      (%% Line 1727
		       File)
	      in  let <_2> =
		      call %% Line 1727
			   'filename':%% Line 1727
				      'basename'
			  (%% Line 1727
			   File, %% Line 1727
				 [46|[101|[114|[108]]]])
		  in  %% Line 1727
		      {_3,_2}
	end
'erlfile'/3 =
    %% Line 1729
    fun (_2,_1,_0) ->
	case <_2,_1,_0> of
	  <[46],Base,Suffix> when 'true' ->
	      %% Line 1730
	      call 'erlang':'++'
		  (Base, Suffix)
	  %% Line 1731
	  <Dir,Base,Suffix> when 'true' ->
	      let <_3> =
		  call %% Line 1732
		       'erlang':%% Line 1732
				'++'
		      (%% Line 1732
		       Base, %% Line 1732
			     Suffix)
	      in  %% Line 1732
		  call 'filename':'join'
		      (Dir, _3)
	end
'outfile'/3 =
    %% Line 1734
    fun (_2,_1,_0) ->
	case <_2,_1,_0> of
	  <Base,Ext,Opts>
	      when call 'erlang':'is_atom'
		    (Ext) ->
	      let <_3> =
		  call %% Line 1735
		       'erlang':%% Line 1735
				'atom_to_list'
		      (%% Line 1735
		       Ext)
	      in  %% Line 1735
		  apply 'outfile'/3
		      (Base, _3, Opts)
	  %% Line 1736
	  <Base,Ext,Opts> when 'true' ->
	      let <_5> =
		  case %% Line 1737
		       call 'lists':'keyfind'
			   ('outdir', 1, Opts) of
		    %% Line 1738
		    <{'outdir',Odir}> when 'true' ->
			call 'filename':'join'
			    (Odir, Base)
		    %% Line 1739
		    <_X_Other> when 'true' ->
			Base
		  end
	      in  let <_7> =
		      [46|%% Line 1741
			  Ext]
		  in  %% Line 1741
		      call 'erlang':'++'
			  (_5, _7)
	end
'objfile'/2 =
    %% Line 1743
    fun (_1,_0) ->
	%% Line 1744
	( case _0 of
	    ( <( {'compile',_6,_7,_8,_9,_10,_11,_12,_13,_rec200,_14,_15,_16,_17,_18}
		 -| ['compiler_generated'] )> when 'true' ->
		  apply 'outfile'/3
		      (_1, [98|[101|[97|[109]]]], _rec200)
	      -| ['compiler_generated'] )
	    ( <_19> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'tmpfile'/1 =
    %% Line 1746
    fun (_0) ->
	let <_1> =
	    call %% Line 1747
		 'lists':%% Line 1747
			 'reverse'
		(_0)
	in  let <_2> =
		call %% Line 1747
		     'erlang':%% Line 1747
			      'tl'
		    (_1)
	    in  %% Line 1747
		call 'lists':'reverse'
		    ([35|_2])
'pre_defs'/1 =
    %% Line 1753
    fun (_0) ->
	case _0 of
	  <[{'d',M,V}|Opts]> when 'true' ->
	      let <_1> =
		  apply %% Line 1754
			'pre_defs'/1
		      (%% Line 1754
		       Opts)
	      in  %% Line 1754
		  [{M,V}|_1]
	  %% Line 1755
	  <[{'d',M}|Opts]> when 'true' ->
	      let <_2> =
		  apply %% Line 1756
			'pre_defs'/1
		      (%% Line 1756
		       Opts)
	      in  %% Line 1756
		  [M|_2]
	  %% Line 1757
	  <[_4|Opts]> when 'true' ->
	      %% Line 1758
	      apply 'pre_defs'/1
		  (Opts)
	  %% Line 1759
	  <[]> when 'true' ->
	      []
	  ( <_3> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_3})
		  -| [{'function_name',{'pre_defs',1}}] )
	    -| ['compiler_generated'] )
	end
'inc_paths'/1 =
    %% Line 1761
    fun (_0) ->
	%% Line 1762
	( letrec
	      'lc$^0'/1 =
		  fun (_3) ->
		      case _3 of
			<[{'i',P}|_2]>
			    when call 'erlang':'is_list'
				  (P) ->
			    let <_4> =
				apply 'lc$^0'/1
				    (_2)
			    in  ( [P|_4]
				  -| ['compiler_generated'] )
			( <[_1|_2]> when 'true' ->
			      apply 'lc$^0'/1
				  (_2)
			  -| ['compiler_generated'] )
			<[]> when 'true' ->
			    []
			( <_6> when 'true' ->
			      ( primop 'match_fail'
				    ({'function_clause',_6})
				-| [{'function_name',{'lc$^0',1}}] )
			  -| ['compiler_generated'] )
		      end
	  in  apply 'lc$^0'/1
		  (_0)
	  -| ['list_comprehension'] )
'src_listing'/3 =
    %% Line 1764
    fun (_2,_1,_0) ->
	let <_7> =
	    fun (_4,_3) ->
		%% Line 1765
		case <_4,_3> of
		  <Lf,{_X_Mod,_X_Exp,Fs}> when 'true' ->
		      apply 'do_src_listing'/2
			  (Lf, Fs)
		  %% Line 1766
		  <Lf,Fs> when 'true' ->
		      apply 'do_src_listing'/2
			  (Lf, Fs)
		end
	in  %% Line 1765
	    apply 'listing'/4
		(_7, _2, _1, _0)
'do_src_listing'/2 =
    %% Line 1769
    fun (_1,_0) ->
	let <_2> =
	    call %% Line 1770
		 'io':%% Line 1770
		      'getopts'
		(_1)
	in  let <_3> =
		call %% Line 1770
		     'lists':%% Line 1770
			     'keyfind'
		    (%% Line 1770
		     'encoding', %% Line 1770
				 1, _2)
	    in  let <Opts> =
		    [_3|%% Line 1770
			[]]
		in  let <_8> =
			fun (_6) ->
			    let <_5> =
				call %% Line 1771
				     'erl_pp':%% Line 1771
					      'form'
				    (%% Line 1771
				     _6, %% Line 1771
					 Opts)
			    in  %% Line 1771
				call 'io':'put_chars'
				    (_1, [_5|[[10]]])
		    in  %% Line 1771
			call 'lists':'foreach'
			    (_8, _0)
'listing'/3 =
    %% Line 1774
    fun (_2,_1,_0) ->
	%% Line 1775
	case _0 of
	  <{'compile',_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28}> when 'true' ->
	      let <_5> =
		  call 'erlang':'setelement'
		      (12, _0, 'none')
	      in  let <_11> =
		      fun (_8,_7) ->
			  %% Line 1776
			  call 'beam_listing':'module'
			      (_8, _7)
		  in  %% Line 1776
		      apply 'listing'/4
			  (_11, _2, _1, _5)
	  ( <_29> when 'true' ->
		( call ( 'erlang'
			 -| ['compiler_generated'] ):( 'error'
						       -| ['compiler_generated'] )
		      (( {'badrecord','compile'}
			 -| ['compiler_generated'] ))
		  -| ['compiler_generated'] )
	    -| ['compiler_generated'] )
	end
'listing'/4 =
    %% Line 1778
    fun (_3,_2,_1,_0) ->
	%% Line 1779
	( case _0 of
	    ( <( {'compile',_23,_24,_rec202,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35}
		 -| ['compiler_generated'] )> when 'true' ->
		  let <Lfile> =
		      apply 'outfile'/3
			  (_rec202, _2, _30)
		  in  %% Line 1780
		      case call 'file':'open'
			       (Lfile, ['write'|['delayed_write']]) of
			%% Line 1781
			<{'ok',Lf}> when 'true' ->
			    %% Line 1782
			    case apply 'restore_expanded_types'/2
				     (_2, _1) of
			      <_51>
				  when call 'erlang':'=:='
					(_51,
					 _1) ->
				  do  %% Line 1783
				      apply 'output_encoding'/2
					  (Lf, _0)
				      do  %% Line 1784
					  apply _3
					      (Lf, _1)
					  %% Line 1785
					  case call 'file':'close'
						   (Lf) of
					    <'ok'> when 'true' ->
						%% Line 1786
						{'ok',_1,_0}
					    ( <_10> when 'true' ->
						  primop 'match_fail'
						      ({'badmatch',_10})
					      -| ['compiler_generated'] )
					  end
			      ( <_9> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_9})
				-| ['compiler_generated'] )
			    end
			%% Line 1787
			<{'error',Error}> when 'true' ->
			    let <Es> =
				[%% Line 1788
				 {Lfile,[{'none','compile',{'write_error',Error}}|[]]}|%% Line 1788
										       []]
			    in  let <_rec204> =
				    call %% Line 1789
					 'erlang':%% Line 1789
						  '++'
					(_33, %% Line 1789
					      Es)
				in  let <_17> =
					call %% Line 1789
					     'erlang':%% Line 1789
						      'setelement'
					    (%% Line 1789
					     13, _0, %% Line 1789
						     _rec204)
				    in  %% Line 1789
					{'error',_17}
			( <_18> when 'true' ->
			      primop 'match_fail'
				  ({'case_clause',_18})
			  -| ['compiler_generated'] )
		      end
	      -| ['compiler_generated'] )
	    ( <_36> when 'true' ->
		  ( call ( 'erlang'
			   -| ['compiler_generated'] ):( 'error'
							 -| ['compiler_generated'] )
			(( {'badrecord','compile'}
			   -| ['compiler_generated'] ))
		    -| ['compiler_generated'] )
	      -| ['compiler_generated'] )
	  end
	  -| ['compiler_generated'] )
'to_dis'/2 =
    %% Line 1792
    fun (_1,_0) ->
	case <_1,_0> of
	  <Code,St = {'compile',_20,_21,_22,_23,Outfile,Module,_24,_25,_26,_27,_28,_29,_30,_31}> when 'true' ->
	      let <Loaded> =
		  call %% Line 1793
		       'code':%% Line 1793
			      'is_loaded'
		      (%% Line 1793
		       Module)
	      in  let <Sticky> =
		      call %% Line 1794
			   'code':%% Line 1794
				  'is_sticky'
			  (%% Line 1794
			   Module)
		  in  do  %% Line 1795
			  ( case <> of
			      <>
				  when ( call 'erlang':'=:='
					  (Sticky,
					   'true')
				      -| ['compiler_generated'] ) ->
				  ( call ( 'code'
					   -| ['result_not_wanted'] ):( 'unstick_mod'
									-| ['result_not_wanted'] )
					(Module)
				    -| ['result_not_wanted'] )
			      ( <> when 'true' ->
				    []
				-| ['compiler_generated'] )
			    end
			    -| ['list_comprehension'] )
			  %% Line 1797
			  case call 'code':'load_binary'
				   (Module, [], Code) of
			    <{'module',_32}>
				when call 'erlang':'=:='
				      (_32,
				       Module) ->
				let <DestDir> =
				    call %% Line 1798
					 'filename':%% Line 1798
						    'dirname'
					(%% Line 1798
					 Outfile)
				in  let <_9> =
					call %% Line 1799
					     'erlang':%% Line 1799
						      'atom_to_list'
					    (%% Line 1799
					     Module)
				    in  let <_10> =
					    call %% Line 1799
						 'erlang':%% Line 1799
							  '++'
						(_9, %% Line 1799
						     [46|[100|[105|[115]]]])
					in  let <DisFile> =
						call %% Line 1799
						     'filename':%% Line 1799
								'join'
						    (%% Line 1799
						     DestDir, _10)
					    in  %% Line 1800
						case call 'erts_debug':'dis_to_file'
							 (Module, DisFile) of
						  <'ok'> when 'true' ->
						      do  %% Line 1803
							  ( case <> of
							      <>
								  when ( call ( 'erlang'
									     -| ['result_not_wanted'] ):( '=/='
													  -| ['result_not_wanted'] )
									  (Loaded,
									   ( 'false'
									     -| ['result_not_wanted'] ))
								      -| ['result_not_wanted'] ) ->
								  case ( call ( 'code'
										-| ['result_not_wanted'] ):( 'load_file'
													     -| ['result_not_wanted'] )
									     (Module)
									 -| ['result_not_wanted'] ) of
								    <( {'module',_33}
								       -| ['result_not_wanted'] )>
									when call 'erlang':'=:='
									      (_33,
									       Module) ->
									'ok'
								    ( <_13> when 'true' ->
									  primop 'match_fail'
									      ({'badmatch',_13})
								      -| ['compiler_generated'] )
								  end
							      ( <> when 'true' ->
								    []
								-| ['compiler_generated'] )
							    end
							    -| ['list_comprehension'] )
							  do  %% Line 1804
							      ( case <> of
								  <>
								      when ( call 'erlang':'=:='
									      (Sticky,
									       'true')
									  -| ['compiler_generated'] ) ->
								      call 'code':'stick_mod'
									  (Module)
								  ( <> when 'true' ->
									[]
								    -| ['compiler_generated'] )
								end
								-| ['list_comprehension'] )
							      %% Line 1805
							      {'ok',Code,St}
						  ( <_12> when 'true' ->
							primop 'match_fail'
							    ({'badmatch',_12})
						    -| ['compiler_generated'] )
						end
			    ( <_7> when 'true' ->
				  primop 'match_fail'
				      ({'badmatch',_7})
			      -| ['compiler_generated'] )
			  end
	  ( <_19,_18> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_19,_18})
		  -| [{'function_name',{'to_dis',2}}] )
	    -| ['compiler_generated'] )
	end
'output_encoding'/2 =
    %% Line 1807
    fun (_1,_0) ->
	case <_1,_0> of
	  <F,{'compile',_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,'none',_19,_20,_21}> when 'true' ->
	      let <_2> =
		  call %% Line 1808
		       'epp':%% Line 1808
			     'default_encoding'
		      ()
	      in  let <_22> =
		      call %% Line 1808
			   'io':%% Line 1808
				'setopts'
			  (%% Line 1808
			   F, %% Line 1808
			      [{'encoding',_2}|[]])
		  in  %% Line 1808
		      case _22 of
			<'ok'> when 'true' ->
			    ( _22
			      -| ['compiler_generated'] )
			( <_3> when 'true' ->
			      primop 'match_fail'
				  ({'badmatch',_3})
			  -| ['compiler_generated'] )
		      end
	  %% Line 1809
	  <F,{'compile',_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,Encoding,_33,_34,_35}> when 'true' ->
	      %% Line 1810
	      case call 'io':'setopts'
		       (F, [{'encoding',Encoding}|[]]) of
		<'ok'> when 'true' ->
		    let <_5> =
			call %% Line 1811
			     'epp':%% Line 1811
				   'encoding_to_string'
			    (%% Line 1811
			     Encoding)
		    in  let <_36> =
			    call %% Line 1811
				 'io':%% Line 1811
				      'fwrite'
				(%% Line 1811
				 F, %% Line 1811
				    #{#<37>(8,1,'integer',['unsigned'|['big']]),
				      #<37>(8,1,'integer',['unsigned'|['big']]),
				      #<32>(8,1,'integer',['unsigned'|['big']]),
				      #<126>(8,1,'integer',['unsigned'|['big']]),
				      #<115>(8,1,'integer',['unsigned'|['big']]),
				      #<10>(8,1,'integer',['unsigned'|['big']])}#, %% Line 1811
										   [_5|[]])
			in  %% Line 1811
			    case _36 of
			      <'ok'> when 'true' ->
				  ( _36
				    -| ['compiler_generated'] )
			      ( <_6> when 'true' ->
				    primop 'match_fail'
					({'badmatch',_6})
				-| ['compiler_generated'] )
			    end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'badmatch',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_8,_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_8,_7})
		  -| [{'function_name',{'output_encoding',2}}] )
	    -| ['compiler_generated'] )
	end
'restore_expanded_types'/2 =
    %% Line 1813
    fun (_1,_0) ->
	case <_1,_0> of
	  <[69],{M,I,Fs0}> when 'true' ->
	      let <Fs> =
		  apply %% Line 1814
			'restore_expand_module'/1
		      (%% Line 1814
		       Fs0)
	      in  %% Line 1815
		  {M,I,Fs}
	  %% Line 1816
	  <_X_Ext,Code> when 'true' ->
	      Code
	end
'restore_expand_module'/1 =
    %% Line 1818
    fun (_0) ->
	case _0 of
	  <[{'attribute',Line,'type',[Type|[]]}|Fs]> when 'true' ->
	      let <_1> =
		  apply %% Line 1819
			'restore_expand_module'/1
		      (%% Line 1819
		       Fs)
	      in  %% Line 1819
		  [{'attribute',Line,'type',Type}|_1]
	  %% Line 1820
	  <[{'attribute',Line,'opaque',[Type|[]]}|Fs]> when 'true' ->
	      let <_2> =
		  apply %% Line 1821
			'restore_expand_module'/1
		      (%% Line 1821
		       Fs)
	      in  %% Line 1821
		  [{'attribute',Line,'opaque',Type}|_2]
	  %% Line 1822
	  <[{'attribute',Line,'spec',[Arg|[]]}|Fs]> when 'true' ->
	      let <_3> =
		  apply %% Line 1823
			'restore_expand_module'/1
		      (%% Line 1823
		       Fs)
	      in  %% Line 1823
		  [{'attribute',Line,'spec',Arg}|_3]
	  %% Line 1824
	  <[{'attribute',Line,'callback',[Arg|[]]}|Fs]> when 'true' ->
	      let <_4> =
		  apply %% Line 1825
			'restore_expand_module'/1
		      (%% Line 1825
		       Fs)
	      in  %% Line 1825
		  [{'attribute',Line,'callback',Arg}|_4]
	  %% Line 1826
	  <[{'attribute',Line,'record',[R|[]]}|Fs]> when 'true' ->
	      let <_5> =
		  apply %% Line 1827
			'restore_expand_module'/1
		      (%% Line 1827
		       Fs)
	      in  %% Line 1827
		  [{'attribute',Line,'record',R}|_5]
	  %% Line 1828
	  <[F|Fs]> when 'true' ->
	      let <_6> =
		  apply %% Line 1829
			'restore_expand_module'/1
		      (%% Line 1829
		       Fs)
	      in  %% Line 1829
		  [F|_6]
	  %% Line 1830
	  <[]> when 'true' ->
	      []
	  ( <_7> when 'true' ->
		( primop 'match_fail'
		      ({'function_clause',_7})
		  -| [{'function_name',{'restore_expand_module',1}}] )
	    -| ['compiler_generated'] )
	end
'options'/0 =
    %% Line 1835
    fun () ->
	let <_0> =
	    apply %% Line 1836
		  'standard_passes'/0
		()
	in  %% Line 1836
	    apply 'help'/1
		(_0)
'help'/1 =
    %% Line 1838
    fun (_0) ->
	case _0 of
	  <[{'delay',Ps}|T]> when 'true' ->
	      do  %% Line 1839
		  apply 'help'/1
		      (Ps)
		  %% Line 1840
		  apply 'help'/1
		      (T)
	  %% Line 1841
	  <[{'iff',Flag,{'src_listing',Ext}}|T]> when 'true' ->
	      do  %% Line 1842
		  call 'io':'fwrite'
		      ([126|[112|[32|[45|[32|[71|[101|[110|[101|[114|[97|[116|[101|[32|[46|[126|[115|[32|[115|[111|[117|[114|[99|[101|[32|[108|[105|[115|[116|[105|[110|[103|[32|[102|[105|[108|[101|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Flag|[Ext|[]]])
		  %% Line 1843
		  apply 'help'/1
		      (T)
	  %% Line 1844
	  <[{'iff',Flag,{'listing',Ext}}|T]> when 'true' ->
	      do  %% Line 1845
		  call 'io':'fwrite'
		      ([126|[112|[32|[45|[32|[71|[101|[110|[101|[114|[97|[116|[101|[32|[46|[126|[115|[32|[102|[105|[108|[101|[10]]]]]]]]]]]]]]]]]]]]]]], [Flag|[Ext|[]]])
		  %% Line 1846
		  apply 'help'/1
		      (T)
	  %% Line 1847
	  <[{'iff',Flag,{Name,Fun}}|T]>
	      when call 'erlang':'is_function'
		    (Fun) ->
	      do  %% Line 1848
		  call 'io':'fwrite'
		      ([126|[112|[32|[45|[32|[82|[117|[110|[32|[126|[115|[10]]]]]]]]]]]], [Flag|[Name|[]]])
		  %% Line 1849
		  apply 'help'/1
		      (T)
	  %% Line 1850
	  <[{'iff',_X_Flag,Action}|T]> when 'true' ->
	      do  %% Line 1851
		  apply 'help'/1
		      (Action)
		  %% Line 1852
		  apply 'help'/1
		      (T)
	  %% Line 1853
	  <[{'unless',Flag,{'pass',Pass}}|T]> when 'true' ->
	      do  %% Line 1854
		  call 'io':'fwrite'
		      ([126|[112|[32|[45|[32|[83|[107|[105|[112|[32|[116|[104|[101|[32|[126|[115|[32|[112|[97|[115|[115|[10]]]]]]]]]]]]]]]]]]]]]], [Flag|[Pass|[]]])
		  %% Line 1855
		  apply 'help'/1
		      (T)
	  %% Line 1856
	  <[{'unless',Flag = 'no_postopt',List}|T]>
	      when call 'erlang':'is_list'
		    (List) ->
	      do  %% Line 1858
		  call 'io':'fwrite'
		      ([126|[112|[32|[45|[32|[83|[107|[105|[112|[32|[97|[108|[108|[32|[112|[111|[115|[116|[32|[111|[112|[116|[105|[109|[105|[115|[97|[116|[105|[111|[110|[10]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [Flag|[]])
		  do  %% Line 1859
		      apply 'help'/1
			  (List)
		      %% Line 1860
		      apply 'help'/1
			  (T)
	  %% Line 1861
	  <[{'unless',_X_Flag,Action}|T]> when 'true' ->
	      do  %% Line 1862
		  apply 'help'/1
		      (Action)
		  %% Line 1863
		  apply 'help'/1
		      (T)
	  %% Line 1864
	  <[_2|T]> when 'true' ->
	      %% Line 1865
	      apply 'help'/1
		  (T)
	  %% Line 1866
	  <_3> when 'true' ->
	      %% Line 1867
	      'ok'
	end
'compile'/3 =
    %% Line 1875
    fun (_2,_1,_0) ->
	do  %% Line 1876
	    apply 'pre_load'/0
		()
	    let <File> =
		apply %% Line 1877
		      'shorten_filename'/1
		    (_2)
	    in  let <_4> =
		    apply %% Line 1878
			  'make_erl_options'/1
			(_0)
		in  %% Line 1878
		    case apply 'file'/2
			     (File, _4) of
		      %% Line 1879
		      <{'ok',_X_Mod}> when 'true' ->
			  'ok'
		      %% Line 1880
		      <Other> when 'true' ->
			  Other
		    end
'compile_beam'/3 =
    %% Line 1885
    fun (_2,_1,_0) ->
	let <File> =
	    apply %% Line 1886
		  'shorten_filename'/1
		(_2)
	in  let <_4> =
		apply %% Line 1887
		      'make_erl_options'/1
		    (_0)
	    in  %% Line 1887
		case apply 'file'/2
			 (File, ['from_beam'|_4]) of
		  %% Line 1888
		  <{'ok',_X_Mod}> when 'true' ->
		      'ok'
		  %% Line 1889
		  <Other> when 'true' ->
		      Other
		end
'compile_asm'/3 =
    %% Line 1894
    fun (_2,_1,_0) ->
	let <File> =
	    apply %% Line 1895
		  'shorten_filename'/1
		(_2)
	in  let <_4> =
		apply %% Line 1896
		      'make_erl_options'/1
		    (_0)
	    in  %% Line 1896
		case apply 'file'/2
			 (File, ['from_asm'|_4]) of
		  %% Line 1897
		  <{'ok',_X_Mod}> when 'true' ->
		      'ok'
		  %% Line 1898
		  <Other> when 'true' ->
		      Other
		end
'compile_core'/3 =
    %% Line 1903
    fun (_2,_1,_0) ->
	let <File> =
	    apply %% Line 1904
		  'shorten_filename'/1
		(_2)
	in  let <_4> =
		apply %% Line 1905
		      'make_erl_options'/1
		    (_0)
	    in  %% Line 1905
		case apply 'file'/2
			 (File, ['from_core'|_4]) of
		  %% Line 1906
		  <{'ok',_X_Mod}> when 'true' ->
		      'ok'
		  %% Line 1907
		  <Other> when 'true' ->
		      Other
		end
'shorten_filename'/1 =
    %% Line 1910
    fun (_0) ->
	%% Line 1911
	case call 'file':'get_cwd'
		 () of
	  <{'ok',Cwd}> when 'true' ->
	      %% Line 1912
	      case call 'lists':'prefix'
		       (Cwd, _0) of
		%% Line 1913
		<'false'> when 'true' ->
		    _0
		%% Line 1914
		<'true'> when 'true' ->
		    let <_2> =
			call %% Line 1915
			     'erlang':%% Line 1915
				      'length'
			    (%% Line 1915
			     Cwd)
		    in  %% Line 1915
			case call 'lists':'nthtail'
				 (_2, _0) of
			  %% Line 1916
			  <[47|N]> when 'true' ->
			      N
			  %% Line 1917
			  <N> when 'true' ->
			      N
			end
		( <_4> when 'true' ->
		      primop 'match_fail'
			  ({'case_clause',_4})
		  -| ['compiler_generated'] )
	      end
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'make_erl_options'/1 =
    %% Line 1923
    fun (_0) ->
	%% Line 1931
	case _0 of
	  <{'options',Includes,Outdir,OutputType,Defines,Warning,Verbose,_19,Specific,_20,Cwd}> when 'true' ->
	      let <_6> =
		  fun (_4) ->
		      %% Line 1934
		      case _4 of
			<{Name,Value}> when 'true' ->
			    %% Line 1935
			    {'d',Name,Value}
			%% Line 1936
			<Name> when 'true' ->
			    %% Line 1937
			    {'d',Name}
		      end
	      in  let <_7> =
		      call %% Line 1934
			   'lists':%% Line 1934
				   'map'
			  (_6, %% Line 1938
			       Defines)
		  in  let <_3> =
			  case %% Line 1939
			       OutputType of
			    %% Line 1940
			    <'undefined'> when 'true' ->
				[]
			    %% Line 1941
			    <'jam'> when 'true' ->
				['jam']
			    %% Line 1942
			    <'beam'> when 'true' ->
				['beam']
			    %% Line 1943
			    <'native'> when 'true' ->
				['native']
			    ( <_2> when 'true' ->
				  %% Line 1939
				  primop 'match_fail'
				      ({'case_clause',_2})
			      -| ['compiler_generated'] )
			  end
		      in  let <_8> =
			      call %% Line 1938
				   'erlang':%% Line 1938
					    '++'
				  (_7, _3)
			  in  let <_9> =
				  case <> of
				    %% Line 1933
				    <>
					when call 'erlang':'=/='
					      (Warning,
					       0) ->
					( ['report_warnings'|_8]
					  -| ['compiler_generated'] )
				    %% Line 1933
				    ( <> when 'true' ->
					  _8
				      -| ['compiler_generated'] )
				  end
			      in  let <_10> =
				      case <> of
					%% Line 1932
					<>
					    when ( call 'erlang':'=:='
						    (Verbose,
						     'true')
						-| ['compiler_generated'] ) ->
					    ( ['verbose'|_9]
					      -| ['compiler_generated'] )
					%% Line 1932
					( <> when 'true' ->
					      _9
					  -| ['compiler_generated'] )
				      end
				  in  let <_16> =
					  letrec
					      'lc$^1'/1 =
						  %% Line 1946
						  fun (_14) ->
						      case _14 of
							<[Dir|_13]> when 'true' ->
							    let <_15> =
								apply 'lc$^1'/1
								    (_13)
							    in  ( [{'i',Dir}|_15]
								  -| ['compiler_generated'] )
							<[]> when 'true' ->
							    []
							( <_21> when 'true' ->
							      ( primop 'match_fail'
								    ({'function_clause',_21})
								-| [{'function_name',{'lc$^1',1}}] )
							  -| ['compiler_generated'] )
						      end
					  in  %% Line 1946
					      apply 'lc$^1'/1
						  (Includes)
				      in  let <_17> =
					      [%% Line 1945
					       'report_errors'|%% Line 1945
							       [{'cwd',Cwd}|[{'outdir',Outdir}|%% Line 1946
											       call 'erlang':'++'
												   (_16, Specific)]]]
					  in  %% Line 1945
					      call 'erlang':'++'
						  (_10, _17)
	  ( <_1> when 'true' ->
		primop 'match_fail'
		    ({'badmatch',_1})
	    -| ['compiler_generated'] )
	end
'pre_load'/0 =
    %% Line 1948
    fun () ->
	do  %% Line 1989
	    ( call ( 'code'
		     -| ['result_not_wanted'] ):( 'ensure_modules_loaded'
						  -| ['result_not_wanted'] )
		  (['beam_a'|['beam_asm'|['beam_block'|['beam_bs'|['beam_bsm'|['beam_clean'|['beam_dead'|['beam_dict'|['beam_except'|['beam_flatten'|['beam_jump'|['beam_opcodes'|['beam_peep'|['beam_receive'|['beam_record'|['beam_reorder'|['beam_split'|['beam_trim'|['beam_type'|['beam_utils'|['beam_validator'|['beam_z'|['cerl'|['cerl_clauses'|['cerl_sets'|['cerl_trees'|['core_lib'|['epp'|['erl_bifs'|['erl_expand_records'|['erl_lint'|['erl_parse'|['erl_scan'|['sys_core_alias'|['sys_core_bsm'|['sys_core_dsetel'|['sys_core_fold'|['v3_codegen'|['v3_core'|['v3_kernel']]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
	      -| ['result_not_wanted'] )
	    %% Line 1990
	    'ok'
'module_info'/0 =
    fun () ->
	call 'erlang':'get_module_info'
	    ('compile')
'module_info'/1 =
    fun (_0) ->
	call 'erlang':'get_module_info'
	    ('compile', _0)
end
