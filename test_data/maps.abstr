{attribute,1,file,{"maps.erl",1}}.
{attribute,21,module,maps}.
{attribute,23,export,
           [{get,3},
            {filter,2},
            {fold,3},
            {map,2},
            {size,1},
            {new,0},
            {update_with,3},
            {update_with,4},
            {without,2},
            {with,2},
            {iterator,1},
            {next,1}]}.
{attribute,30,export,
           [{get,2},
            {find,2},
            {from_list,1},
            {is_key,2},
            {keys,1},
            {merge,2},
            {put,3},
            {remove,2},
            {take,2},
            {to_list,1},
            {update,3},
            {values,1}]}.
{attribute,35,opaque,
    {iterator,
        {type,35,union,
            [{type,35,tuple,
                 [{var,35,'Key'},
                  {var,35,'Value'},
                  {user_type,35,iterator,[{var,35,'Key'},{var,35,'Value'}]}]},
             {atom,35,none},
             {type,36,nonempty_improper_list,
                 [{type,36,integer,[]},
                  {type,36,map,
                      [{type,36,map_field_assoc,
                           [{var,36,'Key'},{var,36,'Value'}]}]}]}]},
        [{var,35,'Key'},{var,35,'Value'}]}}.
{attribute,38,type,
           {iterator,{user_type,38,iterator,
                                [{type,38,term,[]},{type,38,term,[]}]},
                     []}}.
{attribute,40,export_type,[{iterator,2},{iterator,0}]}.
{attribute,42,dialyzer,{no_improper_lists,{iterator,1}}}.
{attribute,47,spec,
           {{get,2},
            [{type,47,bounded_fun,
                   [{type,47,'fun',
                          [{type,47,product,[{var,47,'Key'},{var,47,'Map'}]},
                           {var,47,'Value'}]},
                    [{type,48,constraint,
                           [{atom,48,is_subtype},
                            [{var,48,'Key'},{type,48,term,[]}]]},
                     {type,49,constraint,
                           [{atom,49,is_subtype},
                            [{var,49,'Map'},{type,49,map,any}]]},
                     {type,50,constraint,
                           [{atom,50,is_subtype},
                            [{var,50,'Value'},{type,50,term,[]}]]}]]}]}}.
{function,52,get,2,
          [{clause,52,
                   [{var,52,'_'},{var,52,'_'}],
                   [],
                   [{call,52,
                          {remote,52,{atom,52,erlang},{atom,52,nif_error}},
                          [{atom,52,undef}]}]}]}.
{attribute,54,spec,
    {{find,2},
     [{type,54,bounded_fun,
          [{type,54,'fun',
               [{type,54,product,[{var,54,'Key'},{var,54,'Map'}]},
                {type,54,union,
                    [{type,54,tuple,[{atom,54,ok},{var,54,'Value'}]},
                     {atom,54,error}]}]},
           [{type,55,constraint,
                [{atom,55,is_subtype},
                 [{var,55,'Map'},
                  {type,55,map,
                      [{type,55,map_field_assoc,
                           [{var,55,'Key'},{var,55,'Value'}]},
                       {type,55,map_field_assoc,
                           [{var,55,'_'},{var,55,'_'}]}]}]]}]]}]}}.
{function,57,find,2,
          [{clause,57,
                   [{var,57,'_'},{var,57,'_'}],
                   [],
                   [{call,57,
                          {remote,57,{atom,57,erlang},{atom,57,nif_error}},
                          [{atom,57,undef}]}]}]}.
{attribute,60,spec,
    {{from_list,1},
     [{type,60,bounded_fun,
          [{type,60,'fun',
               [{type,60,product,[{var,60,'List'}]},{var,60,'Map'}]},
           [{type,61,constraint,
                [{atom,61,is_subtype},
                 [{var,61,'List'},
                  {type,61,list,
                      [{type,61,tuple,[{var,61,'Key'},{var,61,'Value'}]}]}]]},
            {type,62,constraint,
                [{atom,62,is_subtype},[{var,62,'Key'},{type,62,term,[]}]]},
            {type,63,constraint,
                [{atom,63,is_subtype},[{var,63,'Value'},{type,63,term,[]}]]},
            {type,64,constraint,
                [{atom,64,is_subtype},
                 [{var,64,'Map'},{type,64,map,any}]]}]]}]}}.
{function,66,from_list,1,
          [{clause,66,
                   [{var,66,'_'}],
                   [],
                   [{call,66,
                          {remote,66,{atom,66,erlang},{atom,66,nif_error}},
                          [{atom,66,undef}]}]}]}.
{attribute,70,spec,
           {{is_key,2},
            [{type,70,bounded_fun,
                   [{type,70,'fun',
                          [{type,70,product,[{var,70,'Key'},{var,70,'Map'}]},
                           {type,70,boolean,[]}]},
                    [{type,71,constraint,
                           [{atom,71,is_subtype},
                            [{var,71,'Key'},{type,71,term,[]}]]},
                     {type,72,constraint,
                           [{atom,72,is_subtype},
                            [{var,72,'Map'},{type,72,map,any}]]}]]}]}}.
{function,74,is_key,2,
          [{clause,74,
                   [{var,74,'_'},{var,74,'_'}],
                   [],
                   [{call,74,
                          {remote,74,{atom,74,erlang},{atom,74,nif_error}},
                          [{atom,74,undef}]}]}]}.
{attribute,77,spec,
    {{keys,1},
     [{type,77,bounded_fun,
          [{type,77,'fun',
               [{type,77,product,[{var,77,'Map'}]},{var,77,'Keys'}]},
           [{type,78,constraint,
                [{atom,78,is_subtype},
                 [{var,78,'Map'},
                  {type,78,map,
                      [{type,78,map_field_assoc,
                           [{var,78,'Key'},{var,78,'_'}]}]}]]},
            {type,79,constraint,
                [{atom,79,is_subtype},
                 [{var,79,'Keys'},{type,79,list,[{var,79,'Key'}]}]]}]]}]}}.
{function,81,keys,1,
          [{clause,81,
                   [{var,81,'_'}],
                   [],
                   [{call,81,
                          {remote,81,{atom,81,erlang},{atom,81,nif_error}},
                          [{atom,81,undef}]}]}]}.
{attribute,85,spec,
           {{merge,2},
            [{type,85,bounded_fun,
                   [{type,85,'fun',
                          [{type,85,product,[{var,85,'Map1'},{var,85,'Map2'}]},
                           {var,85,'Map3'}]},
                    [{type,86,constraint,
                           [{atom,86,is_subtype},
                            [{var,86,'Map1'},{type,86,map,any}]]},
                     {type,87,constraint,
                           [{atom,87,is_subtype},
                            [{var,87,'Map2'},{type,87,map,any}]]},
                     {type,88,constraint,
                           [{atom,88,is_subtype},
                            [{var,88,'Map3'},{type,88,map,any}]]}]]}]}}.
{function,90,merge,2,
          [{clause,90,
                   [{var,90,'_'},{var,90,'_'}],
                   [],
                   [{call,90,
                          {remote,90,{atom,90,erlang},{atom,90,nif_error}},
                          [{atom,90,undef}]}]}]}.
{attribute,94,spec,
           {{put,3},
            [{type,94,bounded_fun,
                   [{type,94,'fun',
                          [{type,94,product,
                                 [{var,94,'Key'},
                                  {var,94,'Value'},
                                  {var,94,'Map1'}]},
                           {var,94,'Map2'}]},
                    [{type,95,constraint,
                           [{atom,95,is_subtype},
                            [{var,95,'Key'},{type,95,term,[]}]]},
                     {type,96,constraint,
                           [{atom,96,is_subtype},
                            [{var,96,'Value'},{type,96,term,[]}]]},
                     {type,97,constraint,
                           [{atom,97,is_subtype},
                            [{var,97,'Map1'},{type,97,map,any}]]},
                     {type,98,constraint,
                           [{atom,98,is_subtype},
                            [{var,98,'Map2'},{type,98,map,any}]]}]]}]}}.
{function,100,put,3,
          [{clause,100,
                   [{var,100,'_'},{var,100,'_'},{var,100,'_'}],
                   [],
                   [{call,100,
                          {remote,100,{atom,100,erlang},{atom,100,nif_error}},
                          [{atom,100,undef}]}]}]}.
{attribute,104,spec,
           {{remove,2},
            [{type,104,bounded_fun,
                   [{type,104,'fun',
                          [{type,104,product,
                                 [{var,104,'Key'},{var,104,'Map1'}]},
                           {var,104,'Map2'}]},
                    [{type,105,constraint,
                           [{atom,105,is_subtype},
                            [{var,105,'Key'},{type,105,term,[]}]]},
                     {type,106,constraint,
                           [{atom,106,is_subtype},
                            [{var,106,'Map1'},{type,106,map,any}]]},
                     {type,107,constraint,
                           [{atom,107,is_subtype},
                            [{var,107,'Map2'},{type,107,map,any}]]}]]}]}}.
{function,109,remove,2,
          [{clause,109,
                   [{var,109,'_'},{var,109,'_'}],
                   [],
                   [{call,109,
                          {remote,109,{atom,109,erlang},{atom,109,nif_error}},
                          [{atom,109,undef}]}]}]}.
{attribute,111,spec,
    {{take,2},
     [{type,111,bounded_fun,
          [{type,111,'fun',
               [{type,111,product,[{var,111,'Key'},{var,111,'Map1'}]},
                {type,111,union,
                    [{type,111,tuple,[{var,111,'Value'},{var,111,'Map2'}]},
                     {atom,111,error}]}]},
           [{type,112,constraint,
                [{atom,112,is_subtype},
                 [{var,112,'Map1'},
                  {type,112,map,
                      [{type,112,map_field_assoc,
                           [{var,112,'Key'},{var,112,'Value'}]},
                       {type,112,map_field_assoc,
                           [{var,112,'_'},{var,112,'_'}]}]}]]},
            {type,113,constraint,
                [{atom,113,is_subtype},
                 [{var,113,'Map2'},
                  {type,113,map,
                      [{type,113,map_field_assoc,
                           [{var,113,'_'},{var,113,'_'}]}]}]]}]]}]}}.
{function,115,take,2,
          [{clause,115,
                   [{var,115,'_'},{var,115,'_'}],
                   [],
                   [{call,115,
                          {remote,115,{atom,115,erlang},{atom,115,nif_error}},
                          [{atom,115,undef}]}]}]}.
{attribute,117,spec,
    {{to_list,1},
     [{type,117,bounded_fun,
          [{type,117,'fun',
               [{type,117,product,[{var,117,'Map'}]},
                {type,117,list,
                    [{type,117,tuple,[{var,117,'Key'},{var,117,'Value'}]}]}]},
           [{type,118,constraint,
                [{atom,118,is_subtype},
                 [{var,118,'Map'},
                  {type,118,map,
                      [{type,118,map_field_assoc,
                           [{var,118,'Key'},{var,118,'Value'}]}]}]]}]]}]}}.
{function,120,to_list,1,
    [{clause,120,
         [{var,120,'Map'}],
         [[{call,120,{atom,120,is_map},[{var,120,'Map'}]}]],
         [{call,121,
              {atom,121,to_list_internal},
              [{call,121,
                   {remote,121,{atom,121,erts_internal},{atom,121,map_next}},
                   [{integer,121,0},{var,121,'Map'},{nil,121}]}]}]},
     {clause,122,
         [{var,122,'Map'}],
         [],
         [{call,123,
              {remote,123,{atom,123,erlang},{atom,123,error}},
              [{tuple,123,[{atom,123,badmap},{var,123,'Map'}]},
               {cons,123,{var,123,'Map'},{nil,123}}]}]}]}.
{function,125,to_list_internal,1,
    [{clause,125,
         [{cons,125,
              {var,125,'Iter'},
              {cons,125,{var,125,'Map'},{var,125,'Acc'}}}],
         [[{call,125,{atom,125,is_integer},[{var,125,'Iter'}]}]],
         [{call,126,
              {atom,126,to_list_internal},
              [{call,126,
                   {remote,126,{atom,126,erts_internal},{atom,126,map_next}},
                   [{var,126,'Iter'},{var,126,'Map'},{var,126,'Acc'}]}]}]},
     {clause,127,[{var,127,'Acc'}],[],[{var,128,'Acc'}]}]}.
{attribute,131,spec,
    {{update,3},
     [{type,131,bounded_fun,
          [{type,131,'fun',
               [{type,131,product,
                    [{var,131,'Key'},{var,131,'Value'},{var,131,'Map1'}]},
                {var,131,'Map2'}]},
           [{type,132,constraint,
                [{atom,132,is_subtype},
                 [{var,132,'Map1'},
                  {type,132,map,
                      [{type,132,map_field_exact,
                           [{var,132,'Key'},{var,132,'_'}]},
                       {type,132,map_field_assoc,
                           [{var,132,'_'},{var,132,'_'}]}]}]]},
            {type,133,constraint,
                [{atom,133,is_subtype},
                 [{var,133,'Map2'},
                  {type,133,map,
                      [{type,133,map_field_exact,
                           [{var,133,'Key'},{var,133,'Value'}]},
                       {type,133,map_field_assoc,
                           [{var,133,'_'},{var,133,'_'}]}]}]]}]]}]}}.
{function,135,update,3,
          [{clause,135,
                   [{var,135,'_'},{var,135,'_'},{var,135,'_'}],
                   [],
                   [{call,135,
                          {remote,135,{atom,135,erlang},{atom,135,nif_error}},
                          [{atom,135,undef}]}]}]}.
{attribute,138,spec,
    {{values,1},
     [{type,138,bounded_fun,
          [{type,138,'fun',
               [{type,138,product,[{var,138,'Map'}]},{var,138,'Values'}]},
           [{type,139,constraint,
                [{atom,139,is_subtype},
                 [{var,139,'Map'},
                  {type,139,map,
                      [{type,139,map_field_assoc,
                           [{var,139,'_'},{var,139,'Value'}]}]}]]},
            {type,140,constraint,
                [{atom,140,is_subtype},
                 [{var,140,'Values'},
                  {type,140,list,[{var,140,'Value'}]}]]}]]}]}}.
{function,142,values,1,
          [{clause,142,
                   [{var,142,'_'}],
                   [],
                   [{call,142,
                          {remote,142,{atom,142,erlang},{atom,142,nif_error}},
                          [{atom,142,undef}]}]}]}.
{attribute,146,spec,
           {{new,0},
            [{type,146,bounded_fun,
                   [{type,146,'fun',[{type,146,product,[]},{var,146,'Map'}]},
                    [{type,147,constraint,
                           [{atom,147,is_subtype},
                            [{var,147,'Map'},{type,147,map,[]}]]}]]}]}}.
{function,149,new,0,[{clause,149,[],[],[{map,149,[]}]}]}.
{attribute,151,spec,
    {{update_with,3},
     [{type,151,bounded_fun,
          [{type,151,'fun',
               [{type,151,product,
                    [{var,151,'Key'},{var,151,'Fun'},{var,151,'Map1'}]},
                {var,151,'Map2'}]},
           [{type,152,constraint,
                [{atom,152,is_subtype},
                 [{var,152,'Map1'},
                  {type,152,map,
                      [{type,152,map_field_exact,
                           [{var,152,'Key'},{var,152,'Value1'}]},
                       {type,152,map_field_assoc,
                           [{var,152,'_'},{var,152,'_'}]}]}]]},
            {type,153,constraint,
                [{atom,153,is_subtype},
                 [{var,153,'Map2'},
                  {type,153,map,
                      [{type,153,map_field_exact,
                           [{var,153,'Key'},{var,153,'Value2'}]},
                       {type,153,map_field_assoc,
                           [{var,153,'_'},{var,153,'_'}]}]}]]},
            {type,154,constraint,
                [{atom,154,is_subtype},
                 [{var,154,'Fun'},
                  {type,154,'fun',
                      [{type,154,product,[{var,154,'Value1'}]},
                       {var,154,'Value2'}]}]]}]]}]}}.
{function,156,update_with,3,
    [{clause,156,
         [{var,156,'Key'},{var,156,'Fun'},{var,156,'Map'}],
         [[{call,156,{atom,156,is_function},[{var,156,'Fun'},{integer,156,1}]},
           {call,156,{atom,156,is_map},[{var,156,'Map'}]}]],
         [{'case',157,
              {var,157,'Map'},
              [{clause,158,
                   [{map,158,
                        [{map_field_exact,158,
                             {var,158,'Key'},
                             {var,158,'Value'}}]}],
                   [],
                   [{map,158,
                        {var,158,'Map'},
                        [{map_field_exact,158,
                             {var,158,'Key'},
                             {call,158,
                                 {var,158,'Fun'},
                                 [{var,158,'Value'}]}}]}]},
               {clause,159,
                   [{map,159,[]}],
                   [],
                   [{call,159,
                        {remote,159,{atom,159,erlang},{atom,159,error}},
                        [{tuple,159,[{atom,159,badkey},{var,159,'Key'}]},
                         {cons,159,
                             {var,159,'Key'},
                             {cons,159,
                                 {var,159,'Fun'},
                                 {cons,159,
                                     {var,159,'Map'},
                                     {nil,159}}}}]}]}]}]},
     {clause,161,
         [{var,161,'Key'},{var,161,'Fun'},{var,161,'Map'}],
         [],
         [{call,162,
              {remote,162,{atom,162,erlang},{atom,162,error}},
              [{call,162,{atom,162,error_type},[{var,162,'Map'}]},
               {cons,162,
                   {var,162,'Key'},
                   {cons,162,
                       {var,162,'Fun'},
                       {cons,162,{var,162,'Map'},{nil,162}}}}]}]}]}.
{attribute,165,spec,
    {{update_with,4},
     [{type,165,bounded_fun,
          [{type,165,'fun',
               [{type,165,product,
                    [{var,165,'Key'},
                     {var,165,'Fun'},
                     {var,165,'Init'},
                     {var,165,'Map1'}]},
                {var,165,'Map2'}]},
           [{type,166,constraint,
                [{atom,166,is_subtype},
                 [{var,166,'Map1'},
                  {type,166,map,
                      [{type,166,map_field_assoc,
                           [{var,166,'Key'},{var,166,'Value1'}]},
                       {type,166,map_field_assoc,
                           [{var,166,'_'},{var,166,'_'}]}]}]]},
            {type,167,constraint,
                [{atom,167,is_subtype},
                 [{var,167,'Map2'},
                  {type,167,map,
                      [{type,167,map_field_exact,
                           [{var,167,'Key'},
                            {type,167,union,
                                [{var,167,'Value2'},{var,167,'Init'}]}]},
                       {type,167,map_field_assoc,
                           [{var,167,'_'},{var,167,'_'}]}]}]]},
            {type,168,constraint,
                [{atom,168,is_subtype},
                 [{var,168,'Fun'},
                  {type,168,'fun',
                      [{type,168,product,[{var,168,'Value1'}]},
                       {var,168,'Value2'}]}]]}]]}]}}.
{function,170,update_with,4,
    [{clause,170,
         [{var,170,'Key'},{var,170,'Fun'},{var,170,'Init'},{var,170,'Map'}],
         [[{call,170,{atom,170,is_function},[{var,170,'Fun'},{integer,170,1}]},
           {call,170,{atom,170,is_map},[{var,170,'Map'}]}]],
         [{'case',171,
              {var,171,'Map'},
              [{clause,172,
                   [{map,172,
                        [{map_field_exact,172,
                             {var,172,'Key'},
                             {var,172,'Value'}}]}],
                   [],
                   [{map,172,
                        {var,172,'Map'},
                        [{map_field_exact,172,
                             {var,172,'Key'},
                             {call,172,
                                 {var,172,'Fun'},
                                 [{var,172,'Value'}]}}]}]},
               {clause,173,
                   [{map,173,[]}],
                   [],
                   [{map,173,
                        {var,173,'Map'},
                        [{map_field_assoc,173,
                             {var,173,'Key'},
                             {var,173,'Init'}}]}]}]}]},
     {clause,175,
         [{var,175,'Key'},{var,175,'Fun'},{var,175,'Init'},{var,175,'Map'}],
         [],
         [{call,176,
              {remote,176,{atom,176,erlang},{atom,176,error}},
              [{call,176,{atom,176,error_type},[{var,176,'Map'}]},
               {cons,176,
                   {var,176,'Key'},
                   {cons,176,
                       {var,176,'Fun'},
                       {cons,176,
                           {var,176,'Init'},
                           {cons,176,{var,176,'Map'},{nil,176}}}}}]}]}]}.
{attribute,179,spec,
    {{get,3},
     [{type,179,bounded_fun,
          [{type,179,'fun',
               [{type,179,product,
                    [{var,179,'Key'},{var,179,'Map'},{var,179,'Default'}]},
                {type,179,union,[{var,179,'Value'},{var,179,'Default'}]}]},
           [{type,180,constraint,
                [{atom,180,is_subtype},
                 [{var,180,'Map'},
                  {type,180,map,
                      [{type,180,map_field_assoc,
                           [{var,180,'Key'},{var,180,'Value'}]},
                       {type,180,map_field_assoc,
                           [{var,180,'_'},{var,180,'_'}]}]}]]}]]}]}}.
{function,182,get,3,
    [{clause,182,
         [{var,182,'Key'},{var,182,'Map'},{var,182,'Default'}],
         [[{call,182,{atom,182,is_map},[{var,182,'Map'}]}]],
         [{'case',183,
              {var,183,'Map'},
              [{clause,184,
                   [{map,184,
                        [{map_field_exact,184,
                             {var,184,'Key'},
                             {var,184,'Value'}}]}],
                   [],
                   [{var,184,'Value'}]},
               {clause,185,[{map,185,[]}],[],[{var,185,'Default'}]}]}]},
     {clause,187,
         [{var,187,'Key'},{var,187,'Map'},{var,187,'Default'}],
         [],
         [{call,188,
              {remote,188,{atom,188,erlang},{atom,188,error}},
              [{tuple,188,[{atom,188,badmap},{var,188,'Map'}]},
               {cons,188,
                   {var,188,'Key'},
                   {cons,188,
                       {var,188,'Map'},
                       {cons,188,{var,188,'Default'},{nil,188}}}}]}]}]}.
{attribute,191,spec,
    {{filter,2},
     [{type,191,bounded_fun,
          [{type,191,'fun',
               [{type,191,product,[{var,191,'Pred'},{var,191,'MapOrIter'}]},
                {var,191,'Map'}]},
           [{type,192,constraint,
                [{atom,192,is_subtype},
                 [{var,192,'Pred'},
                  {type,192,'fun',
                      [{type,192,product,[{var,192,'Key'},{var,192,'Value'}]},
                       {type,192,boolean,[]}]}]]},
            {type,193,constraint,
                [{atom,193,is_subtype},
                 [{var,193,'MapOrIter'},
                  {type,193,union,
                      [{type,193,map,
                           [{type,193,map_field_assoc,
                                [{var,193,'Key'},{var,193,'Value'}]}]},
                       {user_type,193,iterator,
                           [{var,193,'Key'},{var,193,'Value'}]}]}]]},
            {type,194,constraint,
                [{atom,194,is_subtype},
                 [{var,194,'Map'},
                  {type,194,map,
                      [{type,194,map_field_assoc,
                           [{var,194,'Key'},{var,194,'Value'}]}]}]]}]]}]}}.
{function,196,filter,2,
    [{clause,196,
         [{var,196,'Pred'},{var,196,'Map'}],
         [[{call,196,
               {atom,196,is_function},
               [{var,196,'Pred'},{integer,196,2}]},
           {call,196,{atom,196,is_map},[{var,196,'Map'}]}]],
         [{call,197,
              {remote,197,{atom,197,maps},{atom,197,from_list}},
              [{call,197,
                   {atom,197,filter_1},
                   [{var,197,'Pred'},
                    {call,197,{atom,197,iterator},[{var,197,'Map'}]}]}]}]},
     {clause,198,
         [{var,198,'Pred'},{var,198,'Iterator'}],
         [[{call,198,
               {atom,198,is_function},
               [{var,198,'Pred'},{integer,198,2}]},
           {op,198,'andalso',
               {call,198,{atom,198,is_tuple},[{var,198,'Iterator'}]},
               {op,198,'==',
                   {call,198,{atom,198,tuple_size},[{var,198,'Iterator'}]},
                   {integer,198,3}}}],
          [{op,198,'==',{var,198,'Iterator'},{atom,198,none}}],
          [{op,198,'andalso',
               {call,198,
                   {atom,198,is_integer},
                   [{call,198,{atom,198,hd},[{var,198,'Iterator'}]}]},
               {call,198,
                   {atom,198,is_map},
                   [{call,198,{atom,198,tl},[{var,198,'Iterator'}]}]}}]],
         [{call,199,
              {remote,199,{atom,199,maps},{atom,199,from_list}},
              [{call,199,
                   {atom,199,filter_1},
                   [{var,199,'Pred'},{var,199,'Iterator'}]}]}]},
     {clause,200,
         [{var,200,'Pred'},{var,200,'Map'}],
         [],
         [{call,201,
              {remote,201,{atom,201,erlang},{atom,201,error}},
              [{call,201,{atom,201,error_type},[{var,201,'Map'}]},
               {cons,201,
                   {var,201,'Pred'},
                   {cons,201,{var,201,'Map'},{nil,201}}}]}]}]}.
{function,203,filter_1,2,
    [{clause,203,
         [{var,203,'Pred'},{var,203,'Iter'}],
         [],
         [{'case',204,
              {call,204,{atom,204,next},[{var,204,'Iter'}]},
              [{clause,205,
                   [{tuple,205,
                        [{var,205,'K'},{var,205,'V'},{var,205,'NextIter'}]}],
                   [],
                   [{'case',206,
                        {call,206,
                            {var,206,'Pred'},
                            [{var,206,'K'},{var,206,'V'}]},
                        [{clause,207,
                             [{atom,207,true}],
                             [],
                             [{cons,208,
                                  {tuple,208,[{var,208,'K'},{var,208,'V'}]},
                                  {call,208,
                                      {atom,208,filter_1},
                                      [{var,208,'Pred'},
                                       {var,208,'NextIter'}]}}]},
                         {clause,209,
                             [{atom,209,false}],
                             [],
                             [{call,210,
                                  {atom,210,filter_1},
                                  [{var,210,'Pred'},
                                   {var,210,'NextIter'}]}]}]}]},
               {clause,212,[{atom,212,none}],[],[{nil,213}]}]}]}]}.
{attribute,216,spec,
    {{fold,3},
     [{type,216,bounded_fun,
          [{type,216,'fun',
               [{type,216,product,
                    [{var,216,'Fun'},{var,216,'Init'},{var,216,'MapOrIter'}]},
                {var,216,'Acc'}]},
           [{type,217,constraint,
                [{atom,217,is_subtype},
                 [{var,217,'Fun'},
                  {type,217,'fun',
                      [{type,217,product,
                           [{var,217,'Key'},
                            {var,217,'Value'},
                            {var,217,'AccIn'}]},
                       {var,217,'AccOut'}]}]]},
            {type,218,constraint,
                [{atom,218,is_subtype},[{var,218,'Init'},{type,218,term,[]}]]},
            {type,219,constraint,
                [{atom,219,is_subtype},[{var,219,'Acc'},{var,219,'AccOut'}]]},
            {type,220,constraint,
                [{atom,220,is_subtype},
                 [{var,220,'AccIn'},
                  {type,220,union,[{var,220,'Init'},{var,220,'AccOut'}]}]]},
            {type,221,constraint,
                [{atom,221,is_subtype},
                 [{var,221,'MapOrIter'},
                  {type,221,union,
                      [{type,221,map,
                           [{type,221,map_field_assoc,
                                [{var,221,'Key'},{var,221,'Value'}]}]},
                       {user_type,221,iterator,
                           [{var,221,'Key'},{var,221,'Value'}]}]}]]}]]}]}}.
{function,223,fold,3,
    [{clause,223,
         [{var,223,'Fun'},{var,223,'Init'},{var,223,'Map'}],
         [[{call,223,{atom,223,is_function},[{var,223,'Fun'},{integer,223,3}]},
           {call,223,{atom,223,is_map},[{var,223,'Map'}]}]],
         [{call,224,
              {atom,224,fold_1},
              [{var,224,'Fun'},
               {var,224,'Init'},
               {call,224,{atom,224,iterator},[{var,224,'Map'}]}]}]},
     {clause,225,
         [{var,225,'Fun'},{var,225,'Init'},{var,225,'Iterator'}],
         [[{call,225,{atom,225,is_function},[{var,225,'Fun'},{integer,225,3}]},
           {op,225,'andalso',
               {call,225,{atom,225,is_tuple},[{var,225,'Iterator'}]},
               {op,225,'==',
                   {call,225,{atom,225,tuple_size},[{var,225,'Iterator'}]},
                   {integer,225,3}}}],
          [{op,225,'==',{var,225,'Iterator'},{atom,225,none}}],
          [{op,225,'andalso',
               {call,225,
                   {atom,225,is_integer},
                   [{call,225,{atom,225,hd},[{var,225,'Iterator'}]}]},
               {call,225,
                   {atom,225,is_map},
                   [{call,225,{atom,225,tl},[{var,225,'Iterator'}]}]}}]],
         [{call,226,
              {atom,226,fold_1},
              [{var,226,'Fun'},{var,226,'Init'},{var,226,'Iterator'}]}]},
     {clause,227,
         [{var,227,'Fun'},{var,227,'Init'},{var,227,'Map'}],
         [],
         [{call,228,
              {remote,228,{atom,228,erlang},{atom,228,error}},
              [{call,228,{atom,228,error_type_iter},[{var,228,'Map'}]},
               {cons,228,
                   {var,228,'Fun'},
                   {cons,228,
                       {var,228,'Init'},
                       {cons,228,{var,228,'Map'},{nil,228}}}}]}]}]}.
{function,230,fold_1,3,
    [{clause,230,
         [{var,230,'Fun'},{var,230,'Acc'},{var,230,'Iter'}],
         [],
         [{'case',231,
              {call,231,{atom,231,next},[{var,231,'Iter'}]},
              [{clause,232,
                   [{tuple,232,
                        [{var,232,'K'},{var,232,'V'},{var,232,'NextIter'}]}],
                   [],
                   [{call,233,
                        {atom,233,fold_1},
                        [{var,233,'Fun'},
                         {call,233,
                             {var,233,'Fun'},
                             [{var,233,'K'},{var,233,'V'},{var,233,'Acc'}]},
                         {var,233,'NextIter'}]}]},
               {clause,234,[{atom,234,none}],[],[{var,235,'Acc'}]}]}]}]}.
{attribute,238,spec,
    {{map,2},
     [{type,238,bounded_fun,
          [{type,238,'fun',
               [{type,238,product,[{var,238,'Fun'},{var,238,'MapOrIter'}]},
                {var,238,'Map'}]},
           [{type,239,constraint,
                [{atom,239,is_subtype},
                 [{var,239,'Fun'},
                  {type,239,'fun',
                      [{type,239,product,[{var,239,'Key'},{var,239,'Value1'}]},
                       {var,239,'Value2'}]}]]},
            {type,240,constraint,
                [{atom,240,is_subtype},
                 [{var,240,'MapOrIter'},
                  {type,240,union,
                      [{type,240,map,
                           [{type,240,map_field_assoc,
                                [{var,240,'Key'},{var,240,'Value1'}]}]},
                       {user_type,240,iterator,
                           [{var,240,'Key'},{var,240,'Value1'}]}]}]]},
            {type,241,constraint,
                [{atom,241,is_subtype},
                 [{var,241,'Map'},
                  {type,241,map,
                      [{type,241,map_field_assoc,
                           [{var,241,'Key'},{var,241,'Value2'}]}]}]]}]]}]}}.
{function,243,map,2,
    [{clause,243,
         [{var,243,'Fun'},{var,243,'Map'}],
         [[{call,243,{atom,243,is_function},[{var,243,'Fun'},{integer,243,2}]},
           {call,243,{atom,243,is_map},[{var,243,'Map'}]}]],
         [{call,244,
              {remote,244,{atom,244,maps},{atom,244,from_list}},
              [{call,244,
                   {atom,244,map_1},
                   [{var,244,'Fun'},
                    {call,244,{atom,244,iterator},[{var,244,'Map'}]}]}]}]},
     {clause,245,
         [{var,245,'Fun'},{var,245,'Iterator'}],
         [[{call,245,{atom,245,is_function},[{var,245,'Fun'},{integer,245,2}]},
           {op,245,'andalso',
               {call,245,{atom,245,is_tuple},[{var,245,'Iterator'}]},
               {op,245,'==',
                   {call,245,{atom,245,tuple_size},[{var,245,'Iterator'}]},
                   {integer,245,3}}}],
          [{op,245,'==',{var,245,'Iterator'},{atom,245,none}}],
          [{op,245,'andalso',
               {call,245,
                   {atom,245,is_integer},
                   [{call,245,{atom,245,hd},[{var,245,'Iterator'}]}]},
               {call,245,
                   {atom,245,is_map},
                   [{call,245,{atom,245,tl},[{var,245,'Iterator'}]}]}}]],
         [{call,246,
              {remote,246,{atom,246,maps},{atom,246,from_list}},
              [{call,246,
                   {atom,246,map_1},
                   [{var,246,'Fun'},{var,246,'Iterator'}]}]}]},
     {clause,247,
         [{var,247,'Fun'},{var,247,'Map'}],
         [],
         [{call,248,
              {remote,248,{atom,248,erlang},{atom,248,error}},
              [{call,248,{atom,248,error_type_iter},[{var,248,'Map'}]},
               {cons,248,
                   {var,248,'Fun'},
                   {cons,248,{var,248,'Map'},{nil,248}}}]}]}]}.
{function,250,map_1,2,
    [{clause,250,
         [{var,250,'Fun'},{var,250,'Iter'}],
         [],
         [{'case',251,
              {call,251,{atom,251,next},[{var,251,'Iter'}]},
              [{clause,252,
                   [{tuple,252,
                        [{var,252,'K'},{var,252,'V'},{var,252,'NextIter'}]}],
                   [],
                   [{cons,253,
                        {tuple,253,
                            [{var,253,'K'},
                             {call,253,
                                 {var,253,'Fun'},
                                 [{var,253,'K'},{var,253,'V'}]}]},
                        {call,253,
                            {atom,253,map_1},
                            [{var,253,'Fun'},{var,253,'NextIter'}]}}]},
               {clause,254,[{atom,254,none}],[],[{nil,255}]}]}]}]}.
{attribute,258,spec,
           {{size,1},
            [{type,258,bounded_fun,
                   [{type,258,'fun',
                          [{type,258,product,[{var,258,'Map'}]},
                           {type,258,non_neg_integer,[]}]},
                    [{type,259,constraint,
                           [{atom,259,is_subtype},
                            [{var,259,'Map'},{type,259,map,any}]]}]]}]}}.
{function,261,size,1,
          [{clause,261,
                   [{var,261,'Map'}],
                   [[{call,261,{atom,261,is_map},[{var,261,'Map'}]}]],
                   [{call,262,
                          {remote,262,{atom,262,erlang},{atom,262,map_size}},
                          [{var,262,'Map'}]}]},
           {clause,263,
                   [{var,263,'Val'}],
                   [],
                   [{call,264,
                          {remote,264,{atom,264,erlang},{atom,264,error}},
                          [{tuple,264,[{atom,264,badmap},{var,264,'Val'}]},
                           {cons,264,{var,264,'Val'},{nil,264}}]}]}]}.
{attribute,266,spec,
    {{iterator,1},
     [{type,266,bounded_fun,
          [{type,266,'fun',
               [{type,266,product,[{var,266,'Map'}]},{var,266,'Iterator'}]},
           [{type,267,constraint,
                [{atom,267,is_subtype},
                 [{var,267,'Map'},
                  {type,267,map,
                      [{type,267,map_field_assoc,
                           [{var,267,'Key'},{var,267,'Value'}]}]}]]},
            {type,268,constraint,
                [{atom,268,is_subtype},
                 [{var,268,'Iterator'},
                  {user_type,268,iterator,
                      [{var,268,'Key'},{var,268,'Value'}]}]]}]]}]}}.
{function,270,iterator,1,
          [{clause,270,
                   [{var,270,'M'}],
                   [[{call,270,{atom,270,is_map},[{var,270,'M'}]}]],
                   [{cons,270,{integer,270,0},{var,270,'M'}}]},
           {clause,271,
                   [{var,271,'M'}],
                   [],
                   [{call,271,
                          {remote,271,{atom,271,erlang},{atom,271,error}},
                          [{tuple,271,[{atom,271,badmap},{var,271,'M'}]},
                           {cons,271,{var,271,'M'},{nil,271}}]}]}]}.
{attribute,273,spec,
    {{next,1},
     [{type,273,bounded_fun,
          [{type,273,'fun',
               [{type,273,product,[{var,273,'Iterator'}]},
                {type,273,union,
                    [{type,273,tuple,
                         [{var,273,'Key'},
                          {var,273,'Value'},
                          {var,273,'NextIterator'}]},
                     {atom,273,none}]}]},
           [{type,274,constraint,
                [{atom,274,is_subtype},
                 [{var,274,'Iterator'},
                  {user_type,274,iterator,
                      [{var,274,'Key'},{var,274,'Value'}]}]]},
            {type,275,constraint,
                [{atom,275,is_subtype},
                 [{var,275,'NextIterator'},
                  {user_type,275,iterator,
                      [{var,275,'Key'},{var,275,'Value'}]}]]}]]}]}}.
{function,276,next,1,
          [{clause,276,
                   [{tuple,276,[{var,276,'K'},{var,276,'V'},{var,276,'I'}]}],
                   [],
                   [{tuple,277,[{var,277,'K'},{var,277,'V'},{var,277,'I'}]}]},
           {clause,278,
                   [{cons,278,{var,278,'Path'},{var,278,'Map'}}],
                   [[{call,278,{atom,278,is_integer},[{var,278,'Path'}]},
                     {call,278,{atom,278,is_map},[{var,278,'Map'}]}]],
                   [{call,279,
                          {remote,279,
                                  {atom,279,erts_internal},
                                  {atom,279,map_next}},
                          [{var,279,'Path'},
                           {var,279,'Map'},
                           {atom,279,iterator}]}]},
           {clause,280,[{atom,280,none}],[],[{atom,281,none}]},
           {clause,282,
                   [{var,282,'Iter'}],
                   [],
                   [{call,283,
                          {remote,283,{atom,283,erlang},{atom,283,error}},
                          [{atom,283,badarg},
                           {cons,283,{var,283,'Iter'},{nil,283}}]}]}]}.
{attribute,285,spec,
           {{without,2},
            [{type,285,bounded_fun,
                   [{type,285,'fun',
                          [{type,285,product,
                                 [{var,285,'Ks'},{var,285,'Map1'}]},
                           {var,285,'Map2'}]},
                    [{type,286,constraint,
                           [{atom,286,is_subtype},
                            [{var,286,'Ks'},{type,286,list,[{var,286,'K'}]}]]},
                     {type,287,constraint,
                           [{atom,287,is_subtype},
                            [{var,287,'Map1'},{type,287,map,any}]]},
                     {type,288,constraint,
                           [{atom,288,is_subtype},
                            [{var,288,'Map2'},{type,288,map,any}]]},
                     {type,289,constraint,
                           [{atom,289,is_subtype},
                            [{var,289,'K'},{type,289,term,[]}]]}]]}]}}.
{function,291,without,2,
    [{clause,291,
         [{var,291,'Ks'},{var,291,'M'}],
         [[{call,291,{atom,291,is_list},[{var,291,'Ks'}]},
           {call,291,{atom,291,is_map},[{var,291,'M'}]}]],
         [{call,292,
              {remote,292,{atom,292,lists},{atom,292,foldl}},
              [{'fun',292,
                   {function,
                       {atom,292,maps},
                       {atom,292,remove},
                       {integer,292,2}}},
               {var,292,'M'},
               {var,292,'Ks'}]}]},
     {clause,293,
         [{var,293,'Ks'},{var,293,'M'}],
         [],
         [{call,294,
              {remote,294,{atom,294,erlang},{atom,294,error}},
              [{call,294,{atom,294,error_type},[{var,294,'M'}]},
               {cons,294,
                   {var,294,'Ks'},
                   {cons,294,{var,294,'M'},{nil,294}}}]}]}]}.
{attribute,296,spec,
    {{with,2},
     [{type,296,bounded_fun,
          [{type,296,'fun',
               [{type,296,product,[{var,296,'Ks'},{var,296,'Map1'}]},
                {var,296,'Map2'}]},
           [{type,297,constraint,
                [{atom,297,is_subtype},
                 [{var,297,'Ks'},{type,297,list,[{var,297,'K'}]}]]},
            {type,298,constraint,
                [{atom,298,is_subtype},
                 [{var,298,'Map1'},
                  {type,298,map,
                      [{type,298,map_field_assoc,
                           [{var,298,'K'},{var,298,'V'}]},
                       {type,298,map_field_assoc,
                           [{var,298,'_'},{var,298,'_'}]}]}]]},
            {type,299,constraint,
                [{atom,299,is_subtype},
                 [{var,299,'Map2'},
                  {type,299,map,
                      [{type,299,map_field_assoc,
                           [{var,299,'K'},{var,299,'V'}]}]}]]}]]}]}}.
{function,301,with,2,
          [{clause,301,
                   [{var,301,'Ks'},{var,301,'Map1'}],
                   [[{call,301,{atom,301,is_list},[{var,301,'Ks'}]},
                     {call,301,{atom,301,is_map},[{var,301,'Map1'}]}]],
                   [{call,302,
                          {remote,302,{atom,302,maps},{atom,302,from_list}},
                          [{call,302,
                                 {atom,302,with_1},
                                 [{var,302,'Ks'},{var,302,'Map1'}]}]}]},
           {clause,303,
                   [{var,303,'Ks'},{var,303,'M'}],
                   [],
                   [{call,304,
                          {remote,304,{atom,304,erlang},{atom,304,error}},
                          [{call,304,{atom,304,error_type},[{var,304,'M'}]},
                           {cons,304,
                                 {var,304,'Ks'},
                                 {cons,304,{var,304,'M'},{nil,304}}}]}]}]}.
{function,306,with_1,2,
    [{clause,306,
         [{cons,306,{var,306,'K'},{var,306,'Ks'}},{var,306,'Map'}],
         [],
         [{'case',307,
              {var,307,'Map'},
              [{clause,308,
                   [{map,308,
                        [{map_field_exact,308,{var,308,'K'},{var,308,'V'}}]}],
                   [],
                   [{cons,308,
                        {tuple,308,[{var,308,'K'},{var,308,'V'}]},
                        {call,308,
                            {atom,308,with_1},
                            [{var,308,'Ks'},{var,308,'Map'}]}}]},
               {clause,309,
                   [{map,309,[]}],
                   [],
                   [{call,309,
                        {atom,309,with_1},
                        [{var,309,'Ks'},{var,309,'Map'}]}]}]}]},
     {clause,311,[{nil,311},{var,311,'_Map'}],[],[{nil,311}]}]}.
{function,313,error_type,1,
          [{clause,313,
                   [{var,313,'M'}],
                   [[{call,313,{atom,313,is_map},[{var,313,'M'}]}]],
                   [{atom,313,badarg}]},
           {clause,314,
                   [{var,314,'V'}],
                   [],
                   [{tuple,314,[{atom,314,badmap},{var,314,'V'}]}]}]}.
{function,316,error_type_iter,1,
          [{clause,316,
                   [{var,316,'M'}],
                   [[{call,316,{atom,316,is_map},[{var,316,'M'}]}],
                    [{op,316,'andalso',
                         {call,316,{atom,316,is_tuple},[{var,316,'M'}]},
                         {op,316,'==',
                             {call,316,{atom,316,tuple_size},[{var,316,'M'}]},
                             {integer,316,3}}}],
                    [{op,316,'==',{var,316,'M'},{atom,316,none}}],
                    [{op,316,'andalso',
                         {call,316,
                               {atom,316,is_integer},
                               [{call,316,{atom,316,hd},[{var,316,'M'}]}]},
                         {call,316,
                               {atom,316,is_map},
                               [{call,316,{atom,316,tl},[{var,316,'M'}]}]}}]],
                   [{atom,316,badarg}]},
           {clause,317,
                   [{var,317,'V'}],
                   [],
                   [{tuple,317,[{atom,317,badmap},{var,317,'V'}]}]}]}.
{eof,318}.
