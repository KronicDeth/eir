use super::Atom;
use super::{ Module, Annotated, Integer, FunctionName, AtomicLiteral, Constant,
Function, FunctionDefinition, Variable, Expression, SingleExpression, Pattern,
CaseClause, PrimOpCall };
use std::str::FromStr;

// Classes
sign -> bool = s:$([+-]) { s == "+" }
digit = [0-9]
uppercase = [A-Z\u{00c0}-\u{00d6}\u{00d8}-\u{00de}]
lowercase = [a-z\u{00df}-\u{00f6}\u{00f8}-\u{00ff}]
inputchar = [^\u{000d}\u{000a}]
control = [^\u{0000}-\u{001f}]
space = [\u{0020}]
namechar = [A-Z\u{00c0}-\u{00d6}\u{00d8}-\u{00de}a-z\u{00df}-\u{00f6}\u{00f8}-\u{00ff}0-9@_]
escape = "\\"

// Terminals
integer -> Integer = s:sign? d:$(digit+)
        { Integer { sign: s != Some(false), digits: d.to_string() } }
float = sign? digit+ "." digit+ ([eE] sign? digit+)?
// TODO
atom -> Atom = __ "'" a:$([^\u{0000}-\u{001f}\"\\']*) "'" { FromStr::from_str(a).unwrap() }
char = __ "$" [^\u{0000}-\u{001f}\"\\ ]
string -> String = __ "\"" s:$([^\u{0000}-\u{001f}\"\\]*) "\"" { s.to_string() }
variableName -> Variable = __ n:$((uppercase / ("_" namechar)) namechar*) { FromStr::from_str(n).unwrap() }
nil = __ "[" __ "]"

// Nonterminals
pub annotatedModule -> Annotated<Module> = annotated<module>
module -> Module = __ "module" module_name:atom
                 functions:moduleFunctions __
                 "attributes" attributes:moduleAttributes
                 definitions:functionDefinition* __
                 "end" __ { Module {
                       name: module_name,
                       declarations: functions,
                       attributes: attributes,
                       definitions: definitions,
                 } }
moduleFunctions -> Vec<FunctionName> = __ "[" n:(functionName ** (__ ",")) "]" { n }
moduleAttributes -> Vec<(Atom, Constant)> =
                 __ "["
                 ma:((lineAnnotation? a:atom __ "=" lineAnnotation? c:constant { (a, c) }) ** (__ ","))
                 __ "]"
                 { ma }

lineAnnotation = __ "%%" [^\n]*

functionName -> FunctionName = a:atom "/" i:integer { FunctionName { name: a, arity: i.as_u32() } }
functionDefinition -> FunctionDefinition =
                   n:annotatedFunctionName __ "=" lineAnnotation? f:annotatedFun
                                         { FunctionDefinition { name: n, fun: f } }
annotatedFunctionName -> Annotated<FunctionName> = annotated<functionName>
annotatedFun -> Annotated<Function> = annotated<fun>
fun -> Function = __ "fun" __ "(" a:annotatedVariable ** (__ ",") __ ")" __ "->" e:expression
                { Function { vars: a, body: e } }

annotatedVariable -> Annotated<Variable> = annotated<variableName>

expression -> Expression = lineAnnotation? l:annotatedValueList
                         { l }
                         / lineAnnotation? s:annotatedSingleExpression
                         { Annotated::empty(vec![s]) }
annotatedValueList -> Annotated<Vec<Annotated<SingleExpression>>> = annotated<valueList>
annotatedSingleExpression -> Annotated<SingleExpression> = annotated<singleExpression>
valueList -> Vec<Annotated<SingleExpression>> = __ "<" v:annotatedSingleExpression ** (__ ",") __ ">" { v }

singleExpression -> SingleExpression =
                 __ e:(f:functionName { SingleExpression::FunctionName(f) }
                 / a:atomicLiteral { SingleExpression::AtomicLiteral(a) }
                 / v:variableName { SingleExpression::Variable(v) }
                 / t:tuple { SingleExpression::Tuple(t) }
                 / l:list { SingleExpression::List { head: l.0, tail: Box::new(l.1) } }
                 / m:map { SingleExpression::Map(m) }
                 / l:let { SingleExpression::Let {vars: l.0, val: Box::new(l.1), body: Box::new(l.2) } }
                 / i:interModuleCall { SingleExpression::InterModuleCall {
                                     module: Box::new(i.0), name: Box::new(i.1), args: i.2 } }
                 / c:catch { SingleExpression::Catch(Box::new(c)) }
                 / c:case { SingleExpression::Case { val: Box::new(c.0), clauses: c.1 } }
                 / p:primOpCall { SingleExpression::PrimOpCall(p) }
                 / d:do { SingleExpression::Do(Box::new(d.0), Box::new(d.1)) }
                 / a:applyCall { SingleExpression::ApplyCall { fun: Box::new(a.0), args: a.1 } }
                 / t:try { t }
                 / r:receive { r }
                 / f:fun { SingleExpression::Fun(Box::new(f)) }
                 / l:letrec { l }) { e }

tuple -> Vec<Expression> =
      __ "{" e:expression ** (__ ",") __ "}" { e }
list -> (Vec<Expression>, Expression) =
     __ "[" e:expression ** (__ ",") __ "]" { (e, Expression::nil()) }
     / __ "[" e:expression ** (__ ",") __ "|" t:expression __ "]" { (e, t) }
map -> Vec<(Expression, Expression)> =
    __ "~{" v:(k:expression __ "=>" v:expression { (k, v) }) ** (__ ",") __ "}~" { v }
let -> (Vec<Annotated<Variable>>, Expression, Expression) =
    __ "let" v:variables __ "=" e:expression __ "in" i:expression { (v, e, i) }
catch -> Expression = __ "catch" e:expression { e }

case -> (Expression, Vec<Annotated<CaseClause>>) =
     __ "case" e:expression __ "of" a:annotatedClause+ __ "end"
     { (e, a) }
annotatedClause -> Annotated<CaseClause> = annotated<clause>
clause -> CaseClause = p:patterns g:guard __ "->" b:expression { CaseClause { patterns: p, guard: g, body: b } }
guard -> Expression = __ "when" e:expression { e }

primOpCall -> PrimOpCall =
           __ "primop" n:atom __ "(" e:expression ** (__ ",") __ ")"
           { PrimOpCall { name: n, args: e } }
do -> (Expression, Expression) = __ "do" e1:expression e2:expression { (e1, e2) }

try -> SingleExpression =
    __ "try" t:expression __ "of" av:variables __ "->" a:expression __
    "catch" cv:variables __ "->" c:expression
    { SingleExpression::Try { body: Box::new(t), then_vars: av, then: Box::new(a), catch_vars: cv, catch: Box::new(c) } }

variables -> Vec<Annotated<Variable>> =
          a:annotatedVariable { vec![a] }
          / __ "<" a:annotatedVariable ** (__ ",") __ ">" { a }
applyCall -> (Expression, Vec<Expression>) =
          __ "apply" f:expression __ "(" a:(expression ** (__ ",")) __ ")" { (f, a) }
interModuleCall -> (Expression, Expression, Vec<Expression>) =
                __ "call" a:expression __ ":" b:expression __ "(" c:(expression ** (__ ",")) __ ")"
                { (a, b, c) }
receive -> SingleExpression =
        __ "receive" c:annotatedClause+ __ "after" t:expression __ "->" b:expression
        { SingleExpression::Receive { clauses: c, timeout_time: Box::new(t), timeout_body: Box::new(b) } }
letrec -> SingleExpression =
       __ "letrec" f:(n:functionName __ "=" f:fun { (n, f) })+ __ "in" e:expression
       { SingleExpression::LetRec { funs: f, body: Box::new(e) } }

patterns -> Vec<Annotated<Pattern>> =
         lineAnnotation? p:annotatedPattern { vec![p] }
         / lineAnnotation? __ "<" p:annotatedPattern ** (__ ",") __ ">" { p }
annotatedPattern -> Annotated<Pattern> = p:annotated<pattern> { p }
pattern -> Pattern =
        v:variableName __ "=" p:annotatedPattern { Pattern::Bind(v, Box::new(p)) }
        / v:variableName { Pattern::Variable(v) }
        / a:atomicLiteral { Pattern::Atomic(a) }
        / t:patternTuple { Pattern::Tuple(t) }
        / l:patternList { Pattern::List(l, Box::new(Pattern::nil())) }
        / l:patternListTail { Pattern::List(l.0, Box::new(l.1)) }
        / m:patternMap { Pattern::Map(m) }
patternTuple -> Vec<Annotated<Pattern>> = __ "{" p:annotatedPattern ** (__ ",") __ "}" { p }
patternList -> Vec<Annotated<Pattern>> = __ "[" p:annotatedPattern ++ (__ ",") __ "]" { p }
patternListTail -> (Vec<Annotated<Pattern>>, Annotated<Pattern>) =
                "[" p:annotatedPattern ++ (__ ",") __ "|" t:annotatedPattern __ "]"
                { (p, t) }
patternMap -> Vec<(SingleExpression, Annotated<Pattern>)> =
           __ "~{" m:(k:singleExpression __ ":=" v:annotatedPattern { (k, v) }) ++ (__ ",") __ "}~" { m }
patternBitstring = __ "#{" patternBitstringElem ** (__ ",") __ "}#"
patternBitstringElem = __ "#<" annotatedPattern __ ">(" expression __ ")"

constant -> Constant = __ (a:atomicLiteral { Constant::Atomic(a) }
                     / constantTuple { Constant::Tuple(vec![]) }
                     / constantListTail { Constant::List(vec![], Box::new(Constant::Atomic(AtomicLiteral::Nil))) }
                     / constantList { Constant::List(vec![], Box::new(Constant::Atomic(AtomicLiteral::Nil))) })
atomicLiteral -> AtomicLiteral = __ (i:integer { AtomicLiteral::Integer(i) }
                               / float { AtomicLiteral::Float }
                               / a:atom { AtomicLiteral::Atom(a) }
                               / nil { AtomicLiteral::Nil }
                               / char { AtomicLiteral::Char(' ') }
                               / s:string { AtomicLiteral::String(s) })
constantTuple = __ "{" (constant ** (__ ",")) __ "}"
constantList = __ "[" (constant ++ (__ ",")) __ "]"
constantListTail = __ "[" (constant ++ (__ ",")) __ "|" constant "]"

annotated<I> = i:I { Annotated(i, vec![]) }
             / __ "(" i:I annotations __ ")" { Annotated(i, vec![]) }
annotations = __ "-|" __ "[" constant ** (__ ",") __ "]"

// Tokens

//__ = #quiet<" "*>
__ = #quiet<([ \n\r\t] / ("%" &[^%] [^\n]*))*>
