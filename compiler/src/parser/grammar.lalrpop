use super::{ Module, Annotated, Integer, FunctionName, AtomicLiteral, Constant,
Function, FunctionDefinition, Expression, SingleExpression, Pattern,
CaseClause, PrimOpCall };
use super::lex::Tok;
use ::intern::{Atom, Variable};

grammar<'input>(text: &'input str);

Integer: Integer = <i: "Integer"> => Integer { sign: i.0, digits: i.1.to_string() };
Atom: Atom = <"Atom"> => Atom::from_str(<>);
Variable: Atom = <"Variable"> => Atom::from_str(<>);

// =========================
// ======== Modules ========
// =========================

pub AnnotatedModule: Annotated<Module> = {
    <Annotated<Module>> => <>,
};
Module: Module = {
    "module" <module_name:Atom> <functions:ModuleFunctions>
    "attributes" <attributes:ModuleAttributes>
    <definitions:FunctionDefinition*>
    "end" => Module {
        name: module_name,
        declarations: functions,
        attributes: attributes,
        definitions: definitions,
    }
};
ModuleFunctions: Vec<FunctionName> = "[" <n:Comma<FunctionName>> "]" => n;
ModuleAttributes: Vec<(Atom, Constant)> = "[" <Comma<(<Atom> "=" <Constant>)>> "]";

// ===========================
// ======== Functions ========
// ===========================

FunctionName: FunctionName = {
    <a:Atom> "/" <i:Integer> => FunctionName { name: a, arity: i.as_u32() },
};
FunctionDefinition: FunctionDefinition = {
    <n:Annotated<FunctionName>> "=" <f:Annotated<Fun>> =>
        FunctionDefinition { name: n, fun: f },
};
Fun: Function = {
    "fun" "(" <a:Comma<Annotated<Variable>>> ")" "->" <e:Expression> =>
        Function { vars: a, body: e },
};

// =============================
// ======== Expressions ========
// =============================

Expression: Expression = {
    <a:Annotated<ValueList>> => a,
    <s:Annotated<SingleExpression>> => Annotated::empty(vec![s]),
};
ValueList: Vec<Annotated<SingleExpression>> = {
    "<" <Comma<Annotated<SingleExpression>>> ">" => <>,
};
SingleExpression: SingleExpression = {

    "[" <e:Comma<Expression>> <t:("|" <Expression>)?> "]" => 
        SingleExpression::List { head: e, tail: Box::new(t.unwrap_or(Expression::nil())) },

    <FunctionName> => SingleExpression::FunctionName(<>),

    "fun" <m:Atom> ":" <f:FunctionName> => 
        SingleExpression::ExternalFunctionName { module: m, name:f },

    <a:AtomicLiteral> => SingleExpression::AtomicLiteral(a),
    <v:Variable> => SingleExpression::Variable(v),
    <b:Binary> => SingleExpression::Binary(b),

    "{" <t:Comma<Expression>> "}" => SingleExpression::Tuple(t),

    "~{" <v:Comma<(<Expression> "=>" <Expression>)>> <m:("|" <Expression>)?> "}~" => 
        SingleExpression::Map(v, m),

    "let" <v:Variables> "=" <e:Expression> "in" <i:Expression> =>
        SingleExpression::Let { vars: v, val: Box::new(e), body: Box::new(i) },

    "call" <a:Expression> ":" <b:Expression> "(" <c:Comma<Expression>> ")" =>
        SingleExpression::InterModuleCall {
            module: Box::new(a), name: Box::new(b), args: c },
        
    "catch" <e:Expression> => SingleExpression::Catch(Box::new(e)),

    "case" <e:Expression> "of" <a:Annotated<Clause>*> "end" =>
        SingleExpression::Case { val: Box::new(e), clauses: a },

    "primop" <n:Atom> "(" <a:Comma<Expression>> ")" =>
        SingleExpression::PrimOpCall(PrimOpCall { name: n, args: a }),

    "do" <e1:Expression> <e2:Expression> =>
        SingleExpression::Do(Box::new(e1), Box::new(e2)),

    "apply" <f:Expression> "(" <a:Comma<Expression>> ")" =>
        SingleExpression::ApplyCall { fun: Box::new(f), args: a },

    "try" <t:Expression> "of" <av:Variables> "->" <a:Expression>
        "catch" <cv:Variables> "->" <c:Expression> =>
            SingleExpression::Try { body: Box::new(t), then_vars: av, then: Box::new(a), 
                catch_vars: cv, catch: Box::new(c) },

    "receive" <c:Annotated<Clause>+> "after" <t:Expression> "->" <b:Expression> =>
        SingleExpression::Receive { clauses: c, timeout_time: Box::new(t),
            timeout_body: Box::new(b) },

    <f:Fun> => SingleExpression::Fun(Box::new(f)),

    "letrec" <f:(<FunctionName> "=" <Fun>)+> "in" <e:Expression> =>
        SingleExpression::LetRec { funs: f, body: Box::new(e) },
};

Clause: CaseClause = {
    <p:Patterns> <g:Guard> "->" <b:Expression> => CaseClause { patterns: p, guard: g, body: b },
};
Guard: Expression = {
    "when" <Expression> => <>,
};

Variables: Vec<Annotated<Variable>> = {
    <a:Annotated<Variable>> => vec![a],
    "<" <a:Comma<Annotated<Variable>>> ">" => a,
};

// ==========================
// ======== Patterns ========
// ==========================

Patterns: Vec<Annotated<Pattern>> = {
    <p:AnnotatedPattern> => vec![p],
    "<" <p:Comma<AnnotatedPattern>> ">" => p,
};

AnnotatedPattern: Annotated<Pattern> = <p:Annotated<Pattern>> => p;

PatternMapEntry: (SingleExpression, Annotated<Pattern>) = {
    <k:SingleExpression> ":=" <v:AnnotatedPattern> => (k, v),
};

Pattern: Pattern = {
    <v:Variable> "=" <p:AnnotatedPattern> => Pattern::BindVar(v, Box::new(p)),
    <v:Variable> => Pattern::BindVar(v, Box::new(Annotated::empty(Pattern::Wildcard))),
    <a:AtomicLiteral> => Pattern::Atomic(a),
    <b:PatternBinary> => Pattern::Binary(b),

    "{" <t:Comma<AnnotatedPattern>> "}" => Pattern::Tuple(t),

    "~{" <m:Comma<PatternMapEntry>> "}~" => Pattern::Map(m),

    "[" <l:Comma<AnnotatedPattern>> <t:("|" <AnnotatedPattern>)?> "]" => 
        Pattern::List(l, Box::new(t.unwrap_or(Pattern::nil()))),

//    <l:PatternListTail> => Pattern::List(l.0, Box::new(l.1)),
//    <m:PatternMap> => Pattern::Map(m),
};

//PatternMap: Vec<(SingleExpression, Annotated<Pattern>)> = {
//};

// ==========================
// ======== Binaries ========
// ==========================

PatternBinary: Vec<(Annotated<Pattern>, Vec<Annotated<SingleExpression>>)> = {
    "#{" <b:Comma<PatternBinaryElem>> "}#" => b,
};
PatternBinaryElem: (Annotated<Pattern>, Vec<Annotated<SingleExpression>>) = {
    "#<" <p:AnnotatedPattern> ">(" <a:Comma<Annotated<SingleExpression>>> ")" => (p, a),
};

Binary: Vec<(Expression, Vec<Expression>)> = {
    "#{" <b:Comma<BinaryElem>> "}#" => b,
};
BinaryElem: (Expression, Vec<Expression>) = {
    "#<" <b:Expression> ">(" <a:Comma<Expression>> ")" => (b, a),
};

// ===========================
// ======== Constants ========
// ===========================

Constant: Constant = {
    "{" Comma<Constant> "}" => Constant::Tuple(vec![]),
    "[" Comma<Constant> ("|" Constant)? "]" =>
        Constant::List(vec![], Box::new(Constant::Atomic(AtomicLiteral::Nil))),
    <AtomicLiteral> => Constant::Atomic(<>),
};

AtomicLiteral: AtomicLiteral = {
    <i:Integer> => AtomicLiteral::Integer(i),
    //<f:Float> => AtomicLiteral::Float(f),
    <a:Atom> => AtomicLiteral::Atom(a),
    //"[" "]" => AtomicLiteral::Nil,
    <c:"Char"> => AtomicLiteral::Char(c),
    <s:"String"> => AtomicLiteral::String(s.to_string()),
};

ConstantTuple: () = "{" Comma<Constant> "}" => ();
ConstantList: () = "[" Comma<Constant> ("|" Constant)? "]" => ();

// =======================
// ======== Utils ========
// =======================

Annotated<Rule>: Annotated<Rule> = {
    <i:Rule> => Annotated(i, vec![]),
    "(" <i:Rule> Annotations ")" => Annotated(i, vec![]),
};
Annotations: () = {
    "-|" "[" <c:Comma<Constant>> "]" => (),
};

Comma<Rule>: Vec<Rule> = 
    <rules: (<Rule> ",")*> <last: Rule?> => {
        let mut rules = rules;
        rules.extend(last);
        rules
    };


extern {
    type Location = usize;
    type Error = ();
    enum Tok<'input> {
        "module" => Tok::Module,
        "attributes" => Tok::Attributes,
        "fun" => Tok::Fun,
        "case" => Tok::Case,
        "call" => Tok::Call,
        "apply" => Tok::Apply,
        "when" => Tok::When,
        "end" => Tok::End,
        "catch" => Tok::Catch,
        "do" => Tok::Do,
        "let" => Tok::Let,
        "in" => Tok::In,
        "of" => Tok::Of,
        "primop" => Tok::Primop,
        "try" => Tok::Try,
        "receive" => Tok::Receive,
        "after" => Tok::After,
        "letrec" => Tok::Letrec,

        "Atom" => Tok::Atom(<&'input str>),
        "Variable" => Tok::Variable(<&'input str>),
        "Integer" => Tok::Integer(<(bool, &'input str)>),
        "Float" => Tok::Float(<&'input str>),
        "Char" => Tok::Char(<char>),
        "String" => Tok::String(<&'input str>),

        "(" => Tok::ParenOpen,
        ")" => Tok::ParenClose,
        "{" => Tok::CurlyOpen,
        "}" => Tok::CurlyClose,
        "[" => Tok::SquareOpen,
        "]" => Tok::SquareClose,
        "<" => Tok::TriOpen,
        ">" => Tok::TriClose,
        "~{" => Tok::MapOpen,
        ":=" => Tok::MapMatch,
        "}~" => Tok::MapClose,
        "#{" => Tok::BitstringOpen,
        "}#" => Tok::BitstringClose,
        "#<" => Tok::BitstringPatternOpen,
        ">(" => Tok::BitstringPatternSep,
        "-|" => Tok::Annotation,
        ":" => Tok::Colon,
        "," => Tok::Comma,
        "/" => Tok::ForwardSlash,
        "=" => Tok::Equals,
        "|" => Tok::Pipe,
        "->" => Tok::Arrow,
        "=>" => Tok::HashRocket,
    }
}
